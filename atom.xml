<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="https://goupos.top/atom.xml" rel="self"/>
  
  <link href="https://goupos.top/"/>
  <updated>2024-02-23T17:53:40.106Z</updated>
  <id>https://goupos.top/</id>
  
  <author>
    <name>构造</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言好的处理代码</title>
    <link href="https://goupos.top/2024/02/23/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E5%A5%BD%E7%9A%84%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81/"/>
    <id>https://goupos.top/2024/02/23/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E5%A5%BD%E7%9A%84%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81/</id>
    <published>2024-02-23T08:33:01.000Z</published>
    <updated>2024-02-23T17:53:40.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、多种语言切换时，利用宏和编译器生成函数，不用手动去写重复写；"><a href="#一、多种语言切换时，利用宏和编译器生成函数，不用手动去写重复写；" class="headerlink" title="一、多种语言切换时，利用宏和编译器生成函数，不用手动去写重复写；"></a>一、多种语言切换时，利用宏和编译器生成函数，不用手动去写重复写；</h1><p>方式一：普通方式，手写每个函数，但是函数都是重复的；在C文件中编写，当切换的语言多时候，就会很麻烦，查看不方便,需要写的函数也越多；如果想要移入到头文件中，那么函数需要在 <code>__inline</code> 后面加入 <code>static</code>，<code>const char * Text_Table</code>需要在 <code>const</code> 前面加入 <code>satic</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">/*语言切换变量*/</span><br><span class="line">int language = 0;</span><br><span class="line"></span><br><span class="line">/*支持语言种类 最多支持两种 0： 中文、 1：英语*/</span><br><span class="line">#define LANGUAGE_MAX2</span><br><span class="line"></span><br><span class="line">/* 文字表 */</span><br><span class="line">const char * Text_Table[] = &#123;</span><br><span class="line">&quot;图片&quot;,&quot;image&quot;,</span><br><span class="line">&quot;加载框&quot;,&quot;Load Box&quot;,</span><br><span class="line">&quot;设置&quot;,&quot;set up&quot;,</span><br><span class="line">&quot;测试&quot;,&quot;test&quot;,</span><br><span class="line">&quot;语言&quot;,&quot;language&quot;,//如果要添加新的词语，那么要在这里也添加</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/*图片*/</span><br><span class="line">__inline const char * language_image(void)</span><br><span class="line">&#123;</span><br><span class="line">if(language&gt;= LANGUAGE_MAX)</span><br><span class="line">&#123;</span><br><span class="line">return *(Text_Table+(0*LANGUAGE_MAX));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch(language)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">return *(Text_Table+(0*LANGUAGE_MAX));</span><br><span class="line">case 1:</span><br><span class="line">return *(Text_Table+(0*LANGUAGE_MAX)+1);</span><br><span class="line">case 2:</span><br><span class="line">default:</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__inline const char * language_LoadBox(void)</span><br><span class="line">&#123;</span><br><span class="line">if(language&gt;= LANGUAGE_MAX)</span><br><span class="line">&#123;</span><br><span class="line">return *(Text_Table+(1*LANGUAGE_MAX));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch(language)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">return *(Text_Table+(1*LANGUAGE_MAX));</span><br><span class="line">case 1:</span><br><span class="line">return *(Text_Table+(1*LANGUAGE_MAX)+1);</span><br><span class="line">case 2:</span><br><span class="line">default:</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__inline const char * language_setup(void)</span><br><span class="line">&#123;</span><br><span class="line">if(language&gt;= LANGUAGE_MAX)</span><br><span class="line">&#123;</span><br><span class="line">return *(Text_Table+(2*LANGUAGE_MAX));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch(language)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">return *(Text_Table+(2*LANGUAGE_MAX));</span><br><span class="line">case 1:</span><br><span class="line">return *(Text_Table+(2*LANGUAGE_MAX)+1);</span><br><span class="line">case 2:</span><br><span class="line">default:</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//如果还要添加其他的词语，那么就要在下面添加对应的函数</span><br></pre></td></tr></table></figure><p>方式二：当切换的语言多时候,让宏自动生成函数，而且维护方便;如果想要移入到头文件中，那么函数需要在 <code>__inline</code> 后面加入 <code>static</code>，<code>const char * Text_Table</code>需要在 <code>const</code> 前面加入 <code>satic</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">/*语言切换变量*/</span><br><span class="line">int language = 0;</span><br><span class="line"></span><br><span class="line">/*支持语言种类 最多支持两种 0： 中文、 1：英语*/</span><br><span class="line">#define LANGUAGE_MAX2</span><br><span class="line"></span><br><span class="line">/* 文字表 */</span><br><span class="line">const char * Text_Table[] = &#123;</span><br><span class="line">&quot;图片&quot;,&quot;image&quot;,</span><br><span class="line">&quot;加载框&quot;,&quot;Load Box&quot;,</span><br><span class="line">&quot;设置&quot;,&quot;set up&quot;,</span><br><span class="line">&quot;测试&quot;,&quot;test&quot;,</span><br><span class="line">&quot;语言&quot;,&quot;language&quot;,//如果要添加新的词语，那么要在这里也添加</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言表宏定义</span><br><span class="line"> * 添加了其他词语，只需要在这个宏后面添加即可</span><br><span class="line"> */</span><br><span class="line">#define  LANGUAGE_TABLE_DEF(TYPE)           \</span><br><span class="line">TYPE(language_image,0)\</span><br><span class="line">TYPE(language_LoadBox,1)\</span><br><span class="line">TYPE(language_setup,2)\</span><br><span class="line">TYPE(language_test,3)\</span><br><span class="line">TYPE(language_language,4)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言模板</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">#define LANGUAGE_TEMPLATE(name,value)\</span><br><span class="line">__inline const char * name(void)\</span><br><span class="line">&#123;\</span><br><span class="line">if(language&gt;= LANGUAGE_MAX)\</span><br><span class="line">&#123;\</span><br><span class="line">return *(Text_Table+(value*LANGUAGE_MAX));\</span><br><span class="line">&#125;\</span><br><span class="line">\</span><br><span class="line">switch(language)                                            \</span><br><span class="line">&#123;                                                           \</span><br><span class="line">case 0:                                                 \</span><br><span class="line">return *(Text_Table+(value*LANGUAGE_MAX));          \</span><br><span class="line">case 1:                                                 \</span><br><span class="line">return *(Text_Table+(value*LANGUAGE_MAX)+1);        \</span><br><span class="line">case 2:                                                 \</span><br><span class="line">default:                                                \</span><br><span class="line">return NULL;                                        \</span><br><span class="line">&#125;                                                           \</span><br><span class="line">\</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言表实例化</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">LANGUAGE_TABLE_DEF(LANGUAGE_TEMPLATE)</span><br></pre></td></tr></table></figure><p>方式三：当只有两种语言的时候，那么只需要如下设置，编译器可能会优化，速度更快;如果想要移入到头文件中，那么函数需要在 <code>__inline</code> 后面加入 <code>static</code>，<code>const char * Text_Table</code>需要在 <code>const</code> 前面加入 <code>satic</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*语言切换变量*/</span><br><span class="line">int language = 0;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言表宏定义</span><br><span class="line"> * 添加了其他词语，只需要在这个宏后面添加即可</span><br><span class="line"> */</span><br><span class="line">#define  LANGUAGE_TABLE_DEF(TYPE)                           \</span><br><span class="line">TYPE(language_image,    &quot;图片&quot;,     &quot;image&quot;)            \</span><br><span class="line">TYPE(language_LoadBox,  &quot;加载框&quot;,   &quot;Load Box&quot;)         \</span><br><span class="line">TYPE(language_setup,    &quot;设置&quot;,     &quot;set up&quot;)           \</span><br><span class="line">TYPE(language_test,     &quot;测试&quot;,     &quot;test&quot;)             \</span><br><span class="line">TYPE(language_language, &quot;语言&quot;,     &quot;language&quot;)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言模板</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">#define LANGUAGE_TEMPLATE(name,ch,en)                               \</span><br><span class="line">__inline const char * name(void)\</span><br><span class="line">&#123;\</span><br><span class="line">return   language ?  en:ch;                                 \</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 语言表实例化</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">LANGUAGE_TABLE_DEF(LANGUAGE_TEMPLATE)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>当程序空间足够的时候加入 __inline ，空间不足的时候，删除掉 __inline</code></p></blockquote><hr>]]></content>
    
    
    <summary type="html">C语言好的处理代码</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Qt一些问题解决笔记</title>
    <link href="https://goupos.top/2024/02/21/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/Qt%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%AC%94%E8%AE%B0/"/>
    <id>https://goupos.top/2024/02/21/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/Qt%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E7%AC%94%E8%AE%B0/</id>
    <published>2024-02-21T15:06:03.000Z</published>
    <updated>2024-02-21T15:20:53.994Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="一、Qt解决中文显示乱码问题"><a href="#一、Qt解决中文显示乱码问题" class="headerlink" title="一、Qt解决中文显示乱码问题"></a>一、Qt解决中文显示乱码问题</h1><p>方法一：简单粗暴</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui.label-&gt;setText(u8&quot;林夕爱吃面皮肉夹馍&quot;);//使用方式</span><br></pre></td></tr></table></figure><p>其他方法请参考：<a href="https://developer.aliyun.com/article/1256040">https://developer.aliyun.com/article/1256040</a></p>]]></content>
    
    
    <summary type="html">Qt一些问题解决笔记</summary>
    
    
    
    <category term="笔记" scheme="https://goupos.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://goupos.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>BKP备份寄存器笔记</title>
    <link href="https://goupos.top/2024/02/21/%E7%AC%94%E8%AE%B0/BKP%E5%A4%87%E4%BB%BD%E5%AF%84%E5%AD%98%E5%99%A8%E7%AC%94%E8%AE%B0/"/>
    <id>https://goupos.top/2024/02/21/%E7%AC%94%E8%AE%B0/BKP%E5%A4%87%E4%BB%BD%E5%AF%84%E5%AD%98%E5%99%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2024-02-21T07:16:45.000Z</published>
    <updated>2024-02-21T07:55:19.019Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="一、备份寄存器-BKP-应用（侵入检测中断）"><a href="#一、备份寄存器-BKP-应用（侵入检测中断）" class="headerlink" title="一、备份寄存器(BKP)应用（侵入检测中断）"></a>一、备份寄存器(BKP)应用（侵入检测中断）</h1><ol><li>侵入检测功能（开启该功能）<br>当TAMPER引脚上的信号从0变成1或者从1变成0(取决于备份控制寄存器的设置)，会产生一个侵入检测事件（即使切断）。侵入检测事件将所有数据备份寄存器内容清除。</li></ol><p>当入侵管脚灌入设置的电平后,备份寄存器就全部清零了。<br>当掉电时，入侵引脚仍然在检测，若出现设置好的电平或触发沿，备份寄存器也会进行复位，</p><ol start="2"><li>关闭该功能都需要查看芯片手册</li></ol>]]></content>
    
    
    <summary type="html">BKP备份寄存器笔记</summary>
    
    
    
    <category term="笔记" scheme="https://goupos.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://goupos.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>编程开发中的一些关键字及含义</title>
    <link href="https://goupos.top/2024/02/21/%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%90%AB%E4%B9%89/"/>
    <id>https://goupos.top/2024/02/21/%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%90%AB%E4%B9%89/</id>
    <published>2024-02-21T02:13:46.000Z</published>
    <updated>2024-02-22T00:46:01.141Z</updated>
    
    <content type="html"><![CDATA[<p>ARM芯片中断：</p><p><code>NVIC_IRQChannelPreemptionPriority</code>：抢占优先级(抢占优先级权限更高)<br><code>NVIC_IRQChannelSubPriority</code>：响应（子）优先级（）</p>]]></content>
    
    
    <summary type="html">编程开发中的一些关键字及含义</summary>
    
    
    
    <category term="笔记" scheme="https://goupos.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://goupos.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式常见的C语言处理代码</title>
    <link href="https://goupos.top/2024/01/22/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81/"/>
    <id>https://goupos.top/2024/01/22/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%B8%B8%E8%A7%81%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81/</id>
    <published>2024-01-22T02:19:18.000Z</published>
    <updated>2024-01-23T03:29:07.378Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下为未调试代码，使用时候，请注意调试</p></blockquote><span id="more"></span><h1 id="循环队列（Circular-Buffer）："><a href="#循环队列（Circular-Buffer）：" class="headerlink" title="循环队列（Circular Buffer）："></a>循环队列（Circular Buffer）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#define RX_BUFF     500</span><br><span class="line">#define TX_BUFF     500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef struct _CircularBuffer__</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t     RXbuffer[RX_BUFF];      /* 接收缓冲区 */</span><br><span class="line">    uint8_t     TXbuffer[TX_BUFF];      /* 发送缓冲区 */</span><br><span class="line">    uint32_t    RXhead;                 /* 接收数据头 */</span><br><span class="line">    uint32_t    RXtail;                 /* 接收数据尾部 */</span><br><span class="line">    uint32_t    RXlen;                  /* 本次接收数据的长度 */</span><br><span class="line">    uint32_t    RXbuffersize;           /* 接收数据缓冲区大小 */</span><br><span class="line">    uint32_t    TXhead;                 /* 发送数据头 */</span><br><span class="line">    uint32_t    TXtail;                 /* 发送数据尾部 */</span><br><span class="line">    uint32_t    TXlen;                  /* 本次发送数据的长度 */</span><br><span class="line">    uint32_t    TXbuffersize;           /* 发送数据缓冲区大小 */</span><br><span class="line">&#125; CircularBuffer;</span><br><span class="line"></span><br><span class="line">CircularBuffer XXDeviceData;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 循环器对象初始化</span><br><span class="line"> * </span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @param RXbuffersize 循环器接收数据缓冲区大小</span><br><span class="line"> * @param TXbuffersize 循环器发送数据缓冲区大小</span><br><span class="line"> */</span><br><span class="line">void Circular_Init(CircularBuffer *Circularobject,uint32_t RXbuffersize,uint32_t TXbuffersize)</span><br><span class="line">&#123;</span><br><span class="line">    memset(Circularobject,0,sizeof(Circularobject));</span><br><span class="line">    Circularobject-&gt;RXbuffersize = RXbuffersize;</span><br><span class="line">    Circularobject-&gt;TXbuffersize = TXbuffersize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 循环器接收区域读取数据</span><br><span class="line"> * 数据量多时候使用该函数</span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @param ReadNData 读取数据个数</span><br><span class="line"> * @param Dst_data 读取数据存入目标</span><br><span class="line"> * @return uint8_t 1 读取成功 0读取失败</span><br><span class="line"> */</span><br><span class="line">uint8_t Circular_ReadData(CircularBuffer *Circularobject,uint32_t ReadNData,uint8_t * Dst_data)</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t i = 0;</span><br><span class="line">    uint32_t temp_ReadNData = (Circularobject-&gt;RXlen &gt; ReadNData)? ReadNData:Circularobject-&gt;RXlen; /* 当读取数据小于现有数据长度时候，读取指定长度数据，当读取数据大于现有数据时候，读取现有数据长度 */</span><br><span class="line">    uint8_t * src_data = Circularobject-&gt;RXbuffer + Circularobject-&gt;RXhead; /* 读取数据起始地址 */</span><br><span class="line">    uint32_t CircularData_len1 = Circularobject-&gt;RXhead + temp_ReadNData;   /* 读取完数据后，起始地址位置到哪了 */</span><br><span class="line">    uint32_t CircularData_len2 = (Circularobject-&gt;RXbuffersize &gt; CircularData_len1)?CircularData_len1:Circularobject-&gt;RXbuffersize; /* 判断当前读取的数据是否超过了缓冲区最大的长度 */</span><br><span class="line"></span><br><span class="line">    if((!temp_ReadNData)||(!Dst_data)) /* 无数据 */</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Circularobject-&gt;RXlen -= temp_ReadNData;</span><br><span class="line"></span><br><span class="line">    if(CircularData_len1 != CircularData_len2)  /* 是否到了结束地址 */</span><br><span class="line">    &#123;</span><br><span class="line">        for(i = Circularobject-&gt;RXhead;i&lt;CircularData_len2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *Dst_data++ = *src_data++;</span><br><span class="line">        &#125;</span><br><span class="line">        CircularData_len1 -= CircularData_len2;</span><br><span class="line">        Circularobject-&gt;RXhead = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(i = Circularobject-&gt;RXhead;i&lt;CircularData_len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *Dst_data++ = *src_data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circularobject-&gt;RXhead = i;</span><br><span class="line">    Circularobject-&gt;RXhead %= Circularobject-&gt;RXbuffersize;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 读取循环器接收区域前面第一个数据</span><br><span class="line"> * </span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @return uint8_t 返回数据</span><br><span class="line"> */</span><br><span class="line">uint8_t Circular_popfront(CircularBuffer *Circularobject)</span><br><span class="line">&#123;</span><br><span class="line">    uint8_t data = 0;</span><br><span class="line">    if(Circularobject-&gt;RXlen)</span><br><span class="line">    &#123;</span><br><span class="line">        Circularobject-&gt;RXlen--;</span><br><span class="line">        Circularobject-&gt;RXhead %= Circularobject-&gt;RXbuffersize;</span><br><span class="line">        data =Circularobject-&gt;RXbuffer[Circularobject-&gt;RXhead++];</span><br><span class="line">        return data;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 循环器接收区域写入数据</span><br><span class="line"> * 数据量多时候使用该函数</span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @param WriteNData 写入N个数据</span><br><span class="line"> * @param src_data 数据源</span><br><span class="line"> * @return uint8_t 1 写入成功 0写入失败</span><br><span class="line"> */</span><br><span class="line">uint8_t Circular_WriteData(CircularBuffer *Circularobject,uint32_t WriteNData,uint8_t * src_data)</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t i = 0;</span><br><span class="line">    uint32_t temp_WriteNData = (Circularobject-&gt;RXbuffersize &gt; WriteNData)?WriteNData:Circularobject-&gt;RXbuffersize;</span><br><span class="line">    uint8_t * Dst_data = Circularobject-&gt;RXbuffer + Circularobject-&gt;RXtail; /* 写入数据起始地址 */</span><br><span class="line">    uint32_t CircularData_len1 = Circularobject-&gt;RXtail + temp_WriteNData;   /* 写入数据后，起始地址位置到哪了 */</span><br><span class="line">    uint32_t CircularData_len2 = (Circularobject-&gt;RXbuffersize &gt; CircularData_len1)?CircularData_len1:Circularobject-&gt;RXbuffersize; /* 判断当前写入的数据是否超过了缓冲区最大的长度 */</span><br><span class="line">    </span><br><span class="line">    if((!temp_WriteNData)||(!src_data)) /* 无数据 */</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circularobject-&gt;RXlen = temp_WriteNData;</span><br><span class="line"></span><br><span class="line">    if(CircularData_len1 != CircularData_len2)</span><br><span class="line">    &#123;</span><br><span class="line">        for (i = Circularobject-&gt;RXtail; i &lt; CircularData_len2; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *Dst_data++ =*src_data++;</span><br><span class="line">        &#125;</span><br><span class="line">        CircularData_len1 -= CircularData_len2;</span><br><span class="line">        Circularobject-&gt;RXtail = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(i = Circularobject-&gt;RXtail;i&lt;CircularData_len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        *Dst_data++ = *src_data++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Circularobject-&gt;RXtail = i;</span><br><span class="line">    Circularobject-&gt;RXtail %= Circularobject-&gt;RXbuffersize;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 写入循环器接收区域下一个位置数据</span><br><span class="line"> * </span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @param src_data 待写入数据</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 写入循环器接收区域下一个位置数据</span><br><span class="line"> * </span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @param src_data 待写入数据</span><br><span class="line"> * @return uint8_t 写入是否成功 </span><br><span class="line"> */</span><br><span class="line">uint8_t Circular_pushback(CircularBuffer *Circularobject,uint8_t src_data)</span><br><span class="line">&#123;</span><br><span class="line">    if(Circularobject-&gt;RXlen &lt; Circularobject-&gt;RXbuffersize)</span><br><span class="line">    &#123;</span><br><span class="line">        Circularobject-&gt;RXtail %= Circularobject-&gt;RXbuffersize;</span><br><span class="line">        Circularobject-&gt;RXbuffer[Circularobject-&gt;RXtail++] = src_data;</span><br><span class="line">        Circularobject-&gt;RXlen++;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 循环器接收缓冲区是否为空</span><br><span class="line"> * </span><br><span class="line"> * @param Circularobject 循环器对象</span><br><span class="line"> * @return uint8_t 1 空 0非空</span><br><span class="line"> */</span><br><span class="line">uint8_t Circular_is_Empty(CircularBuffer *Circularobject)</span><br><span class="line">&#123;</span><br><span class="line">    if(!Circularobject-&gt;RXlen)</span><br><span class="line">    &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ddd(CircularBuffer *Circularobject)</span><br><span class="line">&#123;</span><br><span class="line">    Circularobject-&gt;RXtail = Circularobject-&gt;RXbuffersize - NUMBER(某个设备传过来数据的长度，那个设备数据直接到缓冲区了);</span><br><span class="line">    if(Circularobject-&gt;RXtail &gt;= Circularobject-&gt;RXhead)</span><br><span class="line">    &#123;</span><br><span class="line">        Circularobject-&gt;RXlen = Circularobject-&gt;RXtail - Circularobject-&gt;RXhead;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        Circularobject-&gt;RXlen = Circularobject-&gt;RXtail + Circularobject-&gt;RXbuffersize - Circularobject-&gt;RXhead;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if( Circularobject-&gt;RXlen &gt;=  Circularobject-&gt;RXbuffer )</span><br><span class="line">    &#123;</span><br><span class="line">        Circularobject-&gt;RXlen = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="断言（Assertion）："><a href="#断言（Assertion）：" class="headerlink" title="断言（Assertion）："></a>断言（Assertion）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#ifdef DEBUG</span><br><span class="line">#define assert(expression) ((expression) ? (void)0 : assert_failed(__FILE__, __LINE__))</span><br><span class="line">#elif</span><br><span class="line">#define assert(expression) ((void)0)</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">void assert_failed(const char *file, int line) &#123;</span><br><span class="line">    printf(&quot;Assertion failed at %s:%d\n&quot;, file, line);</span><br><span class="line">    // Additional error handling or logging can be added here</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>断言用于在程序中检查特定条件是否满足，如果条件为假，会触发断言失败，并输出相关信息</p><h1 id="位域反转（Bit-Reversal）："><a href="#位域反转（Bit-Reversal）：" class="headerlink" title="位域反转（Bit Reversal）："></a>位域反转（Bit Reversal）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">uint32_t reverse_bits(uint32_t num) </span><br><span class="line">&#123;</span><br><span class="line">    uint32_t numOfBits = sizeof(num) * 8;</span><br><span class="line">    uint32_t reverseNum = 0;</span><br><span class="line">    uint32_t i = 0;</span><br><span class="line"></span><br><span class="line">    for (i = 0; i &lt; numOfBits; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        if (num &amp; (1 &lt;&lt; i)) </span><br><span class="line">        &#123;</span><br><span class="line">            reverseNum |= (1 &lt;&lt; ((numOfBits - 1) - i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return reverseNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数将给定的无符号整数的位进行反转，可以用于某些嵌入式系统中的位级操作需求。</p><h1 id="字节序转换（Endianness-Conversion）："><a href="#字节序转换（Endianness-Conversion）：" class="headerlink" title="字节序转换（Endianness Conversion）："></a>字节序转换（Endianness Conversion）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>用于在大端（Big-Endian）和小端（Little-Endian）字节序之间进行转换的函数。按照字节排序即可</p><h1 id="位掩码（Bit-Masks）："><a href="#位掩码（Bit-Masks）：" class="headerlink" title="位掩码（Bit Masks）："></a>位掩码（Bit Masks）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>用于创建一个只有指定位被置位的位掩码，可用于位操作。</p><h1 id="二进制查找（Binary-Search）："><a href="#二进制查找（Binary-Search）：" class="headerlink" title="二进制查找（Binary Search）："></a>二进制查找（Binary Search）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int binary_search(int arr[], int size, int target) &#123;</span><br><span class="line">    int left = 0, right = size - 1;</span><br><span class="line"></span><br><span class="line">    while (left &lt;= right) &#123;</span><br><span class="line">        int mid = left + (right - left) / 2;</span><br><span class="line">        if (arr[mid] == target) &#123;</span><br><span class="line">            return mid;</span><br><span class="line">        &#125; else if (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            right = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1; // Not found</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于在已排序的数组中执行二进制查找的函数。</p><h1 id="位集合（Bitset）："><a href="#位集合（Bitset）：" class="headerlink" title="位集合（Bitset）："></a>位集合（Bitset）：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">    uint32_t bits;</span><br><span class="line">&#125; Bitset;</span><br><span class="line"></span><br><span class="line">void set_bit(Bitset *bitset, int bit) &#123;</span><br><span class="line">    bitset-&gt;bits |= (1U &lt;&lt; bit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int get_bit(Bitset *bitset, int bit) &#123;</span><br><span class="line">    return (bitset-&gt;bits &gt;&gt; bit) &amp; 1U;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现简单的位集合数据结构，用于管理一组位的状态。</p>]]></content>
    
    
    <summary type="html">嵌入式常见的C语言处理代码</summary>
    
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
    <category term="常见的C语言处理代码" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/%E5%B8%B8%E8%A7%81%E7%9A%84C%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E4%BB%A3%E7%A0%81/"/>
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/tags/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>pragma pack打包数据结构</title>
    <link href="https://goupos.top/2024/01/18/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E7%BC%96%E8%AF%91%E5%99%A8%E7%B3%BB%E5%88%97/pragma%20pack%E6%89%93%E5%8C%85%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://goupos.top/2024/01/18/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E7%BC%96%E8%AF%91%E5%99%A8%E7%B3%BB%E5%88%97/pragma%20pack%E6%89%93%E5%8C%85%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2024-01-18T07:49:29.000Z</published>
    <updated>2024-01-18T09:12:46.205Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Packing-data-structures-编译器入门-Gulde：打包数据结构"><a href="#Packing-data-structures-编译器入门-Gulde：打包数据结构" class="headerlink" title="Packing data structures(编译器入门 Gulde：打包数据结构)"></a>Packing data structures(编译器入门 Gulde：打包数据结构)</h1><p>通过将数据打包到结构中，可以减少应用程序所需的内存量。如果您需要在嵌入式系统中存储和访问大型数据阵列，这一点尤为重要。</p><p>如果结构中的各个数据成员没有打包，编译器可以在结构中添加填充，以便根据每个成员的自然对齐方式更快地访问各个成员。Arm®编译器提供了一个杂注和属性，用于在没有任何填充的情况下将成员打包到结构或联合中。</p><p>将成员打包到结构体或联合体中</p><p>编译指示或属性</p><p><code>#pragma pack(n)</code> 对于每个成员，如果n字节小于该成员的自然对齐方式，则将对齐方式设置为n字节，否则对齐方式为该成员的自然对齐方式。 有关详细信息，请参阅<code>#pragma pack (n)</code> 和 <code>__alignof__</code>。</p><p><code>__attribute__((packed))</code> 这相当于#pragma pack (1)。 但是，该属性也可以用于结构或联合中的各个成员。</p><p>要打包整个结构或联合，请使用 <code>__attribute__((packed))</code> 或 <code>#pragma pack(n)</code> 来声明结构，</p><p>使用<code>#pragma pack(n)</code>时，结构的对齐方式是将<code>#pragma pack(n)</code>应用于结构后最大成员的对齐方式。</p><p>指定字节几个字节对其方式，n可以指定 1 2 4 8 </p>]]></content>
    
    
    <summary type="html">pragma pack打包数据结构</summary>
    
    
    
    <category term="编译器系列" scheme="https://goupos.top/categories/%E7%BC%96%E8%AF%91%E5%99%A8%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="编译器系列" scheme="https://goupos.top/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>OllyDbg</title>
    <link href="https://goupos.top/2024/01/17/OllyDbg/"/>
    <id>https://goupos.top/2024/01/17/OllyDbg/</id>
    <published>2024-01-17T02:51:33.000Z</published>
    <updated>2024-01-17T02:51:33.323Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>QT生成一个动态链接库</title>
    <link href="https://goupos.top/2024/01/17/QT%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL/"/>
    <id>https://goupos.top/2024/01/17/QT%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93DLL/</id>
    <published>2024-01-16T17:58:51.000Z</published>
    <updated>2024-01-16T17:58:51.606Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>ASCII码表</title>
    <link href="https://goupos.top/2024/01/12/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/ASCII%E7%A0%81%E8%A1%A8/"/>
    <id>https://goupos.top/2024/01/12/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/ASCII%E7%A0%81%E8%A1%A8/</id>
    <published>2024-01-12T04:26:06.000Z</published>
    <updated>2024-01-12T08:24:40.208Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><html xmlns:v="urn:schemas-microsoft-com:vml"xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:x="urn:schemas-microsoft-com:office:excel"xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=gb2312"><meta name=ProgId content=Excel.Sheet><meta name=Generator content="Microsoft Excel 15"><link id=Main-File rel=Main-File href="../网ASCII码.htm"><link rel=File-List href=filelist.xml><link rel=Stylesheet href=stylesheet.css><style><!--table    {mso-displayed-decimal-separator:"\.";    mso-displayed-thousand-separator:"\,";}@page    {margin:.75in .7in .75in .7in;    mso-header-margin:.3in;    mso-footer-margin:.3in;}ruby    {ruby-align:left;}rt    {color:windowtext;    font-size:9.0pt;    font-weight:400;    font-style:normal;    text-decoration:none;    font-family:等线;    mso-generic-font-family:auto;    mso-font-charset:134;    mso-char-type:none;    display:none;}--></style><![if !supportTabStrip]><script language="JavaScript"><!--function fnUpdateTabs() {  if (parent.window.g_iIEVer>=4) {   if (parent.document.readyState=="complete"    && parent.frames['frTabs'].document.readyState=="complete")   parent.fnSetActiveSheet(0);  else   window.setTimeout("fnUpdateTabs();",150); }}<p>if (window.name!&#x3D;”frSheet”)<br> window.location.replace(“..&#x2F;网ASCII码.htm”);<br>else<br> fnUpdateTabs();<br>&#x2F;&#x2F;–&gt;<br></script></p></head><body link="#0563C1" vlink="#954F72"><table border=0 cellpadding=0 cellspacing=0 width=917 style='border-collapse: collapse;table-layout:fixed;width:688pt'> <col width=90 style='mso-width-source:userset;mso-width-alt:2880;width:68pt'> <col width=132 style='mso-width-source:userset;mso-width-alt:4224;width:99pt'> <col width=72 style='width:54pt'> <col width=63 style='mso-width-source:userset;mso-width-alt:2016;width:47pt'> <col width=121 style='mso-width-source:userset;mso-width-alt:3872;width:91pt'> <col width=439 style='mso-width-source:userset;mso-width-alt:14048;width:329pt'> <tr height=42 style='height:31.5pt'>  <td colspan=6 height=42 class=xl71 width=917 style='height:31.5pt;width:688pt'><font  class="font7">ASCII</font><font class="font6">码表</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>DEC</td>  <td class=xl65 style='border-top:none;border-left:none'>BIN</td>  <td class=xl65 style='border-top:none;border-left:none'>0CT</td>  <td class=xl65 style='border-top:none;border-left:none'>HEX</td>  <td class=xl65 style='border-top:none;border-left:none'><font class="font9">缩写</font><font  class="font10">/</font><font class="font9">符号</font></td>  <td class=xl66 style='border-top:none;border-left:none'><font class="font9">描述</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>0</td>  <td class=xl65 style='border-top:none;border-left:none'>00000000</td>  <td class=xl65 style='border-top:none;border-left:none'>000</td>  <td class=xl65 style='border-top:none;border-left:none'>00</td>  <td class=xl65 style='border-top:none;border-left:none'>NUL</td>  <td class=xl66 style='border-top:none;border-left:none'>Null char (<font  class="font9">空字符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>1</td>  <td class=xl65 style='border-top:none;border-left:none'>00000001</td>  <td class=xl65 style='border-top:none;border-left:none'>001</td>  <td class=xl65 style='border-top:none;border-left:none'>01</td>  <td class=xl65 style='border-top:none;border-left:none'>SOH</td>  <td class=xl66 style='border-top:none;border-left:none'>Start of Heading (<font  class="font9">标题开始</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>2</td>  <td class=xl65 style='border-top:none;border-left:none'>00000010</td>  <td class=xl65 style='border-top:none;border-left:none'>002</td>  <td class=xl65 style='border-top:none;border-left:none'>02</td>  <td class=xl65 style='border-top:none;border-left:none'>STX</td>  <td class=xl66 style='border-top:none;border-left:none'>Start of Text (<font  class="font9">正文开始</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>3</td>  <td class=xl65 style='border-top:none;border-left:none'>00000011</td>  <td class=xl65 style='border-top:none;border-left:none'>003</td>  <td class=xl65 style='border-top:none;border-left:none'>03</td>  <td class=xl65 style='border-top:none;border-left:none'>ETX</td>  <td class=xl66 style='border-top:none;border-left:none'>End of Text (<font  class="font9">正文结束</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>4</td>  <td class=xl65 style='border-top:none;border-left:none'>00000100</td>  <td class=xl65 style='border-top:none;border-left:none'>004</td>  <td class=xl65 style='border-top:none;border-left:none'>04</td>  <td class=xl65 style='border-top:none;border-left:none'>EOT</td>  <td class=xl66 style='border-top:none;border-left:none'>End of Transmission (<font  class="font9">传输结束</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>5</td>  <td class=xl65 style='border-top:none;border-left:none'>00000101</td>  <td class=xl65 style='border-top:none;border-left:none'>005</td>  <td class=xl65 style='border-top:none;border-left:none'>05</td>  <td class=xl65 style='border-top:none;border-left:none'>ENQ</td>  <td class=xl66 style='border-top:none;border-left:none'>Enquiry (<font  class="font9">请求</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>6</td>  <td class=xl65 style='border-top:none;border-left:none'>00000110</td>  <td class=xl65 style='border-top:none;border-left:none'>006</td>  <td class=xl65 style='border-top:none;border-left:none'>06</td>  <td class=xl65 style='border-top:none;border-left:none'>ACK</td>  <td class=xl66 style='border-top:none;border-left:none'>Acknowledgment (<font  class="font9">收到通知</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>7</td>  <td class=xl65 style='border-top:none;border-left:none'>00000111</td>  <td class=xl65 style='border-top:none;border-left:none'>007</td>  <td class=xl65 style='border-top:none;border-left:none'>07</td>  <td class=xl65 style='border-top:none;border-left:none'>BEL</td>  <td class=xl66 style='border-top:none;border-left:none'>Bell (<font  class="font9">响铃</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>8</td>  <td class=xl65 style='border-top:none;border-left:none'>00001000</td>  <td class=xl65 style='border-top:none;border-left:none'>010</td>  <td class=xl65 style='border-top:none;border-left:none'>08</td>  <td class=xl65 style='border-top:none;border-left:none'>BS</td>  <td class=xl66 style='border-top:none;border-left:none'>Back Space (<font  class="font9">退格</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>9</td>  <td class=xl65 style='border-top:none;border-left:none'>00001001</td>  <td class=xl65 style='border-top:none;border-left:none'>011</td>  <td class=xl65 style='border-top:none;border-left:none'>09</td>  <td class=xl65 style='border-top:none;border-left:none'>HT</td>  <td class=xl66 style='border-top:none;border-left:none'>Horizontal Tab (<font  class="font9">水平制表符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>10</td>  <td class=xl65 style='border-top:none;border-left:none'>00001010</td>  <td class=xl65 style='border-top:none;border-left:none'>012</td>  <td class=xl65 style='border-top:none;border-left:none'>0A</td>  <td class=xl65 style='border-top:none;border-left:none'>LF</td>  <td class=xl66 style='border-top:none;border-left:none'>Line Feed (<font  class="font9">换行键</font><font class="font10">)</font></td> </tr> <tr height=32 style='height:24.0pt'>  <td height=32 class=xl65 style='height:24.0pt;border-top:none'>11</td>  <td class=xl65 style='border-top:none;border-left:none'>00001011</td>  <td class=xl65 style='border-top:none;border-left:none'>013</td>  <td class=xl65 style='border-top:none;border-left:none'>0B</td>  <td class=xl65 style='border-top:none;border-left:none'>VT</td>  <td class=xl67 width=439 style='border-top:none;border-left:none;width:329pt'>Vertical  Tab (<font class="font9">垂直制表符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>12</td>  <td class=xl65 style='border-top:none;border-left:none'>00001100</td>  <td class=xl65 style='border-top:none;border-left:none'>014</td>  <td class=xl65 style='border-top:none;border-left:none'>0C</td>  <td class=xl65 style='border-top:none;border-left:none'>FF</td>  <td class=xl66 style='border-top:none;border-left:none'>Form Feed (<font  class="font9">换页键</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>13</td>  <td class=xl65 style='border-top:none;border-left:none'>00001101</td>  <td class=xl65 style='border-top:none;border-left:none'>015</td>  <td class=xl65 style='border-top:none;border-left:none'>0D</td>  <td class=xl65 style='border-top:none;border-left:none'>CR</td>  <td class=xl66 style='border-top:none;border-left:none'>Carriage Return (<font  class="font9">回车键</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>14</td>  <td class=xl65 style='border-top:none;border-left:none'>00001110</td>  <td class=xl65 style='border-top:none;border-left:none'>016</td>  <td class=xl65 style='border-top:none;border-left:none'>0E</td>  <td class=xl65 style='border-top:none;border-left:none'>SO</td>  <td class=xl66 style='border-top:none;border-left:none'>Shift Out / X-On (<font  class="font9">不用切换</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>15</td>  <td class=xl65 style='border-top:none;border-left:none'>00001111</td>  <td class=xl65 style='border-top:none;border-left:none'>017</td>  <td class=xl65 style='border-top:none;border-left:none'>0F</td>  <td class=xl65 style='border-top:none;border-left:none'>SI</td>  <td class=xl66 style='border-top:none;border-left:none'>Shift In / X-Off (<font  class="font9">启用切换</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>16</td>  <td class=xl65 style='border-top:none;border-left:none'>00010000</td>  <td class=xl65 style='border-top:none;border-left:none'>020</td>  <td class=xl65 style='border-top:none;border-left:none'>10</td>  <td class=xl65 style='border-top:none;border-left:none'>DLE</td>  <td class=xl66 style='border-top:none;border-left:none'>Data Line Escape (<font  class="font9">数据链路转义</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>17</td>  <td class=xl65 style='border-top:none;border-left:none'>00010001</td>  <td class=xl65 style='border-top:none;border-left:none'>021</td>  <td class=xl65 style='border-top:none;border-left:none'>11</td>  <td class=xl65 style='border-top:none;border-left:none'>DC1</td>  <td class=xl66 style='border-top:none;border-left:none'>Device Control 1 (<font  class="font9">设备控制</font><font class="font10">1)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>18</td>  <td class=xl65 style='border-top:none;border-left:none'>00010010</td>  <td class=xl65 style='border-top:none;border-left:none'>022</td>  <td class=xl65 style='border-top:none;border-left:none'>12</td>  <td class=xl65 style='border-top:none;border-left:none'>DC2</td>  <td class=xl66 style='border-top:none;border-left:none'>Device Control 2 (<font  class="font9">设备控制</font><font class="font10">2)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>19</td>  <td class=xl65 style='border-top:none;border-left:none'>00010011</td>  <td class=xl65 style='border-top:none;border-left:none'>023</td>  <td class=xl65 style='border-top:none;border-left:none'>13</td>  <td class=xl65 style='border-top:none;border-left:none'>DC3</td>  <td class=xl66 style='border-top:none;border-left:none'>Device Control 3 (<font  class="font9">设备控制</font><font class="font10">3)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>20</td>  <td class=xl65 style='border-top:none;border-left:none'>00010100</td>  <td class=xl65 style='border-top:none;border-left:none'>024</td>  <td class=xl65 style='border-top:none;border-left:none'>14</td>  <td class=xl65 style='border-top:none;border-left:none'>DC4</td>  <td class=xl66 style='border-top:none;border-left:none'>Device Control 4 (<font  class="font9">设备控制</font><font class="font10">4)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>21</td>  <td class=xl65 style='border-top:none;border-left:none'>00010101</td>  <td class=xl65 style='border-top:none;border-left:none'>025</td>  <td class=xl65 style='border-top:none;border-left:none'>15</td>  <td class=xl65 style='border-top:none;border-left:none'>NAK</td>  <td class=xl66 style='border-top:none;border-left:none'>Negative  Acknowledgement (<font class="font9">拒绝接收</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>22</td>  <td class=xl65 style='border-top:none;border-left:none'>00010110</td>  <td class=xl65 style='border-top:none;border-left:none'>026</td>  <td class=xl65 style='border-top:none;border-left:none'>16</td>  <td class=xl65 style='border-top:none;border-left:none'>SYN</td>  <td class=xl66 style='border-top:none;border-left:none'>Synchronous Idle (<font  class="font9">同步空闲</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>23</td>  <td class=xl65 style='border-top:none;border-left:none'>00010111</td>  <td class=xl65 style='border-top:none;border-left:none'>027</td>  <td class=xl65 style='border-top:none;border-left:none'>17</td>  <td class=xl65 style='border-top:none;border-left:none'>ETB</td>  <td class=xl66 style='border-top:none;border-left:none'>End of Transmit Block  (<font class="font9">传输块结束</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>24</td>  <td class=xl65 style='border-top:none;border-left:none'>00011000</td>  <td class=xl65 style='border-top:none;border-left:none'>030</td>  <td class=xl65 style='border-top:none;border-left:none'>18</td>  <td class=xl65 style='border-top:none;border-left:none'>CAN</td>  <td class=xl66 style='border-top:none;border-left:none'>Cancel (<font  class="font9">取消</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>25</td>  <td class=xl65 style='border-top:none;border-left:none'>00011001</td>  <td class=xl65 style='border-top:none;border-left:none'>031</td>  <td class=xl65 style='border-top:none;border-left:none'>19</td>  <td class=xl65 style='border-top:none;border-left:none'>EM</td>  <td class=xl66 style='border-top:none;border-left:none'>End of Medium (<font  class="font9">介质中断</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>26</td>  <td class=xl65 style='border-top:none;border-left:none'>00011010</td>  <td class=xl65 style='border-top:none;border-left:none'>032</td>  <td class=xl65 style='border-top:none;border-left:none'>1A</td>  <td class=xl65 style='border-top:none;border-left:none'>SUB</td>  <td class=xl66 style='border-top:none;border-left:none'>Substitute (<font  class="font9">替补</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>27</td>  <td class=xl65 style='border-top:none;border-left:none'>00011011</td>  <td class=xl65 style='border-top:none;border-left:none'>033</td>  <td class=xl65 style='border-top:none;border-left:none'>1B</td>  <td class=xl65 style='border-top:none;border-left:none'>ESC</td>  <td class=xl66 style='border-top:none;border-left:none'>Escape (<font  class="font9">溢出</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>28</td>  <td class=xl65 style='border-top:none;border-left:none'>00011100</td>  <td class=xl65 style='border-top:none;border-left:none'>034</td>  <td class=xl65 style='border-top:none;border-left:none'>1C</td>  <td class=xl65 style='border-top:none;border-left:none'>FS</td>  <td class=xl66 style='border-top:none;border-left:none'>File Separator (<font  class="font9">文件分割符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>29</td>  <td class=xl65 style='border-top:none;border-left:none'>00011101</td>  <td class=xl65 style='border-top:none;border-left:none'>035</td>  <td class=xl65 style='border-top:none;border-left:none'>1D</td>  <td class=xl65 style='border-top:none;border-left:none'>GS</td>  <td class=xl66 style='border-top:none;border-left:none'>Group Separator (<font  class="font9">分组符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>30</td>  <td class=xl65 style='border-top:none;border-left:none'>00011110</td>  <td class=xl65 style='border-top:none;border-left:none'>036</td>  <td class=xl65 style='border-top:none;border-left:none'>1E</td>  <td class=xl65 style='border-top:none;border-left:none'>RS</td>  <td class=xl66 style='border-top:none;border-left:none'>Record Separator (<font  class="font9">记录分离符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>31</td>  <td class=xl65 style='border-top:none;border-left:none'>00011111</td>  <td class=xl65 style='border-top:none;border-left:none'>037</td>  <td class=xl65 style='border-top:none;border-left:none'>1F</td>  <td class=xl65 style='border-top:none;border-left:none'>US</td>  <td class=xl66 style='border-top:none;border-left:none'>Unit Separator (<font  class="font9">单元分隔符</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>32</td>  <td class=xl65 style='border-top:none;border-left:none'>00100000</td>  <td class=xl65 style='border-top:none;border-left:none'>040</td>  <td class=xl65 style='border-top:none;border-left:none'>20</td>  <td class=xl65 style='border-top:none;border-left:none'><span  style='mso-spacerun:yes'>&nbsp;</span></td>  <td class=xl66 style='border-top:none;border-left:none'>Space (<font  class="font9">空格</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>33</td>  <td class=xl65 style='border-top:none;border-left:none'>00100001</td>  <td class=xl65 style='border-top:none;border-left:none'>041</td>  <td class=xl65 style='border-top:none;border-left:none'>21</td>  <td class=xl65 style='border-top:none;border-left:none'>!</td>  <td class=xl66 style='border-top:none;border-left:none'>Exclamation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>34</td>  <td class=xl65 style='border-top:none;border-left:none'>00100010</td>  <td class=xl65 style='border-top:none;border-left:none'>042</td>  <td class=xl65 style='border-top:none;border-left:none'>22</td>  <td class=xl65 style='border-top:none;border-left:none'>&quot;</td>  <td class=xl66 style='border-top:none;border-left:none'>Double quotes</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>35</td>  <td class=xl65 style='border-top:none;border-left:none'>00100011</td>  <td class=xl65 style='border-top:none;border-left:none'>043</td>  <td class=xl65 style='border-top:none;border-left:none'>23</td>  <td class=xl65 style='border-top:none;border-left:none'>#</td>  <td class=xl66 style='border-top:none;border-left:none'>Number</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>36</td>  <td class=xl65 style='border-top:none;border-left:none'>00100100</td>  <td class=xl65 style='border-top:none;border-left:none'>044</td>  <td class=xl65 style='border-top:none;border-left:none'>24</td>  <td class=xl65 style='border-top:none;border-left:none'>$</td>  <td class=xl66 style='border-top:none;border-left:none'>Dollar</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>37</td>  <td class=xl65 style='border-top:none;border-left:none'>00100101</td>  <td class=xl65 style='border-top:none;border-left:none'>045</td>  <td class=xl65 style='border-top:none;border-left:none'>25</td>  <td class=xl65 style='border-top:none;border-left:none'>%</td>  <td class=xl66 style='border-top:none;border-left:none'>Procenttecken</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>38</td>  <td class=xl65 style='border-top:none;border-left:none'>00100110</td>  <td class=xl65 style='border-top:none;border-left:none'>046</td>  <td class=xl65 style='border-top:none;border-left:none'>26</td>  <td class=xl65 style='border-top:none;border-left:none'>&amp;</td>  <td class=xl66 style='border-top:none;border-left:none'>Ampersand</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>39</td>  <td class=xl65 style='border-top:none;border-left:none'>00100111</td>  <td class=xl65 style='border-top:none;border-left:none'>047</td>  <td class=xl65 style='border-top:none;border-left:none'>27</td>  <td class=xl65 style='border-top:none;border-left:none'>'</td>  <td class=xl66 style='border-top:none;border-left:none'>Single quote</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>40</td>  <td class=xl65 style='border-top:none;border-left:none'>00101000</td>  <td class=xl65 style='border-top:none;border-left:none'>050</td>  <td class=xl65 style='border-top:none;border-left:none'>28</td>  <td class=xl65 style='border-top:none;border-left:none'>(</td>  <td class=xl66 style='border-top:none;border-left:none'>Open parenthesis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>41</td>  <td class=xl65 style='border-top:none;border-left:none'>00101001</td>  <td class=xl65 style='border-top:none;border-left:none'>051</td>  <td class=xl65 style='border-top:none;border-left:none'>29</td>  <td class=xl65 style='border-top:none;border-left:none'>)</td>  <td class=xl66 style='border-top:none;border-left:none'>Close parenthesis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>42</td>  <td class=xl65 style='border-top:none;border-left:none'>00101010</td>  <td class=xl65 style='border-top:none;border-left:none'>052</td>  <td class=xl65 style='border-top:none;border-left:none'>2A</td>  <td class=xl65 style='border-top:none;border-left:none'>*</td>  <td class=xl66 style='border-top:none;border-left:none'>Asterisk</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>43</td>  <td class=xl65 style='border-top:none;border-left:none'>00101011</td>  <td class=xl65 style='border-top:none;border-left:none'>053</td>  <td class=xl65 style='border-top:none;border-left:none'>2B</td>  <td class=xl65 style='border-top:none;border-left:none'>+</td>  <td class=xl66 style='border-top:none;border-left:none'>Plus</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>44</td>  <td class=xl65 style='border-top:none;border-left:none'>00101100</td>  <td class=xl65 style='border-top:none;border-left:none'>054</td>  <td class=xl65 style='border-top:none;border-left:none'>2C</td>  <td class=xl65 style='border-top:none;border-left:none'>,</td>  <td class=xl66 style='border-top:none;border-left:none'>Comma</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>45</td>  <td class=xl65 style='border-top:none;border-left:none'>00101101</td>  <td class=xl65 style='border-top:none;border-left:none'>055</td>  <td class=xl65 style='border-top:none;border-left:none'>2D</td>  <td class=xl65 style='border-top:none;border-left:none'>-</td>  <td class=xl66 style='border-top:none;border-left:none'>Hyphen</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>46</td>  <td class=xl65 style='border-top:none;border-left:none'>00101110</td>  <td class=xl65 style='border-top:none;border-left:none'>056</td>  <td class=xl65 style='border-top:none;border-left:none'>2E</td>  <td class=xl65 style='border-top:none;border-left:none'>.</td>  <td class=xl66 style='border-top:none;border-left:none'>Period, dot or full  stop</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>47</td>  <td class=xl65 style='border-top:none;border-left:none'>00101111</td>  <td class=xl65 style='border-top:none;border-left:none'>057</td>  <td class=xl65 style='border-top:none;border-left:none'>2F</td>  <td class=xl65 style='border-top:none;border-left:none'>/</td>  <td class=xl66 style='border-top:none;border-left:none'>Slash or divide</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>48</td>  <td class=xl65 style='border-top:none;border-left:none'>00110000</td>  <td class=xl65 style='border-top:none;border-left:none'>060</td>  <td class=xl65 style='border-top:none;border-left:none'>30</td>  <td class=xl65 style='border-top:none;border-left:none'>0</td>  <td class=xl66 style='border-top:none;border-left:none'>Zero</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>49</td>  <td class=xl65 style='border-top:none;border-left:none'>00110001</td>  <td class=xl65 style='border-top:none;border-left:none'>061</td>  <td class=xl65 style='border-top:none;border-left:none'>31</td>  <td class=xl65 style='border-top:none;border-left:none'>1</td>  <td class=xl66 style='border-top:none;border-left:none'>One</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>50</td>  <td class=xl65 style='border-top:none;border-left:none'>00110010</td>  <td class=xl65 style='border-top:none;border-left:none'>062</td>  <td class=xl65 style='border-top:none;border-left:none'>32</td>  <td class=xl65 style='border-top:none;border-left:none'>2</td>  <td class=xl66 style='border-top:none;border-left:none'>Two</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>51</td>  <td class=xl65 style='border-top:none;border-left:none'>00110011</td>  <td class=xl65 style='border-top:none;border-left:none'>063</td>  <td class=xl65 style='border-top:none;border-left:none'>33</td>  <td class=xl65 style='border-top:none;border-left:none'>3</td>  <td class=xl66 style='border-top:none;border-left:none'>Three</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>52</td>  <td class=xl65 style='border-top:none;border-left:none'>00110100</td>  <td class=xl65 style='border-top:none;border-left:none'>064</td>  <td class=xl65 style='border-top:none;border-left:none'>34</td>  <td class=xl65 style='border-top:none;border-left:none'>4</td>  <td class=xl66 style='border-top:none;border-left:none'>Four</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>53</td>  <td class=xl65 style='border-top:none;border-left:none'>00110101</td>  <td class=xl65 style='border-top:none;border-left:none'>065</td>  <td class=xl65 style='border-top:none;border-left:none'>35</td>  <td class=xl65 style='border-top:none;border-left:none'>5</td>  <td class=xl66 style='border-top:none;border-left:none'>Five</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>54</td>  <td class=xl65 style='border-top:none;border-left:none'>00110110</td>  <td class=xl65 style='border-top:none;border-left:none'>066</td>  <td class=xl65 style='border-top:none;border-left:none'>36</td>  <td class=xl65 style='border-top:none;border-left:none'>6</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>55</td>  <td class=xl65 style='border-top:none;border-left:none'>00110111</td>  <td class=xl65 style='border-top:none;border-left:none'>067</td>  <td class=xl65 style='border-top:none;border-left:none'>37</td>  <td class=xl65 style='border-top:none;border-left:none'>7</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>56</td>  <td class=xl65 style='border-top:none;border-left:none'>00111000</td>  <td class=xl65 style='border-top:none;border-left:none'>070</td>  <td class=xl65 style='border-top:none;border-left:none'>38</td>  <td class=xl65 style='border-top:none;border-left:none'>8</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>57</td>  <td class=xl65 style='border-top:none;border-left:none'>00111001</td>  <td class=xl65 style='border-top:none;border-left:none'>071</td>  <td class=xl65 style='border-top:none;border-left:none'>39</td>  <td class=xl65 style='border-top:none;border-left:none'>9</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>58</td>  <td class=xl65 style='border-top:none;border-left:none'>00111010</td>  <td class=xl65 style='border-top:none;border-left:none'>072</td>  <td class=xl65 style='border-top:none;border-left:none'>3A</td>  <td class=xl65 style='border-top:none;border-left:none'>:</td>  <td class=xl66 style='border-top:none;border-left:none'>Colon</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>59</td>  <td class=xl65 style='border-top:none;border-left:none'>00111011</td>  <td class=xl65 style='border-top:none;border-left:none'>073</td>  <td class=xl65 style='border-top:none;border-left:none'>3B</td>  <td class=xl65 style='border-top:none;border-left:none'>;</td>  <td class=xl66 style='border-top:none;border-left:none'>Semicolon</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>60</td>  <td class=xl65 style='border-top:none;border-left:none'>00111100</td>  <td class=xl65 style='border-top:none;border-left:none'>074</td>  <td class=xl65 style='border-top:none;border-left:none'>3C</td>  <td class=xl65 style='border-top:none;border-left:none'>&lt;</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>61</td>  <td class=xl65 style='border-top:none;border-left:none'>00111101</td>  <td class=xl65 style='border-top:none;border-left:none'>075</td>  <td class=xl65 style='border-top:none;border-left:none'>3D</td>  <td class=xl65 style='border-top:none;border-left:none'>=</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>62</td>  <td class=xl65 style='border-top:none;border-left:none'>00111110</td>  <td class=xl65 style='border-top:none;border-left:none'>076</td>  <td class=xl65 style='border-top:none;border-left:none'>3E</td>  <td class=xl65 style='border-top:none;border-left:none'>&gt;</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>63</td>  <td class=xl65 style='border-top:none;border-left:none'>00111111</td>  <td class=xl65 style='border-top:none;border-left:none'>077</td>  <td class=xl65 style='border-top:none;border-left:none'>3F</td>  <td class=xl65 style='border-top:none;border-left:none'>?</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>64</td>  <td class=xl65 style='border-top:none;border-left:none'>01000000</td>  <td class=xl65 style='border-top:none;border-left:none'>100</td>  <td class=xl65 style='border-top:none;border-left:none'>40</td>  <td class=xl65 style='border-top:none;border-left:none'>@</td>  <td class=xl66 style='border-top:none;border-left:none'>At symbol</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>65</td>  <td class=xl65 style='border-top:none;border-left:none'>01000001</td>  <td class=xl65 style='border-top:none;border-left:none'>101</td>  <td class=xl65 style='border-top:none;border-left:none'>41</td>  <td class=xl65 style='border-top:none;border-left:none'>A</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>66</td>  <td class=xl65 style='border-top:none;border-left:none'>01000010</td>  <td class=xl65 style='border-top:none;border-left:none'>102</td>  <td class=xl65 style='border-top:none;border-left:none'>42</td>  <td class=xl65 style='border-top:none;border-left:none'>B</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>67</td>  <td class=xl65 style='border-top:none;border-left:none'>01000011</td>  <td class=xl65 style='border-top:none;border-left:none'>103</td>  <td class=xl65 style='border-top:none;border-left:none'>43</td>  <td class=xl65 style='border-top:none;border-left:none'>C</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>68</td>  <td class=xl65 style='border-top:none;border-left:none'>01000100</td>  <td class=xl65 style='border-top:none;border-left:none'>104</td>  <td class=xl65 style='border-top:none;border-left:none'>44</td>  <td class=xl65 style='border-top:none;border-left:none'>D</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>69</td>  <td class=xl65 style='border-top:none;border-left:none'>01000101</td>  <td class=xl65 style='border-top:none;border-left:none'>105</td>  <td class=xl65 style='border-top:none;border-left:none'>45</td>  <td class=xl65 style='border-top:none;border-left:none'>E</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>70</td>  <td class=xl65 style='border-top:none;border-left:none'>01000110</td>  <td class=xl65 style='border-top:none;border-left:none'>106</td>  <td class=xl65 style='border-top:none;border-left:none'>46</td>  <td class=xl65 style='border-top:none;border-left:none'>F</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>71</td>  <td class=xl65 style='border-top:none;border-left:none'>01000111</td>  <td class=xl65 style='border-top:none;border-left:none'>107</td>  <td class=xl65 style='border-top:none;border-left:none'>47</td>  <td class=xl65 style='border-top:none;border-left:none'>G</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>72</td>  <td class=xl65 style='border-top:none;border-left:none'>01001000</td>  <td class=xl65 style='border-top:none;border-left:none'>110</td>  <td class=xl65 style='border-top:none;border-left:none'>48</td>  <td class=xl65 style='border-top:none;border-left:none'>H</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>73</td>  <td class=xl65 style='border-top:none;border-left:none'>01001001</td>  <td class=xl65 style='border-top:none;border-left:none'>111</td>  <td class=xl65 style='border-top:none;border-left:none'>49</td>  <td class=xl65 style='border-top:none;border-left:none'>I</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>74</td>  <td class=xl65 style='border-top:none;border-left:none'>01001010</td>  <td class=xl65 style='border-top:none;border-left:none'>112</td>  <td class=xl65 style='border-top:none;border-left:none'>4A</td>  <td class=xl65 style='border-top:none;border-left:none'>J</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>75</td>  <td class=xl65 style='border-top:none;border-left:none'>01001011</td>  <td class=xl65 style='border-top:none;border-left:none'>113</td>  <td class=xl65 style='border-top:none;border-left:none'>4B</td>  <td class=xl65 style='border-top:none;border-left:none'>K</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>76</td>  <td class=xl65 style='border-top:none;border-left:none'>01001100</td>  <td class=xl65 style='border-top:none;border-left:none'>114</td>  <td class=xl65 style='border-top:none;border-left:none'>4C</td>  <td class=xl65 style='border-top:none;border-left:none'>L</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>77</td>  <td class=xl65 style='border-top:none;border-left:none'>01001101</td>  <td class=xl65 style='border-top:none;border-left:none'>115</td>  <td class=xl65 style='border-top:none;border-left:none'>4D</td>  <td class=xl65 style='border-top:none;border-left:none'>M</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>78</td>  <td class=xl65 style='border-top:none;border-left:none'>01001110</td>  <td class=xl65 style='border-top:none;border-left:none'>116</td>  <td class=xl65 style='border-top:none;border-left:none'>4E</td>  <td class=xl65 style='border-top:none;border-left:none'>N</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>79</td>  <td class=xl65 style='border-top:none;border-left:none'>01001111</td>  <td class=xl65 style='border-top:none;border-left:none'>117</td>  <td class=xl65 style='border-top:none;border-left:none'>4F</td>  <td class=xl65 style='border-top:none;border-left:none'>O</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>80</td>  <td class=xl65 style='border-top:none;border-left:none'>01010000</td>  <td class=xl65 style='border-top:none;border-left:none'>120</td>  <td class=xl65 style='border-top:none;border-left:none'>50</td>  <td class=xl65 style='border-top:none;border-left:none'>P</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>81</td>  <td class=xl65 style='border-top:none;border-left:none'>01010001</td>  <td class=xl65 style='border-top:none;border-left:none'>121</td>  <td class=xl65 style='border-top:none;border-left:none'>51</td>  <td class=xl65 style='border-top:none;border-left:none'>Q</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>82</td>  <td class=xl65 style='border-top:none;border-left:none'>01010010</td>  <td class=xl65 style='border-top:none;border-left:none'>122</td>  <td class=xl65 style='border-top:none;border-left:none'>52</td>  <td class=xl65 style='border-top:none;border-left:none'>R</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>83</td>  <td class=xl65 style='border-top:none;border-left:none'>01010011</td>  <td class=xl65 style='border-top:none;border-left:none'>123</td>  <td class=xl65 style='border-top:none;border-left:none'>53</td>  <td class=xl65 style='border-top:none;border-left:none'>S</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>84</td>  <td class=xl65 style='border-top:none;border-left:none'>01010100</td>  <td class=xl65 style='border-top:none;border-left:none'>124</td>  <td class=xl65 style='border-top:none;border-left:none'>54</td>  <td class=xl65 style='border-top:none;border-left:none'>T</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>85</td>  <td class=xl65 style='border-top:none;border-left:none'>01010101</td>  <td class=xl65 style='border-top:none;border-left:none'>125</td>  <td class=xl65 style='border-top:none;border-left:none'>55</td>  <td class=xl65 style='border-top:none;border-left:none'>U</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>86</td>  <td class=xl65 style='border-top:none;border-left:none'>01010110</td>  <td class=xl65 style='border-top:none;border-left:none'>126</td>  <td class=xl65 style='border-top:none;border-left:none'>56</td>  <td class=xl65 style='border-top:none;border-left:none'>V</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>87</td>  <td class=xl65 style='border-top:none;border-left:none'>01010111</td>  <td class=xl65 style='border-top:none;border-left:none'>127</td>  <td class=xl65 style='border-top:none;border-left:none'>57</td>  <td class=xl65 style='border-top:none;border-left:none'>W</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>88</td>  <td class=xl65 style='border-top:none;border-left:none'>01011000</td>  <td class=xl65 style='border-top:none;border-left:none'>130</td>  <td class=xl65 style='border-top:none;border-left:none'>58</td>  <td class=xl65 style='border-top:none;border-left:none'>X</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>89</td>  <td class=xl65 style='border-top:none;border-left:none'>01011001</td>  <td class=xl65 style='border-top:none;border-left:none'>131</td>  <td class=xl65 style='border-top:none;border-left:none'>59</td>  <td class=xl65 style='border-top:none;border-left:none'>Y</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>90</td>  <td class=xl65 style='border-top:none;border-left:none'>01011010</td>  <td class=xl65 style='border-top:none;border-left:none'>132</td>  <td class=xl65 style='border-top:none;border-left:none'>5A</td>  <td class=xl65 style='border-top:none;border-left:none'>Z</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>91</td>  <td class=xl65 style='border-top:none;border-left:none'>01011011</td>  <td class=xl65 style='border-top:none;border-left:none'>133</td>  <td class=xl65 style='border-top:none;border-left:none'>5B</td>  <td class=xl65 style='border-top:none;border-left:none'>[</td>  <td class=xl66 style='border-top:none;border-left:none'>Opening bracket(<font  class="font9">开括号</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>92</td>  <td class=xl65 style='border-top:none;border-left:none'>01011100</td>  <td class=xl65 style='border-top:none;border-left:none'>134</td>  <td class=xl65 style='border-top:none;border-left:none'>5C</td>  <td class=xl65 style='border-top:none;border-left:none'>\</td>  <td class=xl66 style='border-top:none;border-left:none'>Backslash</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>93</td>  <td class=xl65 style='border-top:none;border-left:none'>01011101</td>  <td class=xl65 style='border-top:none;border-left:none'>135</td>  <td class=xl65 style='border-top:none;border-left:none'>5D</td>  <td class=xl65 style='border-top:none;border-left:none'>]</td>  <td class=xl66 style='border-top:none;border-left:none'>Closing bracket</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>94</td>  <td class=xl65 style='border-top:none;border-left:none'>01011110</td>  <td class=xl65 style='border-top:none;border-left:none'>136</td>  <td class=xl65 style='border-top:none;border-left:none'>5E</td>  <td class=xl65 style='border-top:none;border-left:none'>^</td>  <td class=xl66 style='border-top:none;border-left:none'>Caret - circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>95</td>  <td class=xl65 style='border-top:none;border-left:none'>01011111</td>  <td class=xl65 style='border-top:none;border-left:none'>137</td>  <td class=xl65 style='border-top:none;border-left:none'>5F</td>  <td class=xl65 style='border-top:none;border-left:none'>_</td>  <td class=xl66 style='border-top:none;border-left:none'>Underscore(<font  class="font9">强调</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>96</td>  <td class=xl65 style='border-top:none;border-left:none'>01100000</td>  <td class=xl65 style='border-top:none;border-left:none'>140</td>  <td class=xl65 style='border-top:none;border-left:none'>60</td>  <td class=xl65 style='border-top:none;border-left:none'>`</td>  <td class=xl66 style='border-top:none;border-left:none'>Grave accent(<font  class="font9">重音符号</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>97</td>  <td class=xl65 style='border-top:none;border-left:none'>01100001</td>  <td class=xl65 style='border-top:none;border-left:none'>141</td>  <td class=xl65 style='border-top:none;border-left:none'>61</td>  <td class=xl65 style='border-top:none;border-left:none'>a</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>98</td>  <td class=xl65 style='border-top:none;border-left:none'>01100010</td>  <td class=xl65 style='border-top:none;border-left:none'>142</td>  <td class=xl65 style='border-top:none;border-left:none'>62</td>  <td class=xl65 style='border-top:none;border-left:none'>b</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>99</td>  <td class=xl65 style='border-top:none;border-left:none'>01100011</td>  <td class=xl65 style='border-top:none;border-left:none'>143</td>  <td class=xl65 style='border-top:none;border-left:none'>63</td>  <td class=xl65 style='border-top:none;border-left:none'>c</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>100</td>  <td class=xl65 style='border-top:none;border-left:none'>01100100</td>  <td class=xl65 style='border-top:none;border-left:none'>144</td>  <td class=xl65 style='border-top:none;border-left:none'>64</td>  <td class=xl65 style='border-top:none;border-left:none'>d</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>101</td>  <td class=xl65 style='border-top:none;border-left:none'>01100101</td>  <td class=xl65 style='border-top:none;border-left:none'>145</td>  <td class=xl65 style='border-top:none;border-left:none'>65</td>  <td class=xl65 style='border-top:none;border-left:none'>e</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>102</td>  <td class=xl65 style='border-top:none;border-left:none'>01100110</td>  <td class=xl65 style='border-top:none;border-left:none'>146</td>  <td class=xl65 style='border-top:none;border-left:none'>66</td>  <td class=xl65 style='border-top:none;border-left:none'>f</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>103</td>  <td class=xl65 style='border-top:none;border-left:none'>01100111</td>  <td class=xl65 style='border-top:none;border-left:none'>147</td>  <td class=xl65 style='border-top:none;border-left:none'>67</td>  <td class=xl65 style='border-top:none;border-left:none'>g</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>104</td>  <td class=xl65 style='border-top:none;border-left:none'>01101000</td>  <td class=xl65 style='border-top:none;border-left:none'>150</td>  <td class=xl65 style='border-top:none;border-left:none'>68</td>  <td class=xl65 style='border-top:none;border-left:none'>h</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>105</td>  <td class=xl65 style='border-top:none;border-left:none'>01101001</td>  <td class=xl65 style='border-top:none;border-left:none'>151</td>  <td class=xl65 style='border-top:none;border-left:none'>69</td>  <td class=xl65 style='border-top:none;border-left:none'>i</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>106</td>  <td class=xl65 style='border-top:none;border-left:none'>01101010</td>  <td class=xl65 style='border-top:none;border-left:none'>152</td>  <td class=xl65 style='border-top:none;border-left:none'>6A</td>  <td class=xl65 style='border-top:none;border-left:none'>j</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>107</td>  <td class=xl65 style='border-top:none;border-left:none'>01101011</td>  <td class=xl65 style='border-top:none;border-left:none'>153</td>  <td class=xl65 style='border-top:none;border-left:none'>6B</td>  <td class=xl65 style='border-top:none;border-left:none'>k</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>108</td>  <td class=xl65 style='border-top:none;border-left:none'>01101100</td>  <td class=xl65 style='border-top:none;border-left:none'>154</td>  <td class=xl65 style='border-top:none;border-left:none'>6C</td>  <td class=xl65 style='border-top:none;border-left:none'>i</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>109</td>  <td class=xl65 style='border-top:none;border-left:none'>01101101</td>  <td class=xl65 style='border-top:none;border-left:none'>155</td>  <td class=xl65 style='border-top:none;border-left:none'>6D</td>  <td class=xl65 style='border-top:none;border-left:none'>m</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>110</td>  <td class=xl65 style='border-top:none;border-left:none'>01101110</td>  <td class=xl65 style='border-top:none;border-left:none'>156</td>  <td class=xl65 style='border-top:none;border-left:none'>6E</td>  <td class=xl65 style='border-top:none;border-left:none'>n</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>111</td>  <td class=xl65 style='border-top:none;border-left:none'>01101111</td>  <td class=xl65 style='border-top:none;border-left:none'>157</td>  <td class=xl65 style='border-top:none;border-left:none'>6F</td>  <td class=xl65 style='border-top:none;border-left:none'>o</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>112</td>  <td class=xl65 style='border-top:none;border-left:none'>01110000</td>  <td class=xl65 style='border-top:none;border-left:none'>160</td>  <td class=xl65 style='border-top:none;border-left:none'>70</td>  <td class=xl65 style='border-top:none;border-left:none'>p</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>113</td>  <td class=xl65 style='border-top:none;border-left:none'>01110001</td>  <td class=xl65 style='border-top:none;border-left:none'>161</td>  <td class=xl65 style='border-top:none;border-left:none'>71</td>  <td class=xl65 style='border-top:none;border-left:none'>q</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>114</td>  <td class=xl65 style='border-top:none;border-left:none'>01110010</td>  <td class=xl65 style='border-top:none;border-left:none'>162</td>  <td class=xl65 style='border-top:none;border-left:none'>72</td>  <td class=xl65 style='border-top:none;border-left:none'>r</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>115</td>  <td class=xl65 style='border-top:none;border-left:none'>01110011</td>  <td class=xl65 style='border-top:none;border-left:none'>163</td>  <td class=xl65 style='border-top:none;border-left:none'>73</td>  <td class=xl65 style='border-top:none;border-left:none'>s</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>116</td>  <td class=xl65 style='border-top:none;border-left:none'>01110100</td>  <td class=xl65 style='border-top:none;border-left:none'>164</td>  <td class=xl65 style='border-top:none;border-left:none'>74</td>  <td class=xl65 style='border-top:none;border-left:none'>t</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>117</td>  <td class=xl65 style='border-top:none;border-left:none'>01110101</td>  <td class=xl65 style='border-top:none;border-left:none'>165</td>  <td class=xl65 style='border-top:none;border-left:none'>75</td>  <td class=xl65 style='border-top:none;border-left:none'>u</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>118</td>  <td class=xl65 style='border-top:none;border-left:none'>01110110</td>  <td class=xl65 style='border-top:none;border-left:none'>166</td>  <td class=xl65 style='border-top:none;border-left:none'>76</td>  <td class=xl65 style='border-top:none;border-left:none'>v</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>119</td>  <td class=xl65 style='border-top:none;border-left:none'>01110111</td>  <td class=xl65 style='border-top:none;border-left:none'>167</td>  <td class=xl65 style='border-top:none;border-left:none'>77</td>  <td class=xl65 style='border-top:none;border-left:none'>w</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>120</td>  <td class=xl65 style='border-top:none;border-left:none'>01111000</td>  <td class=xl65 style='border-top:none;border-left:none'>170</td>  <td class=xl65 style='border-top:none;border-left:none'>78</td>  <td class=xl65 style='border-top:none;border-left:none'>x</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>121</td>  <td class=xl65 style='border-top:none;border-left:none'>01111001</td>  <td class=xl65 style='border-top:none;border-left:none'>171</td>  <td class=xl65 style='border-top:none;border-left:none'>79</td>  <td class=xl65 style='border-top:none;border-left:none'>y</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>122</td>  <td class=xl65 style='border-top:none;border-left:none'>01111010</td>  <td class=xl65 style='border-top:none;border-left:none'>172</td>  <td class=xl65 style='border-top:none;border-left:none'>7A</td>  <td class=xl65 style='border-top:none;border-left:none'>z</td>  <td class=xl66 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>123</td>  <td class=xl65 style='border-top:none;border-left:none'>01111011</td>  <td class=xl65 style='border-top:none;border-left:none'>173</td>  <td class=xl65 style='border-top:none;border-left:none'>7B</td>  <td class=xl65 style='border-top:none;border-left:none'>{</td>  <td class=xl66 style='border-top:none;border-left:none'>Opening brace</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>124</td>  <td class=xl65 style='border-top:none;border-left:none'>01111100</td>  <td class=xl65 style='border-top:none;border-left:none'>174</td>  <td class=xl65 style='border-top:none;border-left:none'>7C</td>  <td class=xl65 style='border-top:none;border-left:none'>|</td>  <td class=xl66 style='border-top:none;border-left:none'>Vertical bar</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>125</td>  <td class=xl65 style='border-top:none;border-left:none'>01111101</td>  <td class=xl65 style='border-top:none;border-left:none'>175</td>  <td class=xl65 style='border-top:none;border-left:none'>7D</td>  <td class=xl65 style='border-top:none;border-left:none'>}</td>  <td class=xl66 style='border-top:none;border-left:none'>Closing brace</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>126</td>  <td class=xl65 style='border-top:none;border-left:none'>01111110</td>  <td class=xl65 style='border-top:none;border-left:none'>176</td>  <td class=xl65 style='border-top:none;border-left:none'>7E</td>  <td class=xl65 style='border-top:none;border-left:none'>~</td>  <td class=xl66 style='border-top:none;border-left:none'>Equivalency sign  (tilde)</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>127</td>  <td class=xl65 style='border-top:none;border-left:none'>01111111</td>  <td class=xl65 style='border-top:none;border-left:none'>177</td>  <td class=xl65 style='border-top:none;border-left:none'>7F</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl66 style='border-top:none;border-left:none'>Delete</td> </tr> <tr height=42 style='height:31.5pt'>  <td colspan=6 height=42 class=xl72 style='height:31.5pt'><font class="font6">扩展</font><font  class="font7">ASCII</font><font class="font6">打印字符对照表</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>128</td>  <td class=xl65 style='border-top:none;border-left:none'>10000000</td>  <td class=xl65 style='border-top:none;border-left:none'>200</td>  <td class=xl65 style='border-top:none;border-left:none'>80</td>  <td class=xl65 style='border-top:none;border-left:none'>€</td>  <td class=xl68 style='border-top:none;border-left:none'>Euro sign(<font  class="font9">欧元标志</font><font class="font10">)</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>129</td>  <td class=xl65 style='border-top:none;border-left:none'>10000001</td>  <td class=xl65 style='border-top:none;border-left:none'>201</td>  <td class=xl65 style='border-top:none;border-left:none'>81</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>130</td>  <td class=xl65 style='border-top:none;border-left:none'>10000010</td>  <td class=xl65 style='border-top:none;border-left:none'>202</td>  <td class=xl65 style='border-top:none;border-left:none'>82</td>  <td class=xl65 style='border-top:none;border-left:none'>&#8218;</td>  <td class=xl68 style='border-top:none;border-left:none'>Single low-9  quotation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>131</td>  <td class=xl65 style='border-top:none;border-left:none'>10000011</td>  <td class=xl65 style='border-top:none;border-left:none'>203</td>  <td class=xl65 style='border-top:none;border-left:none'>83</td>  <td class=xl65 style='border-top:none;border-left:none'>&#402;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter f  with hook</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>132</td>  <td class=xl65 style='border-top:none;border-left:none'>10000100</td>  <td class=xl65 style='border-top:none;border-left:none'>204</td>  <td class=xl65 style='border-top:none;border-left:none'>84</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8222;</td>  <td class=xl68 style='border-top:none;border-left:none'>Double low-9  quotation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>133</td>  <td class=xl65 style='border-top:none;border-left:none'>10000101</td>  <td class=xl65 style='border-top:none;border-left:none'>205</td>  <td class=xl65 style='border-top:none;border-left:none'>85</td>  <td class=xl69 style='border-top:none;border-left:none'>…</td>  <td class=xl68 style='border-top:none;border-left:none'>Horizontal ellipsis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>134</td>  <td class=xl65 style='border-top:none;border-left:none'>10000110</td>  <td class=xl65 style='border-top:none;border-left:none'>206</td>  <td class=xl65 style='border-top:none;border-left:none'>86</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8224;</td>  <td class=xl68 style='border-top:none;border-left:none'>Dagger</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>135</td>  <td class=xl65 style='border-top:none;border-left:none'>10000111</td>  <td class=xl65 style='border-top:none;border-left:none'>207</td>  <td class=xl65 style='border-top:none;border-left:none'>87</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8225;</td>  <td class=xl68 style='border-top:none;border-left:none'>Double dagger</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>136</td>  <td class=xl65 style='border-top:none;border-left:none'>10001000</td>  <td class=xl65 style='border-top:none;border-left:none'>210</td>  <td class=xl65 style='border-top:none;border-left:none'>88</td>  <td class=xl69 style='border-top:none;border-left:none'>&#710;</td>  <td class=xl68 style='border-top:none;border-left:none'>Modifier letter  circumflex accent</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>137</td>  <td class=xl65 style='border-top:none;border-left:none'>10001001</td>  <td class=xl65 style='border-top:none;border-left:none'>211</td>  <td class=xl65 style='border-top:none;border-left:none'>89</td>  <td class=xl69 style='border-top:none;border-left:none'>‰</td>  <td class=xl68 style='border-top:none;border-left:none'>Per mille sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>138</td>  <td class=xl65 style='border-top:none;border-left:none'>10001010</td>  <td class=xl65 style='border-top:none;border-left:none'>212</td>  <td class=xl65 style='border-top:none;border-left:none'>8A</td>  <td class=xl69 style='border-top:none;border-left:none'>&#352;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  S with caron</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>139</td>  <td class=xl65 style='border-top:none;border-left:none'>10001011</td>  <td class=xl65 style='border-top:none;border-left:none'>213</td>  <td class=xl65 style='border-top:none;border-left:none'>8B</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8249;</td>  <td class=xl68 style='border-top:none;border-left:none'>Single left-pointing  angle quotation</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>140</td>  <td class=xl65 style='border-top:none;border-left:none'>10001100</td>  <td class=xl65 style='border-top:none;border-left:none'>214</td>  <td class=xl65 style='border-top:none;border-left:none'>8C</td>  <td class=xl69 style='border-top:none;border-left:none'>&#338;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital  ligature OE</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>141</td>  <td class=xl65 style='border-top:none;border-left:none'>10001101</td>  <td class=xl65 style='border-top:none;border-left:none'>215</td>  <td class=xl65 style='border-top:none;border-left:none'>8D</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>142</td>  <td class=xl65 style='border-top:none;border-left:none'>10001110</td>  <td class=xl65 style='border-top:none;border-left:none'>216</td>  <td class=xl65 style='border-top:none;border-left:none'>8E</td>  <td class=xl69 style='border-top:none;border-left:none'>&#381;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  Z with caron</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>143</td>  <td class=xl65 style='border-top:none;border-left:none'>10001111</td>  <td class=xl65 style='border-top:none;border-left:none'>217</td>  <td class=xl65 style='border-top:none;border-left:none'>8F</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>144</td>  <td class=xl65 style='border-top:none;border-left:none'>10010000</td>  <td class=xl65 style='border-top:none;border-left:none'>220</td>  <td class=xl65 style='border-top:none;border-left:none'>90</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>145</td>  <td class=xl65 style='border-top:none;border-left:none'>10010001</td>  <td class=xl65 style='border-top:none;border-left:none'>221</td>  <td class=xl65 style='border-top:none;border-left:none'>91</td>  <td class=xl69 style='border-top:none;border-left:none'>‘</td>  <td class=xl68 style='border-top:none;border-left:none'>Left single quotation  mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>146</td>  <td class=xl65 style='border-top:none;border-left:none'>10010010</td>  <td class=xl65 style='border-top:none;border-left:none'>222</td>  <td class=xl65 style='border-top:none;border-left:none'>92</td>  <td class=xl69 style='border-top:none;border-left:none'>’</td>  <td class=xl68 style='border-top:none;border-left:none'>Right single  quotation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>147</td>  <td class=xl65 style='border-top:none;border-left:none'>10010011</td>  <td class=xl65 style='border-top:none;border-left:none'>223</td>  <td class=xl65 style='border-top:none;border-left:none'>93</td>  <td class=xl69 style='border-top:none;border-left:none'>“</td>  <td class=xl68 style='border-top:none;border-left:none'>Left double quotation  mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>148</td>  <td class=xl65 style='border-top:none;border-left:none'>10010100</td>  <td class=xl65 style='border-top:none;border-left:none'>224</td>  <td class=xl65 style='border-top:none;border-left:none'>94</td>  <td class=xl69 style='border-top:none;border-left:none'>”</td>  <td class=xl68 style='border-top:none;border-left:none'>Right double  quotation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>149</td>  <td class=xl65 style='border-top:none;border-left:none'>10010101</td>  <td class=xl65 style='border-top:none;border-left:none'>225</td>  <td class=xl65 style='border-top:none;border-left:none'>95</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8226;</td>  <td class=xl68 style='border-top:none;border-left:none'>Bullet</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>150</td>  <td class=xl65 style='border-top:none;border-left:none'>10010110</td>  <td class=xl65 style='border-top:none;border-left:none'>226</td>  <td class=xl65 style='border-top:none;border-left:none'>96</td>  <td class=xl69 style='border-top:none;border-left:none'>–</td>  <td class=xl68 style='border-top:none;border-left:none'>En dash</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>151</td>  <td class=xl65 style='border-top:none;border-left:none'>10010111</td>  <td class=xl65 style='border-top:none;border-left:none'>227</td>  <td class=xl65 style='border-top:none;border-left:none'>97</td>  <td class=xl69 style='border-top:none;border-left:none'>—</td>  <td class=xl68 style='border-top:none;border-left:none'>Em dash</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>152</td>  <td class=xl65 style='border-top:none;border-left:none'>10011000</td>  <td class=xl65 style='border-top:none;border-left:none'>230</td>  <td class=xl65 style='border-top:none;border-left:none'>98</td>  <td class=xl69 style='border-top:none;border-left:none'>&#732;</td>  <td class=xl68 style='border-top:none;border-left:none'>Small tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>153</td>  <td class=xl65 style='border-top:none;border-left:none'>10011001</td>  <td class=xl65 style='border-top:none;border-left:none'>231</td>  <td class=xl65 style='border-top:none;border-left:none'>99</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8482;</td>  <td class=xl68 style='border-top:none;border-left:none'>Trade mark sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>154</td>  <td class=xl65 style='border-top:none;border-left:none'>10011010</td>  <td class=xl65 style='border-top:none;border-left:none'>232</td>  <td class=xl65 style='border-top:none;border-left:none'>9A</td>  <td class=xl69 style='border-top:none;border-left:none'>&#353;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter S  with caron</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>155</td>  <td class=xl65 style='border-top:none;border-left:none'>10011011</td>  <td class=xl65 style='border-top:none;border-left:none'>233</td>  <td class=xl65 style='border-top:none;border-left:none'>9B</td>  <td class=xl69 style='border-top:none;border-left:none'>&#8250;</td>  <td class=xl68 style='border-top:none;border-left:none'>Single right-pointing  angle quotation mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>156</td>  <td class=xl65 style='border-top:none;border-left:none'>10011100</td>  <td class=xl65 style='border-top:none;border-left:none'>234</td>  <td class=xl65 style='border-top:none;border-left:none'>9C</td>  <td class=xl69 style='border-top:none;border-left:none'>&#339;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small ligature  oe</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>157</td>  <td class=xl65 style='border-top:none;border-left:none'>10011101</td>  <td class=xl65 style='border-top:none;border-left:none'>235</td>  <td class=xl65 style='border-top:none;border-left:none'>9D</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>158</td>  <td class=xl65 style='border-top:none;border-left:none'>10011110</td>  <td class=xl65 style='border-top:none;border-left:none'>236</td>  <td class=xl65 style='border-top:none;border-left:none'>9E</td>  <td class=xl69 style='border-top:none;border-left:none'>&#382;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter z  with caron</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>159</td>  <td class=xl65 style='border-top:none;border-left:none'>10011111</td>  <td class=xl65 style='border-top:none;border-left:none'>237</td>  <td class=xl65 style='border-top:none;border-left:none'>9F</td>  <td class=xl69 style='border-top:none;border-left:none'>&#376;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  Y with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>160</td>  <td class=xl65 style='border-top:none;border-left:none'>10100000</td>  <td class=xl65 style='border-top:none;border-left:none'>240</td>  <td class=xl65 style='border-top:none;border-left:none'>A0</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl68 style='border-top:none;border-left:none'>Non-breaking space</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>161</td>  <td class=xl65 style='border-top:none;border-left:none'>10100001</td>  <td class=xl65 style='border-top:none;border-left:none'>241</td>  <td class=xl65 style='border-top:none;border-left:none'>A1</td>  <td class=xl69 style='border-top:none;border-left:none'>&iexcl;</td>  <td class=xl68 style='border-top:none;border-left:none'>Inverted exclamation  mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>162</td>  <td class=xl65 style='border-top:none;border-left:none'>10100010</td>  <td class=xl65 style='border-top:none;border-left:none'>242</td>  <td class=xl65 style='border-top:none;border-left:none'>A2</td>  <td class=xl69 style='border-top:none;border-left:none'>&cent;</td>  <td class=xl68 style='border-top:none;border-left:none'>Cent sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>163</td>  <td class=xl65 style='border-top:none;border-left:none'>10100011</td>  <td class=xl65 style='border-top:none;border-left:none'>243</td>  <td class=xl65 style='border-top:none;border-left:none'>A3</td>  <td class=xl69 style='border-top:none;border-left:none'>&pound;</td>  <td class=xl68 style='border-top:none;border-left:none'>Pound sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>164</td>  <td class=xl65 style='border-top:none;border-left:none'>10100100</td>  <td class=xl65 style='border-top:none;border-left:none'>244</td>  <td class=xl65 style='border-top:none;border-left:none'>A4</td>  <td class=xl69 style='border-top:none;border-left:none'>¤</td>  <td class=xl68 style='border-top:none;border-left:none'>Currency sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>165</td>  <td class=xl65 style='border-top:none;border-left:none'>10100101</td>  <td class=xl65 style='border-top:none;border-left:none'>245</td>  <td class=xl65 style='border-top:none;border-left:none'>A5</td>  <td class=xl69 style='border-top:none;border-left:none'>&yen;</td>  <td class=xl68 style='border-top:none;border-left:none'>Yen sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>166</td>  <td class=xl65 style='border-top:none;border-left:none'>10100110</td>  <td class=xl65 style='border-top:none;border-left:none'>246</td>  <td class=xl65 style='border-top:none;border-left:none'>A6</td>  <td class=xl69 style='border-top:none;border-left:none'>&brvbar;</td>  <td class=xl68 style='border-top:none;border-left:none'>Pipe, Broken vertical  bar</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>167</td>  <td class=xl65 style='border-top:none;border-left:none'>10100111</td>  <td class=xl65 style='border-top:none;border-left:none'>247</td>  <td class=xl65 style='border-top:none;border-left:none'>A7</td>  <td class=xl69 style='border-top:none;border-left:none'>§</td>  <td class=xl68 style='border-top:none;border-left:none'>Section sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>168</td>  <td class=xl65 style='border-top:none;border-left:none'>10101000</td>  <td class=xl65 style='border-top:none;border-left:none'>250</td>  <td class=xl65 style='border-top:none;border-left:none'>A8</td>  <td class=xl69 style='border-top:none;border-left:none'>¨</td>  <td class=xl68 style='border-top:none;border-left:none'>Spacing diaeresis -  umlaut</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>169</td>  <td class=xl65 style='border-top:none;border-left:none'>10101001</td>  <td class=xl65 style='border-top:none;border-left:none'>251</td>  <td class=xl65 style='border-top:none;border-left:none'>A9</td>  <td class=xl69 style='border-top:none;border-left:none'>&copy;</td>  <td class=xl68 style='border-top:none;border-left:none'>Copyright sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>170</td>  <td class=xl65 style='border-top:none;border-left:none'>10101010</td>  <td class=xl65 style='border-top:none;border-left:none'>252</td>  <td class=xl65 style='border-top:none;border-left:none'>AA</td>  <td class=xl69 style='border-top:none;border-left:none'>&ordf;</td>  <td class=xl68 style='border-top:none;border-left:none'>Feminine ordinal  indicator</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>171</td>  <td class=xl65 style='border-top:none;border-left:none'>10101011</td>  <td class=xl65 style='border-top:none;border-left:none'>253</td>  <td class=xl65 style='border-top:none;border-left:none'>AB</td>  <td class=xl69 style='border-top:none;border-left:none'>&laquo;</td>  <td class=xl68 style='border-top:none;border-left:none'>Left double angle  quotes</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>172</td>  <td class=xl65 style='border-top:none;border-left:none'>10101100</td>  <td class=xl65 style='border-top:none;border-left:none'>254</td>  <td class=xl65 style='border-top:none;border-left:none'>AC</td>  <td class=xl69 style='border-top:none;border-left:none'>&not;</td>  <td class=xl68 style='border-top:none;border-left:none'>Not sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>173</td>  <td class=xl65 style='border-top:none;border-left:none'>10101101</td>  <td class=xl65 style='border-top:none;border-left:none'>255</td>  <td class=xl65 style='border-top:none;border-left:none'>AD</td>  <td class=xl65 style='border-top:none;border-left:none'>　</td>  <td class=xl68 style='border-top:none;border-left:none'>Soft hyphen</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>174</td>  <td class=xl65 style='border-top:none;border-left:none'>10101110</td>  <td class=xl65 style='border-top:none;border-left:none'>256</td>  <td class=xl65 style='border-top:none;border-left:none'>AE</td>  <td class=xl69 style='border-top:none;border-left:none'>&reg;</td>  <td class=xl68 style='border-top:none;border-left:none'>Registered trade mark  sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>175</td>  <td class=xl65 style='border-top:none;border-left:none'>10101111</td>  <td class=xl65 style='border-top:none;border-left:none'>257</td>  <td class=xl65 style='border-top:none;border-left:none'>AF</td>  <td class=xl69 style='border-top:none;border-left:none'>&macr;</td>  <td class=xl68 style='border-top:none;border-left:none'>Spacing macron -  overline</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>176</td>  <td class=xl65 style='border-top:none;border-left:none'>10110000</td>  <td class=xl65 style='border-top:none;border-left:none'>260</td>  <td class=xl65 style='border-top:none;border-left:none'>B0</td>  <td class=xl69 style='border-top:none;border-left:none'>°</td>  <td class=xl68 style='border-top:none;border-left:none'>Degree sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>177</td>  <td class=xl65 style='border-top:none;border-left:none'>10110001</td>  <td class=xl65 style='border-top:none;border-left:none'>261</td>  <td class=xl65 style='border-top:none;border-left:none'>B1</td>  <td class=xl69 style='border-top:none;border-left:none'>±</td>  <td class=xl68 style='border-top:none;border-left:none'>Plus-or-minus sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>178</td>  <td class=xl65 style='border-top:none;border-left:none'>10110010</td>  <td class=xl65 style='border-top:none;border-left:none'>262</td>  <td class=xl65 style='border-top:none;border-left:none'>B2</td>  <td class=xl69 style='border-top:none;border-left:none'>&sup2;</td>  <td class=xl68 style='border-top:none;border-left:none'>Superscript two -  squared</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>179</td>  <td class=xl65 style='border-top:none;border-left:none'>10110011</td>  <td class=xl65 style='border-top:none;border-left:none'>263</td>  <td class=xl65 style='border-top:none;border-left:none'>B3</td>  <td class=xl69 style='border-top:none;border-left:none'>&sup3;</td>  <td class=xl68 style='border-top:none;border-left:none'>Superscript three -  cubed</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>180</td>  <td class=xl65 style='border-top:none;border-left:none'>10110100</td>  <td class=xl65 style='border-top:none;border-left:none'>264</td>  <td class=xl65 style='border-top:none;border-left:none'>B4</td>  <td class=xl69 style='border-top:none;border-left:none'>&acute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Acute accent -  spacing acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>181</td>  <td class=xl65 style='border-top:none;border-left:none'>10110101</td>  <td class=xl65 style='border-top:none;border-left:none'>265</td>  <td class=xl65 style='border-top:none;border-left:none'>B5</td>  <td class=xl69 style='border-top:none;border-left:none'>&micro;</td>  <td class=xl68 style='border-top:none;border-left:none'>Micro sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>182</td>  <td class=xl65 style='border-top:none;border-left:none'>10110110</td>  <td class=xl65 style='border-top:none;border-left:none'>266</td>  <td class=xl65 style='border-top:none;border-left:none'>B6</td>  <td class=xl69 style='border-top:none;border-left:none'>&para;</td>  <td class=xl68 style='border-top:none;border-left:none'>Pilcrow sign -  paragraph sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>183</td>  <td class=xl65 style='border-top:none;border-left:none'>10110111</td>  <td class=xl65 style='border-top:none;border-left:none'>267</td>  <td class=xl65 style='border-top:none;border-left:none'>B7</td>  <td class=xl69 style='border-top:none;border-left:none'>·</td>  <td class=xl68 style='border-top:none;border-left:none'>Middle dot - Georgian  comma</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>184</td>  <td class=xl65 style='border-top:none;border-left:none'>10111000</td>  <td class=xl65 style='border-top:none;border-left:none'>270</td>  <td class=xl65 style='border-top:none;border-left:none'>B8</td>  <td class=xl69 style='border-top:none;border-left:none'>&cedil;</td>  <td class=xl68 style='border-top:none;border-left:none'>Spacing cedilla</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>185</td>  <td class=xl65 style='border-top:none;border-left:none'>10111001</td>  <td class=xl65 style='border-top:none;border-left:none'>271</td>  <td class=xl65 style='border-top:none;border-left:none'>B9</td>  <td class=xl69 style='border-top:none;border-left:none'>&sup1;</td>  <td class=xl68 style='border-top:none;border-left:none'>Superscript one</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>186</td>  <td class=xl65 style='border-top:none;border-left:none'>10111010</td>  <td class=xl65 style='border-top:none;border-left:none'>272</td>  <td class=xl65 style='border-top:none;border-left:none'>BA</td>  <td class=xl69 style='border-top:none;border-left:none'>&ordm;</td>  <td class=xl68 style='border-top:none;border-left:none'>Masculine ordinal  indicator</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>187</td>  <td class=xl65 style='border-top:none;border-left:none'>10111011</td>  <td class=xl65 style='border-top:none;border-left:none'>273</td>  <td class=xl65 style='border-top:none;border-left:none'>BB</td>  <td class=xl69 style='border-top:none;border-left:none'>&raquo;</td>  <td class=xl68 style='border-top:none;border-left:none'>Right double angle  quotes</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>188</td>  <td class=xl65 style='border-top:none;border-left:none'>10111100</td>  <td class=xl65 style='border-top:none;border-left:none'>274</td>  <td class=xl65 style='border-top:none;border-left:none'>BC</td>  <td class=xl69 style='border-top:none;border-left:none'>&frac14;</td>  <td class=xl68 style='border-top:none;border-left:none'>Fraction one quarter</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>189</td>  <td class=xl65 style='border-top:none;border-left:none'>10111101</td>  <td class=xl65 style='border-top:none;border-left:none'>275</td>  <td class=xl65 style='border-top:none;border-left:none'>BD</td>  <td class=xl69 style='border-top:none;border-left:none'>&frac12;</td>  <td class=xl68 style='border-top:none;border-left:none'>Fraction one half</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>190</td>  <td class=xl65 style='border-top:none;border-left:none'>10111110</td>  <td class=xl65 style='border-top:none;border-left:none'>276</td>  <td class=xl65 style='border-top:none;border-left:none'>BE</td>  <td class=xl69 style='border-top:none;border-left:none'>&frac34;</td>  <td class=xl68 style='border-top:none;border-left:none'>Fraction three  quarters</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>191</td>  <td class=xl65 style='border-top:none;border-left:none'>10111111</td>  <td class=xl65 style='border-top:none;border-left:none'>277</td>  <td class=xl65 style='border-top:none;border-left:none'>BF</td>  <td class=xl69 style='border-top:none;border-left:none'>&iquest;</td>  <td class=xl68 style='border-top:none;border-left:none'>Inverted question  mark</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>192</td>  <td class=xl65 style='border-top:none;border-left:none'>11000000</td>  <td class=xl65 style='border-top:none;border-left:none'>300</td>  <td class=xl65 style='border-top:none;border-left:none'>C0</td>  <td class=xl69 style='border-top:none;border-left:none'>&Agrave;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>193</td>  <td class=xl65 style='border-top:none;border-left:none'>11000001</td>  <td class=xl65 style='border-top:none;border-left:none'>301</td>  <td class=xl65 style='border-top:none;border-left:none'>C1</td>  <td class=xl69 style='border-top:none;border-left:none'>&Aacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>194</td>  <td class=xl65 style='border-top:none;border-left:none'>11000010</td>  <td class=xl65 style='border-top:none;border-left:none'>302</td>  <td class=xl65 style='border-top:none;border-left:none'>C2</td>  <td class=xl69 style='border-top:none;border-left:none'>&Acirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>195</td>  <td class=xl65 style='border-top:none;border-left:none'>11000011</td>  <td class=xl65 style='border-top:none;border-left:none'>303</td>  <td class=xl65 style='border-top:none;border-left:none'>C3</td>  <td class=xl69 style='border-top:none;border-left:none'>&Atilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>196</td>  <td class=xl65 style='border-top:none;border-left:none'>11000100</td>  <td class=xl65 style='border-top:none;border-left:none'>304</td>  <td class=xl65 style='border-top:none;border-left:none'>C4</td>  <td class=xl69 style='border-top:none;border-left:none'>&Auml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>197</td>  <td class=xl65 style='border-top:none;border-left:none'>11000101</td>  <td class=xl65 style='border-top:none;border-left:none'>305</td>  <td class=xl65 style='border-top:none;border-left:none'>C5</td>  <td class=xl69 style='border-top:none;border-left:none'>&Aring;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  A with ring above</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>198</td>  <td class=xl65 style='border-top:none;border-left:none'>11000110</td>  <td class=xl65 style='border-top:none;border-left:none'>306</td>  <td class=xl65 style='border-top:none;border-left:none'>C6</td>  <td class=xl69 style='border-top:none;border-left:none'>&AElig;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  AE</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>199</td>  <td class=xl65 style='border-top:none;border-left:none'>11000111</td>  <td class=xl65 style='border-top:none;border-left:none'>307</td>  <td class=xl65 style='border-top:none;border-left:none'>C7</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ccedil;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  C with cedilla</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>200</td>  <td class=xl65 style='border-top:none;border-left:none'>11001000</td>  <td class=xl65 style='border-top:none;border-left:none'>310</td>  <td class=xl65 style='border-top:none;border-left:none'>C8</td>  <td class=xl69 style='border-top:none;border-left:none'>&Egrave;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  E with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>201</td>  <td class=xl65 style='border-top:none;border-left:none'>11001001</td>  <td class=xl65 style='border-top:none;border-left:none'>311</td>  <td class=xl65 style='border-top:none;border-left:none'>C9</td>  <td class=xl69 style='border-top:none;border-left:none'>&Eacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  E with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>202</td>  <td class=xl65 style='border-top:none;border-left:none'>11001010</td>  <td class=xl65 style='border-top:none;border-left:none'>312</td>  <td class=xl65 style='border-top:none;border-left:none'>CA</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ecirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  E with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>203</td>  <td class=xl65 style='border-top:none;border-left:none'>11001011</td>  <td class=xl65 style='border-top:none;border-left:none'>313</td>  <td class=xl65 style='border-top:none;border-left:none'>CB</td>  <td class=xl69 style='border-top:none;border-left:none'>&Euml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  E with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>204</td>  <td class=xl65 style='border-top:none;border-left:none'>11001100</td>  <td class=xl65 style='border-top:none;border-left:none'>314</td>  <td class=xl65 style='border-top:none;border-left:none'>CC</td>  <td class=xl69 style='border-top:none;border-left:none'>&Igrave;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  I with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>205</td>  <td class=xl65 style='border-top:none;border-left:none'>11001101</td>  <td class=xl65 style='border-top:none;border-left:none'>315</td>  <td class=xl65 style='border-top:none;border-left:none'>CD</td>  <td class=xl70 width=121 style='border-top:none;border-left:none;width:91pt'>&Iacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  I with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>206</td>  <td class=xl65 style='border-top:none;border-left:none'>11001110</td>  <td class=xl65 style='border-top:none;border-left:none'>316</td>  <td class=xl65 style='border-top:none;border-left:none'>CE</td>  <td class=xl69 style='border-top:none;border-left:none'>&Icirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  I with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>207</td>  <td class=xl65 style='border-top:none;border-left:none'>11001111</td>  <td class=xl65 style='border-top:none;border-left:none'>317</td>  <td class=xl65 style='border-top:none;border-left:none'>CF</td>  <td class=xl69 style='border-top:none;border-left:none'>&Iuml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  I with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>208</td>  <td class=xl65 style='border-top:none;border-left:none'>11010000</td>  <td class=xl65 style='border-top:none;border-left:none'>320</td>  <td class=xl65 style='border-top:none;border-left:none'>D0</td>  <td class=xl69 style='border-top:none;border-left:none'>&ETH;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  ETH</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>209</td>  <td class=xl65 style='border-top:none;border-left:none'>11010001</td>  <td class=xl65 style='border-top:none;border-left:none'>321</td>  <td class=xl65 style='border-top:none;border-left:none'>D1</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ntilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  N with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>210</td>  <td class=xl65 style='border-top:none;border-left:none'>11010010</td>  <td class=xl65 style='border-top:none;border-left:none'>322</td>  <td class=xl65 style='border-top:none;border-left:none'>D2</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ograve;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>211</td>  <td class=xl65 style='border-top:none;border-left:none'>11010011</td>  <td class=xl65 style='border-top:none;border-left:none'>323</td>  <td class=xl65 style='border-top:none;border-left:none'>D3</td>  <td class=xl69 style='border-top:none;border-left:none'>&Oacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>212</td>  <td class=xl65 style='border-top:none;border-left:none'>11010100</td>  <td class=xl65 style='border-top:none;border-left:none'>324</td>  <td class=xl65 style='border-top:none;border-left:none'>D4</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ocirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>213</td>  <td class=xl65 style='border-top:none;border-left:none'>11010101</td>  <td class=xl65 style='border-top:none;border-left:none'>325</td>  <td class=xl65 style='border-top:none;border-left:none'>D5</td>  <td class=xl69 style='border-top:none;border-left:none'>&Otilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>214</td>  <td class=xl65 style='border-top:none;border-left:none'>11010110</td>  <td class=xl65 style='border-top:none;border-left:none'>326</td>  <td class=xl65 style='border-top:none;border-left:none'>D6</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ouml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>215</td>  <td class=xl65 style='border-top:none;border-left:none'>11010111</td>  <td class=xl65 style='border-top:none;border-left:none'>327</td>  <td class=xl65 style='border-top:none;border-left:none'>D7</td>  <td class=xl69 style='border-top:none;border-left:none'>×</td>  <td class=xl68 style='border-top:none;border-left:none'>Multiplication sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>216</td>  <td class=xl65 style='border-top:none;border-left:none'>11011000</td>  <td class=xl65 style='border-top:none;border-left:none'>330</td>  <td class=xl65 style='border-top:none;border-left:none'>D8</td>  <td class=xl69 style='border-top:none;border-left:none'>&Oslash;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  O with slash</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>217</td>  <td class=xl65 style='border-top:none;border-left:none'>11011001</td>  <td class=xl65 style='border-top:none;border-left:none'>331</td>  <td class=xl65 style='border-top:none;border-left:none'>D9</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ugrave;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  U with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>218</td>  <td class=xl65 style='border-top:none;border-left:none'>11011010</td>  <td class=xl65 style='border-top:none;border-left:none'>332</td>  <td class=xl65 style='border-top:none;border-left:none'>DA</td>  <td class=xl69 style='border-top:none;border-left:none'>&Uacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  U with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>219</td>  <td class=xl65 style='border-top:none;border-left:none'>11011011</td>  <td class=xl65 style='border-top:none;border-left:none'>333</td>  <td class=xl65 style='border-top:none;border-left:none'>DB</td>  <td class=xl69 style='border-top:none;border-left:none'>&Ucirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  U with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>220</td>  <td class=xl65 style='border-top:none;border-left:none'>11011100</td>  <td class=xl65 style='border-top:none;border-left:none'>334</td>  <td class=xl65 style='border-top:none;border-left:none'>DC</td>  <td class=xl69 style='border-top:none;border-left:none'>&Uuml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  U with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>221</td>  <td class=xl65 style='border-top:none;border-left:none'>11011101</td>  <td class=xl65 style='border-top:none;border-left:none'>335</td>  <td class=xl65 style='border-top:none;border-left:none'>DD</td>  <td class=xl69 style='border-top:none;border-left:none'>&Yacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  Y with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>222</td>  <td class=xl65 style='border-top:none;border-left:none'>11011110</td>  <td class=xl65 style='border-top:none;border-left:none'>336</td>  <td class=xl65 style='border-top:none;border-left:none'>DE</td>  <td class=xl69 style='border-top:none;border-left:none'>&THORN;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin capital letter  THORN</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>223</td>  <td class=xl65 style='border-top:none;border-left:none'>11011111</td>  <td class=xl65 style='border-top:none;border-left:none'>337</td>  <td class=xl65 style='border-top:none;border-left:none'>DF</td>  <td class=xl69 style='border-top:none;border-left:none'>&szlig;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter  sharp s - ess-zed</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>224</td>  <td class=xl65 style='border-top:none;border-left:none'>11100000</td>  <td class=xl65 style='border-top:none;border-left:none'>340</td>  <td class=xl65 style='border-top:none;border-left:none'>E0</td>  <td class=xl69 style='border-top:none;border-left:none'>à</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>225</td>  <td class=xl65 style='border-top:none;border-left:none'>11100001</td>  <td class=xl65 style='border-top:none;border-left:none'>341</td>  <td class=xl65 style='border-top:none;border-left:none'>E1</td>  <td class=xl69 style='border-top:none;border-left:none'>á</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>226</td>  <td class=xl65 style='border-top:none;border-left:none'>11100010</td>  <td class=xl65 style='border-top:none;border-left:none'>342</td>  <td class=xl65 style='border-top:none;border-left:none'>E2</td>  <td class=xl69 style='border-top:none;border-left:none'>&acirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>227</td>  <td class=xl65 style='border-top:none;border-left:none'>11100011</td>  <td class=xl65 style='border-top:none;border-left:none'>343</td>  <td class=xl65 style='border-top:none;border-left:none'>E3</td>  <td class=xl69 style='border-top:none;border-left:none'>&atilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>228</td>  <td class=xl65 style='border-top:none;border-left:none'>11100100</td>  <td class=xl65 style='border-top:none;border-left:none'>344</td>  <td class=xl65 style='border-top:none;border-left:none'>E4</td>  <td class=xl69 style='border-top:none;border-left:none'>&auml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>229</td>  <td class=xl65 style='border-top:none;border-left:none'>11100101</td>  <td class=xl65 style='border-top:none;border-left:none'>345</td>  <td class=xl65 style='border-top:none;border-left:none'>E5</td>  <td class=xl69 style='border-top:none;border-left:none'>&aring;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter a  with ring above</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>230</td>  <td class=xl65 style='border-top:none;border-left:none'>11100110</td>  <td class=xl65 style='border-top:none;border-left:none'>346</td>  <td class=xl65 style='border-top:none;border-left:none'>E6</td>  <td class=xl69 style='border-top:none;border-left:none'>&aelig;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter ae</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>231</td>  <td class=xl65 style='border-top:none;border-left:none'>11100111</td>  <td class=xl65 style='border-top:none;border-left:none'>347</td>  <td class=xl65 style='border-top:none;border-left:none'>E7</td>  <td class=xl69 style='border-top:none;border-left:none'>&ccedil;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter c  with cedilla</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>232</td>  <td class=xl65 style='border-top:none;border-left:none'>11101000</td>  <td class=xl65 style='border-top:none;border-left:none'>350</td>  <td class=xl65 style='border-top:none;border-left:none'>E8</td>  <td class=xl69 style='border-top:none;border-left:none'>è</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter e  with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>233</td>  <td class=xl65 style='border-top:none;border-left:none'>11101001</td>  <td class=xl65 style='border-top:none;border-left:none'>351</td>  <td class=xl65 style='border-top:none;border-left:none'>E9</td>  <td class=xl69 style='border-top:none;border-left:none'>é</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter e  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>234</td>  <td class=xl65 style='border-top:none;border-left:none'>11101010</td>  <td class=xl65 style='border-top:none;border-left:none'>352</td>  <td class=xl65 style='border-top:none;border-left:none'>EA</td>  <td class=xl69 style='border-top:none;border-left:none'>ê</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter e  with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>235</td>  <td class=xl65 style='border-top:none;border-left:none'>11101011</td>  <td class=xl65 style='border-top:none;border-left:none'>353</td>  <td class=xl65 style='border-top:none;border-left:none'>EB</td>  <td class=xl69 style='border-top:none;border-left:none'>&euml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter e  with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>236</td>  <td class=xl65 style='border-top:none;border-left:none'>11101100</td>  <td class=xl65 style='border-top:none;border-left:none'>354</td>  <td class=xl65 style='border-top:none;border-left:none'>EC</td>  <td class=xl69 style='border-top:none;border-left:none'>ì</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter i  with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>237</td>  <td class=xl65 style='border-top:none;border-left:none'>11101101</td>  <td class=xl65 style='border-top:none;border-left:none'>355</td>  <td class=xl65 style='border-top:none;border-left:none'>ED</td>  <td class=xl69 style='border-top:none;border-left:none'>í</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter i  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>238</td>  <td class=xl65 style='border-top:none;border-left:none'>11101110</td>  <td class=xl65 style='border-top:none;border-left:none'>356</td>  <td class=xl65 style='border-top:none;border-left:none'>EE</td>  <td class=xl69 style='border-top:none;border-left:none'>&icirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter i  with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>239</td>  <td class=xl65 style='border-top:none;border-left:none'>11101111</td>  <td class=xl65 style='border-top:none;border-left:none'>357</td>  <td class=xl65 style='border-top:none;border-left:none'>EF</td>  <td class=xl69 style='border-top:none;border-left:none'>&iuml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter i  with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>240</td>  <td class=xl65 style='border-top:none;border-left:none'>11110000</td>  <td class=xl65 style='border-top:none;border-left:none'>360</td>  <td class=xl65 style='border-top:none;border-left:none'>F0</td>  <td class=xl69 style='border-top:none;border-left:none'>&eth;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter  eth</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>241</td>  <td class=xl65 style='border-top:none;border-left:none'>11110001</td>  <td class=xl65 style='border-top:none;border-left:none'>361</td>  <td class=xl65 style='border-top:none;border-left:none'>F1</td>  <td class=xl69 style='border-top:none;border-left:none'>&ntilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter n  with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>242</td>  <td class=xl65 style='border-top:none;border-left:none'>11110010</td>  <td class=xl65 style='border-top:none;border-left:none'>362</td>  <td class=xl65 style='border-top:none;border-left:none'>F2</td>  <td class=xl69 style='border-top:none;border-left:none'>ò</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>243</td>  <td class=xl65 style='border-top:none;border-left:none'>11110011</td>  <td class=xl65 style='border-top:none;border-left:none'>363</td>  <td class=xl65 style='border-top:none;border-left:none'>F3</td>  <td class=xl69 style='border-top:none;border-left:none'>ó</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>244</td>  <td class=xl65 style='border-top:none;border-left:none'>11110100</td>  <td class=xl65 style='border-top:none;border-left:none'>364</td>  <td class=xl65 style='border-top:none;border-left:none'>F4</td>  <td class=xl69 style='border-top:none;border-left:none'>&ocirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>245</td>  <td class=xl65 style='border-top:none;border-left:none'>11110101</td>  <td class=xl65 style='border-top:none;border-left:none'>365</td>  <td class=xl65 style='border-top:none;border-left:none'>F5</td>  <td class=xl69 style='border-top:none;border-left:none'>&otilde;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with tilde</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>246</td>  <td class=xl65 style='border-top:none;border-left:none'>11110110</td>  <td class=xl65 style='border-top:none;border-left:none'>366</td>  <td class=xl65 style='border-top:none;border-left:none'>F6</td>  <td class=xl69 style='border-top:none;border-left:none'>&ouml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>247</td>  <td class=xl65 style='border-top:none;border-left:none'>11110111</td>  <td class=xl65 style='border-top:none;border-left:none'>367</td>  <td class=xl65 style='border-top:none;border-left:none'>F7</td>  <td class=xl69 style='border-top:none;border-left:none'>÷</td>  <td class=xl68 style='border-top:none;border-left:none'>Division sign</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>248</td>  <td class=xl65 style='border-top:none;border-left:none'>11111000</td>  <td class=xl65 style='border-top:none;border-left:none'>370</td>  <td class=xl65 style='border-top:none;border-left:none'>F8</td>  <td class=xl69 style='border-top:none;border-left:none'>&oslash;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter o  with slash</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>249</td>  <td class=xl65 style='border-top:none;border-left:none'>11111001</td>  <td class=xl65 style='border-top:none;border-left:none'>371</td>  <td class=xl65 style='border-top:none;border-left:none'>F9</td>  <td class=xl69 style='border-top:none;border-left:none'>ù</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter u  with grave</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>250</td>  <td class=xl65 style='border-top:none;border-left:none'>11111010</td>  <td class=xl65 style='border-top:none;border-left:none'>372</td>  <td class=xl65 style='border-top:none;border-left:none'>FA</td>  <td class=xl65 style='border-top:none;border-left:none'>ú</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter u  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>251</td>  <td class=xl65 style='border-top:none;border-left:none'>11111011</td>  <td class=xl65 style='border-top:none;border-left:none'>373</td>  <td class=xl65 style='border-top:none;border-left:none'>FB</td>  <td class=xl69 style='border-top:none;border-left:none'>&ucirc;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter u  with circumflex</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>252</td>  <td class=xl65 style='border-top:none;border-left:none'>11111100</td>  <td class=xl65 style='border-top:none;border-left:none'>374</td>  <td class=xl65 style='border-top:none;border-left:none'>FC</td>  <td class=xl65 style='border-top:none;border-left:none'>ü</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter u  with diaeresis</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>253</td>  <td class=xl65 style='border-top:none;border-left:none'>11111101</td>  <td class=xl65 style='border-top:none;border-left:none'>375</td>  <td class=xl65 style='border-top:none;border-left:none'>FD</td>  <td class=xl69 style='border-top:none;border-left:none'>&yacute;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter y  with acute</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>254</td>  <td class=xl65 style='border-top:none;border-left:none'>11111110</td>  <td class=xl65 style='border-top:none;border-left:none'>376</td>  <td class=xl65 style='border-top:none;border-left:none'>FE</td>  <td class=xl69 style='border-top:none;border-left:none'>&thorn;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter  thorn</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>255</td>  <td class=xl65 style='border-top:none;border-left:none'>11111111</td>  <td class=xl65 style='border-top:none;border-left:none'>377</td>  <td class=xl65 style='border-top:none;border-left:none'>FF</td>  <td class=xl69 style='border-top:none;border-left:none'>&yuml;</td>  <td class=xl68 style='border-top:none;border-left:none'>Latin small letter y  with diaeresis</td> </tr> <![if supportMisalignedColumns]> <tr height=0 style='display:none'>  <td width=90 style='width:68pt'></td>  <td width=132 style='width:99pt'></td>  <td width=72 style='width:54pt'></td>  <td width=63 style='width:47pt'></td>  <td width=121 style='width:91pt'></td>  <td width=439 style='width:329pt'></td> </tr> <![endif]></table></body></html>]]></content>
    
    
    <summary type="html">ASCII码表</summary>
    
    
    
    <category term="ASCII码表" scheme="https://goupos.top/categories/ASCII%E7%A0%81%E8%A1%A8/"/>
    
    
    <category term="ASCII码表" scheme="https://goupos.top/tags/ASCII%E7%A0%81%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>ADC参数详解</title>
    <link href="https://goupos.top/2024/01/09/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/ADC%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://goupos.top/2024/01/09/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/ADC%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2024-01-09T09:22:00.000Z</published>
    <updated>2024-01-16T07:46:29.257Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h1><h2 id="分辨率（Resolution）"><a href="#分辨率（Resolution）" class="headerlink" title="分辨率（Resolution）"></a>分辨率（Resolution）</h2><p>其实就是对一个标准电压(就是供电给ADC芯片的电压)可以分成多少等份。例如8位的ADC就可以对标准电压分成256等份，表示256个不同的模拟信号值</p><h2 id="采样速率（Sampling-Time）"><a href="#采样速率（Sampling-Time）" class="headerlink" title="采样速率（Sampling Time）"></a>采样速率（Sampling Time）</h2><p>采样速率就是我们最高的ADC采样频率，也就是数据手册中的<code>Maximum Sampling Frequency</code>。ADC的采样速率必须小于转换速率，常用单位是 ksps 和 Msps，表示每秒 采样千&#x2F;百万次（kilo &#x2F; Million Samples per Second）</p><p>奈奎斯特采样定理:<br>在进行模拟&#x2F;数字信号的转换过程中，当采样频率fs.max大于信号中最高频率fmax的2倍时（fs.max＞&#x3D;2fmax）,采样之后的数字信号完整地保留了原始信号中的信息，一般实际应用中保证采样频率为信号最高频率的2.56～4倍；采样定理又称奈奎斯特定理。</p><h2 id="转换时间（Conversion-Time）"><a href="#转换时间（Conversion-Time）" class="headerlink" title="转换时间（Conversion Time）"></a>转换时间（Conversion Time）</h2><p>转换时间的导数就是转换速率。因为将一个模拟信号值转换成一个数字量不能瞬间完成，这个过程需要一定的时间。<br>积分型 AD 的转换时间是毫秒级属于低速 AD，逐次比较型 AD 是微秒级属中速 AD，全并行&#x2F; 串并行型 AD 可达到纳秒级。转换时间是衡量一个ADC是不是高速的主要指标，高速ADC转换时间小于1us，低速ADC转换时间大于300us。</p><h1 id="量程"><a href="#量程" class="headerlink" title="量程"></a>量程</h1><p>指的是允许输入的模拟信号范围。</p><h1 id="最低有效位-One-least-significant-bit-LSB"><a href="#最低有效位-One-least-significant-bit-LSB" class="headerlink" title="最低有效位(One least significant bit, LSB)"></a>最低有效位(One least significant bit, LSB)</h1><p>又称最小分辨率，要记住这个参数的英文LSB，满量程值除以ADC的分辨率就是LSB，很好理解，就比如说一个4位的ADC，数字量最高可以表示2的4次方也就是16，满量程5V，那么最小的分辨率就是5&#x2F;16&#x3D;0.31V，也就是说这个ADC最小辨认的电压是0.31V，可以用数字量0001表示0.31V这个模拟量。LSB越小表明ADC的精度越高。</p>]]></content>
    
    
    <summary type="html">ADC参数详解</summary>
    
    
    
    <category term="硬件开发" scheme="https://goupos.top/categories/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="ADC参数详解" scheme="https://goupos.top/tags/ADC%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>C++的STL容器1</title>
    <link href="https://goupos.top/2024/01/08/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E7%9A%84STL%E5%AE%B9%E5%99%A81/"/>
    <id>https://goupos.top/2024/01/08/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E7%9A%84STL%E5%AE%B9%E5%99%A81/</id>
    <published>2024-01-07T17:42:29.000Z</published>
    <updated>2024-01-15T17:25:26.128Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h1><p>deque容器基本概念<br>双端数组，可以对头端（尾端）进行插入删除操作</p><p>deque 与 vector区别<br>vector对于头部插入删除效率底，数据量越大，效率越低；vector 访问效率高<br>deque相对而言，对头部插入删除速度会比vector快<br>vector访问元素时的速度会比deque快，这和两者内部实现有关。</p><img data-src="https://s2.loli.net/2024/01/09/z9gi6fowZ7J1qKj.png"/><p>push_front、pop_front插入和移除头部一个元素<br>push_back、pop_back插入和移除尾部一个元素<br>insert指定位插入<br>begin、end迭代器</p><p>deque 内部工作原理<br>deque内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据；中控器维护的是每个缓冲区的地址，使得使用deque时像一片连续的内存空间；当数据插满的时候，再找一段内存插入数据进去，再去中控器中记录这个地址<br>中控器中有很多的节点，指向数据的缓冲器。</p><img data-src="https://s2.loli.net/2024/01/09/yi9FMjVlfSoWEUr.png"/><p>deque容器的迭代器支持随机访问</p><h1 id="deque构造函数"><a href="#deque构造函数" class="headerlink" title="deque构造函数"></a>deque构造函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deque&lt;T&gt; qeqT;//默认构造形式</span><br><span class="line">deque(begin,end);//构造函数将[begin,end)区间中的元素拷贝给本身</span><br><span class="line">deque(n,elem);//构造函数将n个elem拷贝给本身</span><br><span class="line">deque(const deque &amp;deq);//拷贝构造函数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printDeque(const string str,deque&lt;int&gt; &amp;deq) </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str + &#x27;:&#x27; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = deq.begin(); it != deq.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; deq;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">deq.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(&quot;deq&quot;,deq);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d2(deq.begin(),deq.end()-5);</span><br><span class="line">printDeque(&quot;d2&quot;,d2);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d3(10, 100);</span><br><span class="line">printDeque(&quot;d3&quot;, d3);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d4(d3);</span><br><span class="line">printDeque(&quot;d4&quot;, d4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>const_iterator:只读迭代器<br>iterator:可读可写迭代器<br>deque容器和vector容器的构造方式几乎一样。</p><h1 id="deque-容器赋值操作"><a href="#deque-容器赋值操作" class="headerlink" title="deque 容器赋值操作"></a>deque 容器赋值操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deque &amp; operator=(const deque &amp;deq);//重载等号操作符</span><br><span class="line">assign(beg.end);//将[begin,end)区间中的数据拷贝给本身</span><br><span class="line">assign(n,elem);//将n个elem拷贝赋值给本身</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printDeque(const string str, deque&lt;int&gt; &amp;deq)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str + &#x27;:&#x27; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = deq.begin(); it != deq.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; d1;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printDeque(&quot;d1&quot;,d1);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d2 = d1;</span><br><span class="line">printDeque(&quot;d2&quot;, d2);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d3;</span><br><span class="line">d3.assign(d2.begin(),d2.end());</span><br><span class="line">printDeque(&quot;d3&quot;, d3);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d4;</span><br><span class="line">d4.assign(10, 100);</span><br><span class="line">printDeque(&quot;d4&quot;, d4);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="deque大小操作"><a href="#deque大小操作" class="headerlink" title="deque大小操作"></a>deque大小操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deque.empty();//判断容器是否为空</span><br><span class="line">deque.size();//返回容器中的元素个数</span><br><span class="line">deque.resize(num);//重新指定容器的长度为num，若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span><br><span class="line">deque.resize(num,elem);//重新指定容器的长度为num，若容器变长，则以elem值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printDeque(string str, const deque&lt;int&gt; &amp;d)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str + &#x27;:&#x27; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; d1;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;d1容器是否为空：&quot; &lt;&lt; (d1.empty() ? &quot;是&quot; : &quot;否&quot;) &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;d1容器大小：&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">d1.resize(30);//容器扩大使用默认值填充</span><br><span class="line">cout &lt;&lt; &quot;d1容器大小：&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">printDeque(&quot;28行&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.resize(10);//容器变小</span><br><span class="line">cout &lt;&lt; &quot;d1容器大小：&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">printDeque(&quot;32行&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.resize(20,5);//容器扩大使用指定的值填充</span><br><span class="line">cout &lt;&lt; &quot;d1容器大小：&quot; &lt;&lt; d1.size() &lt;&lt; endl;</span><br><span class="line">printDeque(&quot;36行&quot;, d1);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>deque是没有容量概念</code>,没有capacity;</p><h1 id="deque容器插入和删除"><a href="#deque容器插入和删除" class="headerlink" title="deque容器插入和删除"></a>deque容器插入和删除</h1><p>两端插入操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push_back(elem);//容器尾部添加一个元素</span><br><span class="line">push_front(elem);//容器头部添加一个元素</span><br><span class="line">pop_back();//删除容器最后一个元素</span><br><span class="line">pop_front();//删除容器第一个元素</span><br></pre></td></tr></table></figure><p>指定位置操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">insert(pos,elem);//在pos位置插入一个elem元素的拷贝，返回新数据的位置 （pos位置提供一个迭代器位置）</span><br><span class="line">insert(pos,n,elem);//在pos位置插入n个elem元素，无返回值。</span><br><span class="line">insert(pos,beg,end);//在pos位置插入[beg,end)区间的数据，无返回值。</span><br><span class="line">clear();//清空容器的所有数据</span><br><span class="line">erase(beg,end);//删除[beg，end)区间的数据，返回下一个数据的位置</span><br><span class="line">erase(pos);//删除pos位置的数据，返回下一个数据的位置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printDeque(string str, const deque&lt;int&gt; &amp;d)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str + &#x27;:&#x27; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = d.begin(); it != d.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; d1;</span><br><span class="line">d1.push_back(10);</span><br><span class="line">d1.push_back(20);</span><br><span class="line"></span><br><span class="line">d1.push_front(100);</span><br><span class="line">d1.push_front(200);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.pop_back();</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line">d1.pop_front();</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.push_back(20);</span><br><span class="line">d1.push_front(200);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.begin() + 1, 1000);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.insert(d1.begin() + 1, 2, 10000);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">deque&lt;int&gt; d2;</span><br><span class="line">d2.push_back(1);</span><br><span class="line">d2.push_back(2);</span><br><span class="line">d2.push_back(3);</span><br><span class="line">//按照区间插入</span><br><span class="line">d1.insert(d1.begin(),d2.begin(),d2.end()-1);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line">deque&lt;int&gt;::iterator it = d1.begin();</span><br><span class="line">it++;</span><br><span class="line">it = d1.erase(it);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.erase(it, it + 2);</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">d1.clear();</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>插入和删除提供的位置是迭代器</p><h1 id="deque数据存储"><a href="#deque数据存储" class="headerlink" title="deque数据存储"></a>deque数据存储</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at(int idx);//返回索引idx所指的数据</span><br><span class="line">operator [];//返回索引idx所指的数据</span><br><span class="line">front();//返回容器中第一个数据元素</span><br><span class="line">back();//返回容器中最后一个数据元素</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; d1;</span><br><span class="line"></span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">d1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1.at(i) &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">d1[3] = 1000;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; d1[i] &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;第一个元素：&quot; &lt;&lt; d1.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;最后一个元素:&quot; &lt;&lt; d1.back() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="deque排序"><a href="#deque排序" class="headerlink" title="deque排序"></a>deque排序</h1><p>利用算法实现deque容器进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(iterator beg,iterator end);//对beg和end区间元素进行排序(默认排序规则，从小到大 升序)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;deque&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;//标准算法头文件</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printDeque(const string str, deque&lt;int&gt; &amp;deq)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str + &#x27;:&#x27; &lt;&lt; endl;</span><br><span class="line">for (deque&lt;int&gt;::const_iterator it = deq.begin(); it != deq.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">deque&lt;int&gt; d1;</span><br><span class="line">d1.push_back(10);</span><br><span class="line">d1.push_back(20);</span><br><span class="line">d1.push_back(30);</span><br><span class="line">d1.push_front(100);</span><br><span class="line">d1.push_front(200);</span><br><span class="line">d1.push_front(300);</span><br><span class="line">printDeque(&quot;d1&quot;,d1);</span><br><span class="line"></span><br><span class="line">sort(d1.begin(), d1.end());</span><br><span class="line">printDeque(&quot;d1&quot;, d1);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于支持水机访问的迭代器的容器，都可以利用sort算法直接对其进行排序</p><h1 id="stack容器"><a href="#stack容器" class="headerlink" title="stack容器"></a>stack容器</h1><p>先进后出 push pop</p><h1 id="stack常用接口"><a href="#stack常用接口" class="headerlink" title="stack常用接口"></a>stack常用接口</h1><p>构造函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;T&gt; stk;//stack采用模板类实现，stack对象的默认构造形式</span><br><span class="line">stack(const stack &amp; stk);//拷贝构造函数</span><br></pre></td></tr></table></figure><p>赋值操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack &amp; operator=(const stack &amp;stk);//重载等号操作符</span><br></pre></td></tr></table></figure><p>数据存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">push(elem);//向栈顶添加元素</span><br><span class="line">pop();//从栈顶一处第一元素</span><br><span class="line">top();//返回栈顶元素</span><br></pre></td></tr></table></figure><p>大小操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty();//判断堆栈是否为空</span><br><span class="line">size();//返回栈的大小</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">stack&lt;int&gt; s;</span><br><span class="line">s.push(10);</span><br><span class="line">s.push(20);</span><br><span class="line">s.push(30);</span><br><span class="line">s.push(40);</span><br><span class="line"></span><br><span class="line">stack&lt;int&gt; s1(s);</span><br><span class="line"></span><br><span class="line">while (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;栈顶元素:&quot; &lt;&lt; s.top() &lt;&lt; endl;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;栈大小:&quot; &lt;&lt; s.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">s = s1;</span><br><span class="line"></span><br><span class="line">while (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;s栈顶元素:&quot; &lt;&lt; s.top() &lt;&lt; endl;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (!s1.empty())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;s1栈顶元素:&quot; &lt;&lt; s1.top() &lt;&lt; endl;</span><br><span class="line">s1.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="queue容器"><a href="#queue容器" class="headerlink" title="queue容器"></a>queue容器</h1><p>是一种先进先出(First In First Out,FIFO)的数据结构，它有两个出口</p><img data-src="https://s2.loli.net/2024/01/14/8m1cDnxHWRfjStv.png"/><p>队尾只能插入数据(push)；队头只能取数据(pop) ;队尾back();队头front();队头队尾看个人指定</p><p>队列容器允许从一端新增元素，从另一端移除元素<br>队列中只有队头和队尾才可以被外界使用，因此队列不允许有遍历行为；</p><p>构造函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">queue&lt;T&gt; stk;//queue采用模板类实现，queue对象的默认构造形式</span><br><span class="line">queue(const queue &amp; stk);//拷贝构造函数</span><br></pre></td></tr></table></figure><p>赋值操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue &amp; operator=(const queue &amp;stk);//重载等号操作符</span><br></pre></td></tr></table></figure><p>数据存储</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">push(elem);//向队尾添加元素</span><br><span class="line">pop();//从队头移除第一元素</span><br><span class="line">front();//返回第一个元素</span><br><span class="line">back();//返回最后一个元素</span><br></pre></td></tr></table></figure><p>大小操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">empty();//判断队列是否为空</span><br><span class="line">size();//返回队列的大小</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person(string name, int age) :m_name(name), m_age(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~Person();</span><br><span class="line"></span><br><span class="line">string readname(void)</span><br><span class="line">&#123;</span><br><span class="line">return this-&gt;m_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int readage(void)</span><br><span class="line">&#123;</span><br><span class="line">return this-&gt;m_age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">string m_name;</span><br><span class="line">int m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person::~Person()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">queue&lt;Person&gt; q;</span><br><span class="line"></span><br><span class="line">//准备数据</span><br><span class="line">Person p1(&quot;唐僧&quot;,30);</span><br><span class="line">Person p2(&quot;孙悟空&quot;, 1000);</span><br><span class="line">Person p3(&quot;猪八戒&quot;, 900);</span><br><span class="line">Person p4(&quot;沙僧&quot;, 800);</span><br><span class="line"></span><br><span class="line">//入队</span><br><span class="line">q.push(p1);</span><br><span class="line">q.push(p2);</span><br><span class="line">q.push(p3);</span><br><span class="line">q.push(p4);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;容量&quot; &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//判断只要队列不为空，查看队头，查看队尾，出队</span><br><span class="line">while (!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">//查看队头</span><br><span class="line">cout &lt;&lt; &quot;队头元素 ----- 姓名&quot; &lt;&lt; q.front().readname() &lt;&lt; &quot;    年龄：&quot; &lt;&lt; q.front().readage() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//查看队尾</span><br><span class="line">cout &lt;&lt; &quot;队尾元素 ----- 姓名&quot; &lt;&lt; q.back().readname() &lt;&lt; &quot;    年龄：&quot; &lt;&lt; q.back().readage() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//出队</span><br><span class="line">q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;容量&quot; &lt;&lt; q.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="list容器"><a href="#list容器" class="headerlink" title="list容器"></a>list容器</h1><p>STL中的链表是一个双向循环链表<br>push_front、push_back、pop_front、pop_back、insert、begin、end</p><h1 id="list构造函数"><a href="#list构造函数" class="headerlink" title="list构造函数"></a>list构造函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list&lt;T&gt; lst;//list采用模板类实现，对象的默认构造形式</span><br><span class="line">list(begin,end);//构造函数将[begin,end)区间中的元素拷贝给本身</span><br><span class="line">list(n,elem);//构造函数将n个elem拷贝给本身</span><br><span class="line">list(const list &amp; lst);//拷贝构造函数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printList(const list&lt;int&gt; &amp;lst)</span><br><span class="line">&#123;</span><br><span class="line">for (list&lt;int&gt;::const_iterator it = lst.begin(); it != lst.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &#x27;\t&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">list&lt;int&gt; lst;</span><br><span class="line"></span><br><span class="line">lst.push_back(10);</span><br><span class="line">lst.push_back(20);</span><br><span class="line">lst.push_back(30);</span><br><span class="line">lst.push_back(40);</span><br><span class="line"></span><br><span class="line">printList(lst);</span><br><span class="line"></span><br><span class="line">list&lt;int&gt;::iterator it = lst.begin();</span><br><span class="line">it++;</span><br><span class="line">it++;</span><br><span class="line">list&lt;int&gt; lst2(it, lst.end());//构造部分区间</span><br><span class="line">printList(lst2);//</span><br><span class="line"></span><br><span class="line">list&lt;int&gt; lst3(lst);</span><br><span class="line">printList(lst3);//</span><br><span class="line"></span><br><span class="line">list&lt;int&gt; lst4(10,1000);</span><br><span class="line">printList(lst4);//</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="list赋值和交换"><a href="#list赋值和交换" class="headerlink" title="list赋值和交换"></a>list赋值和交换</h1>]]></content>
    
    
    <summary type="html">C++学习笔记</summary>
    
    
    
    <category term="C++" scheme="https://goupos.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://goupos.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言算法</title>
    <link href="https://goupos.top/2023/12/19/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95/"/>
    <id>https://goupos.top/2023/12/19/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80%E7%AE%97%E6%B3%95/</id>
    <published>2023-12-19T03:15:03.000Z</published>
    <updated>2023-12-21T09:43:15.339Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>树的算法<br>树结构简介<br>度数（Degree）：每个节点所有子树的个数<br>层数（Level）：树的层数，<br>高度：树的最大层数</p><p>二叉树<br>存储方式：链表。对于n叉树，每个节点度数（子树）都不同，所以必须预留n个链接字段的最大空间，每个节点数据结构如下,浪费空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef node</span><br><span class="line">&#123;</span><br><span class="line">char data;</span><br><span class="line">node * link1;</span><br><span class="line">node * link2;</span><br><span class="line">...</span><br><span class="line">node * linkn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序法</p>]]></content>
    
    
    <summary type="html">C语言算法</summary>
    
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
    <category term="c语言关键字执行顺序" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/c%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/tags/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>QT开发STL</title>
    <link href="https://goupos.top/2023/12/19/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/QT%E5%BC%80%E5%8F%91STL/"/>
    <id>https://goupos.top/2023/12/19/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/QT%E5%BC%80%E5%8F%91STL/</id>
    <published>2023-12-18T16:26:15.000Z</published>
    <updated>2024-01-30T20:26:20.121Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>容器类<br>Qt的容器类比STL（标准模板库）种的容器类更轻巧、安全和易于使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;QString&gt; aList;</span><br><span class="line">aList.append(&quot;Monday&quot;);</span><br><span class="line">aList.append(&quot;uesday&quot;);</span><br><span class="line">aList.append(&quot;Wednesday&quot;);</span><br><span class="line">QString str=aList[0];qDebug()&lt;&lt;str; //显示&quot;Monday&#x27;</span><br></pre></td></tr></table></figure><p>顺序容器通过元素在容器中的位置顺序存储和访问,没有key值概念的<br>关联容器通过键(key)存储和读取元素(有key值和value是同一个值，set的时候，只能看到一个值，这种就不存在关联；其他都有key值，找到value值)<br>Qt的容器类分为顺序容器和关联容器<br>顺序容器:QList（指针），QLinkedList（链表），QVector（），QStack（栈）和QQueue（队列）<br>关联容器QMap，QMultiMap，QHash，QMultiHash和QSet</p><p>QLis:数组列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;QString&gt; list;</span><br><span class="line">list&lt;&lt;&quot;one&quot;&lt;&lt;&quot;two&quot;&lt;&lt;&quot;three&quot;;</span><br><span class="line">QString str1=list[1];//str1 == &quot;two&quot;</span><br><span class="line">QString str0=list.at(0);//str0 == &quot;one&quot;</span><br></pre></td></tr></table></figure><p>QLinkedList: 除了不提供下标索引的数据访问，和QList其他函数接口基本相同<br>QVector : 函数接口与QList几乎完全相同，访问性能更高，因为是连续存储.但是插入和删除不方便</p><p>QStack:LIFO</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QStack&lt;int&gt; stack;</span><br><span class="line">stack.push(10);</span><br><span class="line">stack.push(20);</span><br><span class="line">stack.push(30);</span><br><span class="line">while(!stack.isEmpty())</span><br><span class="line">qDebug()&lt;&lt;stack.pop();</span><br></pre></td></tr></table></figure><p>Queue:FIFO 先进先出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">QQueue&lt;int&gt; queue;</span><br><span class="line">queue.enqueue(10);</span><br><span class="line">queue.enqueue(20);</span><br><span class="line">queue.enqueue(30);</span><br><span class="line">while(!queue.isEmpty())</span><br><span class="line">qDebug()&lt;&lt;queue.dequeue();</span><br></pre></td></tr></table></figure><p>QSet:基于散列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QSet&lt;QString&gt; set;</span><br><span class="line">set&lt;&lt;&quot;dog&quot;&lt;&lt;&quot;cat&quot;&lt;&lt;&quot;tiger&quot;</span><br><span class="line">if(set.contains(&quot;cat&quot;))</span><br><span class="line">qDebug()&lt;&lt;&quot;the set has a cat&quot;;</span><br></pre></td></tr></table></figure><p>QMap:按键值的顺序存储（如果插入重复的值，就忽略，键值是唯一的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QMap&lt;QString,int&gt; map;</span><br><span class="line">map[&quot;one&quot;]=1;//如果不存在就会创建</span><br><span class="line">map[&quot;two&quot;]=2;</span><br><span class="line">map[&quot;three&quot;]=3;</span><br><span class="line">map.insert(&quot;four&quot;,4);</span><br><span class="line">map.remove(&quot;two&quot;);//删除&quot;two&quot;</span><br><span class="line">int num1=map[&quot;one&quot;];</span><br><span class="line">int num2=map.value[&quot;two&quot;];//没有&quot;two&quot;,就给默认值 0</span><br><span class="line">int num3=map[&quot;five&quot;];//没有&quot;five&quot;,就给默认值 0</span><br><span class="line">int timeout=map.value(&quot;TIMEOUT&quot;30);//没有TIMEOUT直接给个30</span><br><span class="line">qDebug()&lt;&lt;num1&lt;&lt;num2&lt;&lt;num3&lt;&lt;timeout;//1 0 0 30</span><br></pre></td></tr></table></figure><p>key:one two three four<br>value: 1 2-&gt;0 3 4</p><p>QMultiMap: QMap的子类，键值可以重复</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QMultiMap&lt;QStringint&gt; map1,map2,map3;</span><br><span class="line">map1.insert(&quot;plenty&quot;,100);</span><br><span class="line">map1.insert(&quot;plenty&quot;,2000);</span><br><span class="line">map2.insert(&quot;plenty&quot;,5000);</span><br><span class="line">map3=map1+map2;//键值可以重复，所以这里map1和map2加在一起给map3</span><br><span class="line">qDebug()&lt;&lt;map3.size();//3</span><br><span class="line">QList&lt;int&gt; values=map3.values(&quot;plenty&quot;);//将plenty的值存储到values数组表中</span><br><span class="line">foreach(int i,values) //values 一个一个放入i中，然后打印出来</span><br><span class="line">qDebug()&lt;&lt;i; //5000 2000 100</span><br></pre></td></tr></table></figure><p>QHash必须提供”&#x3D;&#x3D;”于QMap用法类似，QMultiHash与QMultiMap用法类似</p><p>3.4容器类的迭代<br>迭代器就是为访问容器里面的数据，提供的一种方法。QT有两种迭代器：java类型的迭代器（易于使用）和STL类型的迭代器（效率高）<br>Java类型迭代器</p><html xmlns:v="urn:schemas-microsoft-com:vml"xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:x="urn:schemas-microsoft-com:office:excel"xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=gb2312"><meta name=ProgId content=Excel.Sheet><meta name=Generator content="Microsoft Excel 15"><link id=Main-File rel=Main-File href="../java类型迭代器1.htm"><link rel=File-List href=filelist.xml><link rel=Stylesheet href=stylesheet.css><style><!--table    {mso-displayed-decimal-separator:"\.";    mso-displayed-thousand-separator:"\,";}@page    {margin:.75in .7in .75in .7in;    mso-header-margin:.3in;    mso-footer-margin:.3in;}ruby    {ruby-align:left;}rt    {color:windowtext;    font-size:9.0pt;    font-weight:400;    font-style:normal;    text-decoration:none;    font-family:等线;    mso-generic-font-family:auto;    mso-font-charset:134;    mso-char-type:none;    display:none;}--></style><![if !supportTabStrip]><script language="JavaScript"><!--function fnUpdateTabs() {  if (parent.window.g_iIEVer>=4) {   if (parent.document.readyState=="complete"    && parent.frames['frTabs'].document.readyState=="complete")   parent.fnSetActiveSheet(0);  else   window.setTimeout("fnUpdateTabs();",150); }}<p>if (window.name!&#x3D;”frSheet”)<br> window.location.replace(“..&#x2F;java类型迭代器1.htm”);<br>else<br> fnUpdateTabs();<br>&#x2F;&#x2F;–&gt;<br></script><br>&lt;![endif]&gt;</p></head><body link="#0563C1" vlink="#954F72"><table border=0 cellpadding=0 cellspacing=0 width=1097 style='border-collapse: collapse;table-layout:fixed;width:823pt'> <col width=450 style='mso-width-source:userset;mso-width-alt:14400;width:338pt'> <col width=292 style='mso-width-source:userset;mso-width-alt:9344;width:219pt'> <col width=355 style='mso-width-source:userset;mso-width-alt:11360;width:266pt'> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 width=450 style='height:23.25pt;width:338pt'><font  class="font6">容器类</font></td>  <td class=xl65 width=292 style='border-left:none;width:219pt'><font  class="font6">只读迭代器</font></td>  <td class=xl65 width=355 style='border-left:none;width:266pt'><font  class="font6">读写迭代器</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>QList&lt;T&gt;<font  class="font6">、</font><font class="font5">QQueue&lt;T&gt;</font></td>  <td class=xl65 style='border-top:none;border-left:none'>QListlterator&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableListlterator&lt;T&gt;</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>QLinkedList&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QLinkedListlterator&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableLinkedListlterator&lt;T&gt;</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>QVector&lt;T&gt;<font  class="font6">、</font><font class="font5">QStack&lt;T&gt;</font></td>  <td class=xl65 style='border-top:none;border-left:none'>QVectorlterator&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableVectorlterator&lt;T&gt;</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>Qset&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QSetiterator&lt;T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableSetiterator&lt;T&gt;</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>QMap&lt;Key,T&gt;<font  class="font6">、</font><font class="font5">QMultiMap&lt;Key,T&gt;</font></td>  <td class=xl65 style='border-top:none;border-left:none'>QMaplterator&lt;Key,T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableMaplterator&lt;Key,T&gt;</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt;border-top:none'>Qhash&lt;Key,T&gt;<font  class="font6">、</font><font class="font5">QMultiHash&lt;Key,T&gt;</font></td>  <td class=xl65 style='border-top:none;border-left:none'>QHashlterator&lt;Key,T&gt;</td>  <td class=xl65 style='border-top:none;border-left:none'>QMutableHashlterator&lt;Key,T&gt;</td> </tr> <![if supportMisalignedColumns]> <tr height=0 style='display:none'>  <td width=450 style='width:338pt'></td>  <td width=292 style='width:219pt'></td>  <td width=355 style='width:266pt'></td> </tr> <![endif]></table></body></html><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;QString&gt; list;</span><br><span class="line">......</span><br><span class="line">QListIterator&lt;QString&gt; i(list);</span><br><span class="line">while(i.hasNext())//判断在迭代器指针后面是否还有数据项 必须配合使用</span><br><span class="line">&#123;</span><br><span class="line">qDebug()&lt;&lt;i.next();//跳过一个数据项，并返回其值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反向遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QListIterator&lt;QString&gt; i(list);</span><br><span class="line">while(i.hasPrevious())//判断前面是否有元素</span><br><span class="line">&#123;</span><br><span class="line">qDebug&lt;&lt; i.previous();//跳过当前元素，并返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><html xmlns:v="urn:schemas-microsoft-com:vml"xmlns:o="urn:schemas-microsoft-com:office:office"xmlns:x="urn:schemas-microsoft-com:office:excel"xmlns="http://www.w3.org/TR/REC-html40"><head><meta http-equiv=Content-Type content="text/html; charset=gb2312"><meta name=ProgId content=Excel.Sheet><meta name=Generator content="Microsoft Excel 15"><link id=Main-File rel=Main-File href="../常用功能函数.htm"><link rel=File-List href=filelist.xml><link rel=Stylesheet href=stylesheet.css><style><!--table    {mso-displayed-decimal-separator:"\.";    mso-displayed-thousand-separator:"\,";}@page    {margin:.75in .7in .75in .7in;    mso-header-margin:.3in;    mso-footer-margin:.3in;}ruby    {ruby-align:left;}rt    {color:windowtext;    font-size:9.0pt;    font-weight:400;    font-style:normal;    text-decoration:none;    font-family:等线;    mso-generic-font-family:auto;    mso-font-charset:134;    mso-char-type:none;    display:none;}--></style><![if !supportTabStrip]><script language="JavaScript"><!--function fnUpdateTabs() {  if (parent.window.g_iIEVer>=4) {   if (parent.document.readyState=="complete"    && parent.frames['frTabs'].document.readyState=="complete")   parent.fnSetActiveSheet(0);  else   window.setTimeout("fnUpdateTabs();",150); }}<p>if (window.name!&#x3D;”frSheet”)<br> window.location.replace(“..&#x2F;常用功能函数.htm”);<br>else<br> fnUpdateTabs();<br>&#x2F;&#x2F;–&gt;<br></script><br>&lt;![endif]&gt;</p></head><body link="#0563C1" vlink="#954F72"><table border=0 cellpadding=0 cellspacing=0 width=894 style='border-collapse: collapse;table-layout:fixed;width:670pt'> <col width=275 style='mso-width-source:userset;mso-width-alt:8800;width:206pt'> <col width=619 style='mso-width-source:userset;mso-width-alt:19808;width:464pt'> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 width=275 style='height:23.25pt;width:206pt'><font  class="font6">常用函数</font></td>  <td class=xl65 width=619 style='width:464pt'><font class="font6">功能</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>void toFront()</td>  <td class=xl66>迭代器移动到列表的最前面（第一个数据项之前）</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>void toBack()</td>  <td class=xl66>迭代器移动到列表的最后面（最后一个数据项之后）</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>bool hasNext()</td>  <td class=xl67><font class="font8">如果迭代器不是位于列表最后位置，返回</font><font  class="font7">true</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>const T&amp; next()</td>  <td class=xl66>返回下一个数据项，并且迭代器后移一个位置</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>const T&amp;peekNext()</td>  <td class=xl66>返回下一个数据项，但是不移动迭代器位置</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>bool hasPrevious()</td>  <td class=xl67><font class="font8">如果迭代器不是位于列表最前面，返回</font><font class="font7">true</font></td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>const T&amp; previous()</td>  <td class=xl66>返回前一个数据项，并且迭代器前移一个位置</td> </tr> <tr height=31 style='height:23.25pt'>  <td height=31 class=xl65 style='height:23.25pt'>const T&amp; peekPrevious()</td>  <td class=xl66>返回前一个数据项，但是不移动迭代器指针</td> </tr> <![if supportMisalignedColumns]> <tr height=0 style='display:none'>  <td width=275 style='width:206pt'></td>  <td width=619 style='width:464pt'></td> </tr> <![endif]></table></body></html><p>&#x2F;&#x2F;删除奇数项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">QList&lt;int&gt; list;</span><br><span class="line">list&lt;&lt;1&lt;&lt;2&lt;&lt;3&lt;&lt;4&lt;&lt;5；</span><br><span class="line">QMutableListIterator&lt;int&gt; i(list);</span><br><span class="line"></span><br><span class="line">whie(i.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">    if(i.next() % 2 != 0)</span><br><span class="line">    &#123;</span><br><span class="line">        i.remove();//remove()函数移除next()函数刚刚跳过的一个数据项，不会是迭代器失效。setValue()函数可以修改刚刚跳过去的数据项的值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器内数据： 2 4；</p><p>关联容器类的迭代器的使用<br>具有上表所示的所有函数，主要是增加了key()和value()函数用于获取刚刚跳过的数据项的键和值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">QT开发</summary>
    
    
    
    <category term="QT" scheme="https://goupos.top/categories/QT/"/>
    
    
    <category term="QT" scheme="https://goupos.top/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>C++的STL容器</title>
    <link href="https://goupos.top/2023/12/18/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E7%9A%84STL%E5%AE%B9%E5%99%A8/"/>
    <id>https://goupos.top/2023/12/18/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E7%9A%84STL%E5%AE%B9%E5%99%A8/</id>
    <published>2023-12-18T04:30:20.000Z</published>
    <updated>2024-01-07T17:41:12.171Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="STL：标准模板库"><a href="#STL：标准模板库" class="headerlink" title="STL：标准模板库"></a>STL：标准模板库</h1><p>STL分为：容器、算法、迭代器<br>STL六大组件：容器、算法、迭代器、仿函数、适配器（配接器）、空间配置器</p><p>1.容器: 各种数据结构，如vector、list、deque、set、map等,用来存放数据<br>2.算法: 各种常用的算法，如sort、find、copy、for_each等<br>3.迭代器: 扮演了容器与算法之间的胶合剂。<br>4.仿函数: 行为类似函数，可作为算法的某种策略<br>5.适配器:一种用来修饰容器或者仿函数或迭代器接口的东西<br>6.空间配置器:负责空间的配置与管理</p><p>序列式容器:强调值的排序，序列式容器中的每个元素均有固定的位置<br>关联式容器:二叉树结构，各元素之间没有严格的物理上的顺序关系</p><h1 id="迭代器种类"><a href="#迭代器种类" class="headerlink" title="迭代器种类"></a>迭代器种类</h1><p>vector容器、存放内置数据类型（理解为数组）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;//标准算法头文件</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void Myprint(int val)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;line:&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;  value:&quot; &lt;&lt; val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//vector容器</span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">//创建了一个vector容器，数组</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"></span><br><span class="line">//向容器中插入数据</span><br><span class="line">v.push_back(10);</span><br><span class="line">v.push_back(20);</span><br><span class="line">v.push_back(30);</span><br><span class="line">v.push_back(40);</span><br><span class="line"></span><br><span class="line">//通过迭代器访问容器中的数据</span><br><span class="line">vector&lt;int&gt;::iterator itbegin = v.begin();//起始迭代器，指向容器中第一个元素</span><br><span class="line">vector&lt;int&gt;::iterator itend = v.end();//结束迭代器，指向容器中最后一个元素的下一个位置</span><br><span class="line"></span><br><span class="line">for (; itbegin &lt; itend; itbegin++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;line:&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;  value:&quot; &lt;&lt; *itbegin &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第二种迭代器</span><br><span class="line">for (vector&lt;int&gt;::iterator itbegin = v.begin(); itbegin&lt; v.end(); itbegin++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;line:&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;  value:&quot; &lt;&lt; *itbegin &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第三种迭代器</span><br><span class="line">for_each(v.begin(), v.end(), Myprint);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-容器中存放自定义数据类型"><a href="#vector-容器中存放自定义数据类型" class="headerlink" title="vector 容器中存放自定义数据类型"></a>vector 容器中存放自定义数据类型</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//vector 容器中存放自定义数据类型</span><br><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Person(string Name, int Age) :m_Name(Name), m_Age(Age)</span><br><span class="line">&#123;&#125;</span><br><span class="line">~Person()</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">string m_Name;</span><br><span class="line">int m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person&gt; v;</span><br><span class="line"></span><br><span class="line">Person P1(&quot;P1&quot;,10);</span><br><span class="line">Person P2(&quot;P2&quot;, 11);</span><br><span class="line">Person P3(&quot;P3&quot;, 12);</span><br><span class="line">Person P4(&quot;P4&quot;, 13);</span><br><span class="line">Person P5(&quot;P5&quot;, 14);</span><br><span class="line"></span><br><span class="line">//向容器中添加数据</span><br><span class="line">v.push_back(P1);</span><br><span class="line">v.push_back(P2);</span><br><span class="line">v.push_back(P3);</span><br><span class="line">v.push_back(P4);</span><br><span class="line">v.push_back(P5);</span><br><span class="line">//遍历容器中数据 it指向一个Person的指针</span><br><span class="line">for (vector&lt;Person&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">//cout &lt;&lt; &quot;name:&quot; &lt;&lt; (*it).m_Name &lt;&lt; &quot;  age:&quot; &lt;&lt; (*it).m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;name:&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;  age:&quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//存放自定义数据类型的指针</span><br><span class="line">void test02(void)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;Person*&gt; v;</span><br><span class="line"></span><br><span class="line">Person P1(&quot;P1&quot;, 10);</span><br><span class="line">Person P2(&quot;P2&quot;, 11);</span><br><span class="line">Person P3(&quot;P3&quot;, 12);</span><br><span class="line">Person P4(&quot;P4&quot;, 13);</span><br><span class="line">Person P5(&quot;P5&quot;, 14);</span><br><span class="line"></span><br><span class="line">//向容器中添加数据</span><br><span class="line">v.push_back(&amp;P1);</span><br><span class="line">v.push_back(&amp;P2);</span><br><span class="line">v.push_back(&amp;P3);</span><br><span class="line">v.push_back(&amp;P4);</span><br><span class="line">v.push_back(&amp;P5);</span><br><span class="line"></span><br><span class="line">//遍历容器中数据 iterator it解引用</span><br><span class="line">for (vector&lt;Person*&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">Person* p = (*it);</span><br><span class="line">//it -&gt; Person* it_TEMP = &amp;P1;</span><br><span class="line">//cout &lt;&lt; &quot;name:&quot; &lt;&lt; (*(*it)).m_Name &lt;&lt; &quot;  age:&quot; &lt;&lt; (*(*it)).m_Age &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;name:&quot; &lt;&lt; (*it)-&gt;m_Name &lt;&lt; &quot;  age:&quot; &lt;&lt; (*it)-&gt;m_Age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arv, char ** arg)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-容器嵌套容器"><a href="#vector-容器嵌套容器" class="headerlink" title="vector 容器嵌套容器"></a>vector 容器嵌套容器</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//容器嵌套容器</span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;vector&lt;int&gt;&gt; vv;</span><br><span class="line">//创建小容器</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">vector&lt;int&gt; v2;</span><br><span class="line">vector&lt;int&gt; v3;</span><br><span class="line">vector&lt;int&gt; v4;</span><br><span class="line">//向小容器中添加数据</span><br><span class="line">for (size_t i = 0; i &lt; 4; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back((i + 1) * 10);</span><br><span class="line">v2.push_back((i + 1) * 100);</span><br><span class="line">v3.push_back((i + 1) * 1000);</span><br><span class="line">v4.push_back((i + 1) * 10000);</span><br><span class="line">&#125;</span><br><span class="line">//小容器插入到大容器中</span><br><span class="line">vv.push_back(v1);</span><br><span class="line">vv.push_back(v2);</span><br><span class="line">vv.push_back(v3);</span><br><span class="line">vv.push_back(v4);</span><br><span class="line"></span><br><span class="line">//通过大容器，把所有数据遍历一遍</span><br><span class="line">for (vector&lt;vector&lt;int&gt;&gt;::iterator it = vv.begin(); it != vv.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">//(*it)的值是一个 vector&lt;int&gt; 容器</span><br><span class="line">cout &lt;&lt; &quot;value:&quot;;</span><br><span class="line">for (vector&lt;int&gt;::iterator itt = (*it).begin();itt != (*it).end();itt++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (*itt) &lt;&lt; &quot;\t\t&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arv, char ** arg)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-容器-构造函数"><a href="#string-容器-构造函数" class="headerlink" title="string 容器 构造函数"></a>string 容器 构造函数</h1><p>可以理解为字符串使用，本质是一个类,提供了很多的功能函数<br>构造函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string();//创建一个空的字符串 string str;</span><br><span class="line">string(const char * s);//使用字符串s初始化</span><br><span class="line">string(const string &amp;str);//用一个string对象创建另一个string对象</span><br><span class="line">string(int n,char c);//使用n个字符c初始化</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//string的构造函数</span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">char str[] = &#123; &quot;hello world&quot; &#125;;</span><br><span class="line">string s1;</span><br><span class="line">string s2(str);</span><br><span class="line">cout &lt;&lt; &quot;s2:&quot; &lt;&lt; s2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string s3(s2);</span><br><span class="line">cout &lt;&lt; &quot;s3:&quot; &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string s4(10, &#x27;a&#x27;);</span><br><span class="line">cout &lt;&lt; &quot;s4:&quot; &lt;&lt; s4 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arg,char** arv)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-赋值操作"><a href="#string-赋值操作" class="headerlink" title="string 赋值操作"></a>string 赋值操作</h1><p>给string字符串进行赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string&amp; operator=(const char*s);//char*类型字符串复制给当前的字符串</span><br><span class="line">string&amp; operator=(const string&amp;s);//把字符串s赋给当前的字符串</span><br><span class="line">string&amp; operator=(char c);//字符赋值给当前的字符串</span><br><span class="line">string&amp; assign(const char *s);//把字符串s赋值给当前的字符串</span><br><span class="line">string&amp; assign(const char *s，int n);//把字符串s的前n个字符赋值给当前的字符串</span><br><span class="line">string&amp; assign(const string &amp;s);//把字符串s赋值给当前的字符串</span><br><span class="line">string&amp; assign(int n,char c);//用n个字符c赋值给当前字符串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str1;</span><br><span class="line">str1 = &quot;hello world&quot;;</span><br><span class="line">cout &lt;&lt; &quot;str1=&quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2;</span><br><span class="line">str2 = str1;</span><br><span class="line">cout &lt;&lt; &quot;str2=&quot; &lt;&lt; str2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str3;</span><br><span class="line">str3 = &#x27;a&#x27;;</span><br><span class="line">cout &lt;&lt; &quot;str3=&quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str4;</span><br><span class="line">str4.assign(&quot;hello C++&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str4=&quot; &lt;&lt; str4 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str5;</span><br><span class="line">str5.assign(&quot;hello C++&quot;,6);</span><br><span class="line">cout &lt;&lt; &quot;str5=&quot; &lt;&lt; str5 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str6;</span><br><span class="line">str6.assign(str4);</span><br><span class="line">cout &lt;&lt; &quot;str6=&quot; &lt;&lt; str6 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str7;</span><br><span class="line">str7.assign(50, &#x27;c&#x27;);</span><br><span class="line">cout &lt;&lt; &quot;str7=&quot; &lt;&lt; str7 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arv, char ** arg)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般 <code>=</code>赋值用的多</p><h1 id="string字符串拼接"><a href="#string字符串拼接" class="headerlink" title="string字符串拼接"></a>string字符串拼接</h1><p>实现在字符串末尾拼接字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string &amp;operator +=(const char *str);//重载+=操作符,str字符串连接到当前字符串结尾</span><br><span class="line">string &amp;operator +=(const char c);//重载+=操作符,c字符连接到当前字符串结尾</span><br><span class="line">string &amp;operator +=(const string &amp;str);//重载+=操作符,str字符串连接到当前字符串结尾</span><br><span class="line">string &amp;append(const char *s);//把字符串s连接到当前字符串结尾</span><br><span class="line">string &amp;append(const char *s，int n);//把字符串s的前n个字符连接到当前字符串结尾</span><br><span class="line">string &amp;append(const string &amp;s);//把字符串s连接到当前字符串结尾,string &amp;operator +=(const string &amp;str)</span><br><span class="line">string &amp;append(const string &amp;s,int pos ,int n);//字符串s中从pos开始的后n个字符连接到字符串结尾</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str1(&quot;我&quot;);</span><br><span class="line">str1 += &quot;爱美女&quot;;</span><br><span class="line">cout &lt;&lt; &quot;str1=&quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str1 += &#x27;:&#x27;;</span><br><span class="line">cout &lt;&lt; &quot;str1=&quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str2(&quot;xxxx&quot;);</span><br><span class="line">str1 += str2;</span><br><span class="line">cout &lt;&lt; &quot;str1=&quot; &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">string str3(&quot;I&quot;);</span><br><span class="line">str3.append(&quot; love&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str3=&quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str3.append(&quot; beautiful women: abcdef&quot;,17);</span><br><span class="line">cout &lt;&lt; &quot;str3=&quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//str3.append(str2);</span><br><span class="line">//cout &lt;&lt; &quot;str3=&quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str3.append(str2,0,2);</span><br><span class="line">cout &lt;&lt; &quot;str3=&quot; &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arv, char ** arg)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-查找和替换"><a href="#string-查找和替换" class="headerlink" title="string 查找和替换"></a>string 查找和替换</h1><p>查找：查找指定字符串是否存在<br>替换：在指定的位置替换字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int find(const string &amp;str ,int pos = 0)const;//查找str第一次出现位置，从pos开始查找</span><br><span class="line">int find(const char *s ,int pos= 0)const;//查找s第一次出现的位置，从pos开始查找</span><br><span class="line">int find(const char *s,int pos,int n)const;//从pos位置查找s的前n个字符第一次位置</span><br><span class="line">int find(const char c,int pos = 0)const;//查找字符c第一次出现的位置，从pos开始查找</span><br><span class="line">int rfind(const string&amp;str,int pos=npos)const;//查找str最后一次位置，从pos开始查找</span><br><span class="line">int rfind(const char *s ,int pos=npos)const;//查找s最后一次出现的位置，从pos开始查找</span><br><span class="line">int rfind(const char *s,int pos,int n)const;//从pos位置查找s的前n个字符最后一次位置</span><br><span class="line">int rfind(const char c,int pos =npos)const;//查找字符c最后一次出现的位置，从pos开始查找</span><br><span class="line">string &amp;replace(int pos ,int n,const string&amp;str);//替换从pos开始n个字符为字符串str</span><br><span class="line">string &amp;replace(int pos ,int n,const char *s);//替换从pos开始n个字符为字符串s</span><br></pre></td></tr></table></figure><p>字符在查找时候，我们是有一个起始的下标，指定开始从那开始查起<br>find与rfind区别<br>查到字符串：返回查找到字符串的首地址，否则返回-1<br>find查找是从左往右查找，如果指定位置，则从指定位置处往后查找； rfind是从右往左查找，如果指定位置，则从指定位置处往前查找</p><p>替换</p><p>如果替换字符长度在最后，会把需要替换的字符，合并到一起<br>replace在替换时，要指定从那个位置起（pos），多少个字符(n)，替换成什么样的字符串（str || s）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str1 = &quot;abcdefghidede&quot;;</span><br><span class="line">int pos = str1.find(&quot;de&quot;,0);//查到字符串：返回查找到字符串的首地址，否则返回-1</span><br><span class="line">if (pos == -1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到字符串&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到字符串，pos = &quot; &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//find与rfind区别</span><br><span class="line">//find查找是从左往右查找，rfind是从右往左查找</span><br><span class="line">pos = str1.rfind(&quot;de&quot;,9);</span><br><span class="line">if (pos == -1)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;未找到字符串&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;找到字符串，pos = &quot; &lt;&lt; pos &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test02(void)</span><br><span class="line">&#123;</span><br><span class="line">string str1 = &quot;abcdefg&quot;;</span><br><span class="line">//从1号位置起3个字符替换为“1111”</span><br><span class="line">str1.replace(1,3,&quot;1111&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str1 char * = &quot; &lt;&lt; str1 &lt;&lt; endl;//str1 char * = a1111efg</span><br><span class="line"></span><br><span class="line">string str2 = &quot;123456&quot;;</span><br><span class="line">str1.replace(str1.rfind(&#x27;g&#x27;,str1.size()),str2.size(),str2);</span><br><span class="line">//用str2替换g位置的数据，</span><br><span class="line">cout &lt;&lt; &quot;str1 string = &quot; &lt;&lt; str1 &lt;&lt; endl;//str1 string = a1111ef123456</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arg, char**arv)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-字符串的比较"><a href="#string-字符串的比较" class="headerlink" title="string 字符串的比较"></a>string 字符串的比较</h1><p>字符串之间的比较，两个字符串相等 返回0 ，第一个字符串大于第二个字符串 返回1 ，第二个字符串大于第一个字符串 返回-1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int compare(const string &amp;s) const;//与字符串s比较</span><br><span class="line">int compare(const char *s) const;//与字符串s比较</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str1 = &quot;xello&quot;;</span><br><span class="line">string str2 = &quot;hello&quot;;</span><br><span class="line"></span><br><span class="line">int compare = str1.compare(str2);</span><br><span class="line"></span><br><span class="line">switch (compare)</span><br><span class="line">&#123;</span><br><span class="line">case 0:</span><br><span class="line">cout &lt;&lt; &quot;str1 == str2&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case 1:</span><br><span class="line">cout &lt;&lt; &quot;str1 &gt; str2&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">case -1:</span><br><span class="line">cout &lt;&lt; &quot;str1 &lt; str2&quot; &lt;&lt; endl;</span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arg, char **arv)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-字符存取"><a href="#string-字符存取" class="headerlink" title="string 字符存取"></a>string 字符存取</h1><p>string 中单个字符存存取方式有两种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char &amp; operator[](int n);//通过[]方式取字符</span><br><span class="line">char &amp;at(int n);//通过at方法获取字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str = &quot;hello&quot;;</span><br><span class="line">//</span><br><span class="line">//通过[] 访问单个字符</span><br><span class="line">for (int i = 0; i &lt; str.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str[i] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for (int i = 0; i &lt; str.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; str.at(i) &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//修改单个字符</span><br><span class="line">str[0] = &#x27;x&#x27;;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;//xello</span><br><span class="line">str.at(1) = &#x27;x&#x27;;</span><br><span class="line">cout &lt;&lt; str &lt;&lt; endl;//xxllo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arg, char **arv)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string-插入和删除"><a href="#string-插入和删除" class="headerlink" title="string 插入和删除"></a>string 插入和删除</h1><p>string 字符串进行插入和删除字符操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string &amp;insert(int pos const char *s);//插入字符串</span><br><span class="line">string &amp;insert(int pos ,string &amp;str);//插入字符串</span><br><span class="line">string &amp;insert(int pos ,int n,char c);//在指定位置插入n个字符c</span><br><span class="line">string %erase(int pos ,int n = npos);//删除从pos开始的n个字符</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str = &quot;hello&quot;;</span><br><span class="line">//插入</span><br><span class="line">str.insert(1, &quot;111&quot;);</span><br><span class="line">cout &lt;&lt; &quot;str = &quot; &lt;&lt; str &lt;&lt; endl;//str = h111ello</span><br><span class="line">//删除</span><br><span class="line">str.erase(1, 3);</span><br><span class="line">cout &lt;&lt; &quot;str = &quot; &lt;&lt; str &lt;&lt; endl;//str = hello</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arg, char **arv)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="string子串"><a href="#string子串" class="headerlink" title="string子串"></a>string子串</h1><p>从字符串中获取想要的子串，使用子串可以获取到有用信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string &amp;substr(int pos = 0, int n = npos) const;//返回由pos开始的n个字符组成的字符串</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">string str = &quot;hello&quot;;</span><br><span class="line">string substr = str.substr(1, 3);</span><br><span class="line">cout &lt;&lt; &quot;substr = &quot; &lt;&lt; substr &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//实用操作</span><br><span class="line">void test02(void)</span><br><span class="line">&#123;</span><br><span class="line">string email = &quot;zhangsan@sina.com&quot;;</span><br><span class="line">//从邮件地址中获取用户名信息</span><br><span class="line">int pos = email.find(&#x27;@&#x27;, 0);</span><br><span class="line">//获取用户名称</span><br><span class="line">string userName = email.substr(0, pos);</span><br><span class="line">cout &lt;&lt; &quot;userName = &quot; &lt;&lt; userName &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int arv, char **arg)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-容器-最常见的容器之一"><a href="#vector-容器-最常见的容器之一" class="headerlink" title="vector 容器 最常见的容器之一"></a>vector 容器 最常见的容器之一</h1><p>vector 数据结构和数组非常相似，也称为单端数组</p><p>vector 与普通数组区别：<br>不同之处在于数组是静态空间，而vector可以动态扩展<br>动态扩展：并不是在原空间之后续接新空间，而是找到更大的内存空间，然后将原数据拷贝新空间，释放原空间</p><p>vector 容器不会在前端插入数据，都是在尾部插入或删除数据 pusb_back pop_back<br>front()&#x2F;&#x2F;第一个元素<br>back()&#x2F;&#x2F;最后一个元素<br>常用的迭代器 begin() end()(指向最后一个元素的下一个位置)<br>rbegin:指向倒数第一个元素,rend()指向第一个元素的前一个位置 </p><p>vector 容器的迭代器是支持随机访问</p><h1 id="vector-构造函数"><a href="#vector-构造函数" class="headerlink" title="vector 构造函数"></a>vector 构造函数</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;T&gt; V;//采用模板实现类实现，默认构造函数</span><br><span class="line">vector(v.begin(),v.end());//将v的begin()起始地址，到end()前一个地址数据拷贝给本身</span><br><span class="line">vector(n,elem);//构造函数将n个elem拷贝给本身,构造函数</span><br><span class="line">vector(const vector &amp;vec);//拷贝构造函数</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void test02(T begin,T end)</span><br><span class="line">&#123;</span><br><span class="line">for (T it = begin; it &lt; end; it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printVector(vector&lt;int&gt;&amp; v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line"></span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">vector&lt;int &gt; v2(v1.begin(), v1.end() - 3);</span><br><span class="line">printVector(v2);</span><br><span class="line">test02(v2.begin(),v2.end());</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v3(10, 100);</span><br><span class="line">test02(v3.begin(), v3.end());</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v4(v3);</span><br><span class="line">test02(v4.begin(), v4.end());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#vector 赋值操作<br>给vector容器进行赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector &amp;operator=(const vector &amp;vec);//重载等号操作符(最简单的赋值方式)</span><br><span class="line">assign(beg,end);//将[beg,end)区间中的数据拷贝赋值给本身</span><br><span class="line">assign(n,elem);//将n个elem拷贝赋值给本身</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;iterator&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printVector(vector&lt;int&gt; &amp; v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v2 = v1;</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v3;</span><br><span class="line">v3.assign(v1.begin(), v1.end() - 3);</span><br><span class="line">printVector(v3);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v4;</span><br><span class="line">v4.assign(10, 10);</span><br><span class="line">printVector(v4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-容量和大小"><a href="#vector-容量和大小" class="headerlink" title="vector 容量和大小"></a>vector 容量和大小</h1><p>对vector容器的容量和大小操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">empty();//判断容器是否为空 返回true表示容器为空，fasle表示容器不为空</span><br><span class="line">capacity();//容器的容量</span><br><span class="line">size();//返回容器中元素的个数 （capacity &gt;= size）</span><br><span class="line">resize(int num);//重新指定容器的长度为num,若容器变长，则以默认值填充新位置。</span><br><span class="line">//如果容器变短，则末尾超出容器长度的元素被删除。</span><br><span class="line">resize(int num,elem);//重新指定容器的长度为num,若容器变长，则以elem值填充新位置</span><br><span class="line">//如果容器变短，则末尾超出容器长度的元素被删除。</span><br></pre></td></tr></table></figure><p>容器容量一定大于或等于元素个数，元素个数可能是不是满的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printVector(vector&lt;int&gt; &amp; v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">if (v1.empty())//为真 代表容器为空</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;v1 容器为空&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;v1 容器不为空&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1的容量为: &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1元素个数: &quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//重新指定大小</span><br><span class="line">v1.resize(15);</span><br><span class="line">printVector(v1);//0 1 2 3 4 5 6 7 8 9 0 0 0 0 0</span><br><span class="line">//如果重新指定比的比原来长了，新增加的位置使用默认值0填充新的位置</span><br><span class="line">cout &lt;&lt; &quot;v1的容量为: &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1元素个数: &quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v1.resize(20,100);//指定默认填充值</span><br><span class="line">printVector(v1);//0 1 2 3 4 5 6 7 8 9 0 0 0 0 0 100 100 100 100 100</span><br><span class="line">//如果重新指定比的比原来长了，新增加的位置使用指定的值填充新的位置</span><br><span class="line">cout &lt;&lt; &quot;v1的容量为: &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1元素个数: &quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v1.resize(5);//如果重新指定的长度比原来短了，超出部分会删除掉</span><br><span class="line">printVector(v1);//0 1 2 3 4</span><br><span class="line">cout &lt;&lt; &quot;v1的容量为: &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v1元素个数: &quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-插入和删除"><a href="#vector-插入和删除" class="headerlink" title="vector 插入和删除"></a>vector 插入和删除</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push_back(ele);//尾部插入元素ele</span><br><span class="line">pop_back();//删除最后一个元素</span><br><span class="line">insert(const_iterator pos,ele);//迭代器指向位置pos插入元素ele</span><br><span class="line">insert(const_iterator pos,int count,ele);//迭代器指向位置pos插入count个元素ele</span><br><span class="line">erase(const_iterator pos);//删除迭代器指向的元素</span><br><span class="line">erase(const_iterator start,const_iterator end);//删除迭代器从start到end之间的元素,删除包含其实地址，不包含结束地址区域数据</span><br><span class="line">clear();//删除容器中的所有元素</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printVector(vector&lt;int&gt; &amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot;  &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01(void)</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line"></span><br><span class="line">v1.push_back(10);</span><br><span class="line">v1.push_back(20);</span><br><span class="line">v1.push_back(30);</span><br><span class="line">v1.push_back(40);</span><br><span class="line">v1.push_back(50);</span><br><span class="line"></span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.pop_back();</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.insert(v1.begin() + 2, 100);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.insert(v1.begin() + 2, 3,0xFF);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.erase(v1.begin() + 2);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">v1.erase(v1.begin() + 2, v1.begin() + 5);</span><br><span class="line">printVector(v1);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;clear&quot; &lt;&lt; endl;</span><br><span class="line">v1.clear();</span><br><span class="line">printVector(v1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector-数据存取"><a href="#vector-数据存取" class="headerlink" title="vector 数据存取"></a>vector 数据存取</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">at(int idx);//返回索引idx所指的数据</span><br><span class="line">operator[];//返回索引idx所指的数据</span><br><span class="line">front();//返回容器中第一个数据元素</span><br><span class="line">back();//返回容器中最后一个数据元素</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (size_t i = 0; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1[i] &lt;&lt; &quot;  &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for (size_t i = 0; i &lt; v1.size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; v1.at(i) &lt;&lt; &quot;  &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;返回第一个元素：&quot; &lt;&lt; v1.front() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;返回最后一个元素：&quot; &lt;&lt; v1.back() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="vector互换容器"><a href="#vector互换容器" class="headerlink" title="vector互换容器"></a>vector互换容器</h1><p>实现两个容器内元素进行互换<br>巧用swap可以收缩内存空间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swap(vec);//将vec与本身的元素互换</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void printVector(vector&lt;int&gt; &amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot;\t&quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">vector&lt;int&gt; v2;</span><br><span class="line">for (size_t i = 0; i &lt; 10; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">v2.push_back(9-i);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;v1 与 v2数据交换前&quot; &lt;&lt; endl;</span><br><span class="line">printVector(v1);</span><br><span class="line">printVector(v2);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;v1 与 v2数据交换后&quot; &lt;&lt; endl;</span><br><span class="line">v1.swap(v2);</span><br><span class="line">printVector(v1);</span><br><span class="line">printVector(v2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//实际用途</span><br><span class="line">//巧用swap可以收缩内存空间</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line">for (size_t i = 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">v.resize(3);//重新指定大小，容量不变 现在是容量很大，但是没有使用</span><br><span class="line">cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//巧用swap收缩内存</span><br><span class="line">vector&lt;int&gt;(v).swap(v);</span><br><span class="line">//vector&lt;int&gt;(v) </span><br><span class="line">//这里是一部分，这里叫做匿名对象，相当用v构造了一个新的对象\</span><br><span class="line">（相当于调用了拷贝构造函数，将v中的数据拷贝到匿名对象中），新对象名字是匿名的，没有名字；\</span><br><span class="line">按照v来给匿名对象进行初始化操作，会按照v所用的元素个数来初始化匿名对象元素个数</span><br><span class="line">//.swap(v)</span><br><span class="line">//相当于匿名对象调用了交换函数，然后他们的数据空间，互相指向对方，这样子就交换完成了。内存也收缩了，\</span><br><span class="line">匿名对象空间指会在函数结束后，进行释放空间，这里系统进行了操作</span><br><span class="line">cout &lt;&lt; &quot;v的容量为：&quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;v的大小：&quot; &lt;&lt; v.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">test02();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swap可以使两个容器互换，可以达到实用的收缩内存效果</p><h1 id="vector-预留空间"><a href="#vector-预留空间" class="headerlink" title="vector 预留空间"></a>vector 预留空间</h1><p>减少vector在动态扩展容量时的扩展次数,就是一开始就分配这么大的一个空间出来，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reserve(int len);//容器预留len个元素长度，预留位置不初始化，元素不可访问</span><br></pre></td></tr></table></figure><p>预留你指定的长度，但是预留空间是没有数据的，只是分配内存，未初始化内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v;</span><br><span class="line"></span><br><span class="line">int num = 0;//统计开辟次数</span><br><span class="line">int *p = NULL;</span><br><span class="line"></span><br><span class="line">for (size_t i = 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(i);</span><br><span class="line">if (p != &amp;v[0])</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;v[0];</span><br><span class="line">num++;</span><br><span class="line">cout &lt;&lt; &quot;v.capacity = &quot; &lt;&lt; v.capacity() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;v动态扩展次数:&quot; &lt;&lt; num &lt;&lt; endl;//分配30次，每次扩展1.5倍</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">v1.reserve(30000);</span><br><span class="line">num = 0;</span><br><span class="line">for (size_t i = 0; i &lt; 100000; i++)</span><br><span class="line">&#123;</span><br><span class="line">v1.push_back(i);</span><br><span class="line">if (p != &amp;v1[0])</span><br><span class="line">&#123;</span><br><span class="line">p = &amp;v1[0];</span><br><span class="line">num++;</span><br><span class="line">cout &lt;&lt; &quot;v1.capacity = &quot; &lt;&lt; v1.capacity() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;v1动态扩展次数:&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果数据量较大，可以一开始利用reserve预留空间</p>]]></content>
    
    
    <summary type="html">C++学习笔记</summary>
    
    
    
    <category term="C++" scheme="https://goupos.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://goupos.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>32位ARM芯片开发注意事项</title>
    <link href="https://goupos.top/2023/12/14/32%E4%BD%8DARM%E8%8A%AF%E7%89%87%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://goupos.top/2023/12/14/32%E4%BD%8DARM%E8%8A%AF%E7%89%87%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-12-14T03:00:31.000Z</published>
    <updated>2023-12-27T00:58:53.119Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>DMA配合串口传输数据相关问题<br>1.配置好传输数据数量和足够的时间，可能DMA无法传完成数据，导致下一次无法传输数据或错误数据，无法继续配置和传输数据<br>解决方法：第一开启错误检测中断，检测到错误，关闭传输，第二是每次传输数据前都可以检测上一次数据是否传输完成，第三是发送数据前，关闭DMA通道这样所有的配置数据可以写入到相关寄存器中</p><p>DMA配合ADC传输数据相关问题</p><p>DMA配合SPI传输数据相关问题</p><p>所有的不需要改动的配置尽量在使能前配置好，</p>]]></content>
    
    
    <summary type="html">32位ARM芯片开发</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>QT开发1</title>
    <link href="https://goupos.top/2023/12/02/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/QT%E5%BC%80%E5%8F%911/"/>
    <id>https://goupos.top/2023/12/02/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/QT/QT%E5%BC%80%E5%8F%911/</id>
    <published>2023-12-02T03:18:32.000Z</published>
    <updated>2024-02-18T17:09:48.658Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>QT Windgets Application: 桌面平台的图形用户界面（GUI）应用程序<br>QT Console Application: 控制台应用程序，一般用于学习C&#x2F;C++<br>Qt Quick Application: 创建可部署的Qt Quick2应用程序。Qt Quick是Qt支持的一套GUI开发架构。采用QML设计界面，程序框架采用C++语言<br>Qt Quick Controls 2 Application: 创建基于Qt Quick Control2组件的可部署的Qt Quick 2 应用程序。<br>Qt Canvas 3D Application: 基于QML语言的界面设计，支持3D画布。</p><p>QMainWindow:主窗口类，具有主菜单、工具栏和状态栏，类似一般程序的主窗口<br>Qwidget:是所有具有可视化界面类的基类，各种界面组件都支持<br>QDialog:对话框类，建立基于对话框的界面</p><p>Action Editor:Action编辑器<br>Signals &amp; Slots Editor:信号与槽</p><p>Widget:Qwidget窗口：从上大小，继承关系（下面的都是派生类）</p><p>信号与槽<br>———————-发送者———–信号———–接受者———–槽———–<br>编写关闭Botton_closeclicked()Widget close()</p><p>很重要必须要看的文件<br>ui_widget.h:<br>ui_mainwindow.h:</p><p>项目中添加资源文件：<code>文件</code> -&gt; <code>新建文件或项目</code> -&gt; <code>QT</code> -&gt;<code>Qt Resource File</code>-&gt;输入名字，创建<code>*.qrc</code>文件<br>在项目中点击 ：<code>open in editor</code>可以打开文件<br><code>*.qrc</code>文件点击<code>Add Prefix</code>创建文件，修改相应的前缀, 点击<code>Add Files</code>添加相关文件</p><p>要在头文件中编写槽函数必须如下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class XXX</span><br><span class="line">&#123;</span><br><span class="line">private slots://私有的槽函数如下</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>槽函数格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QObject::connect(this-&gt;ui-&gt;radioButton_black, SIGNAL(clicked()), this, SLOT(setTextFontColor()));</span><br></pre></td></tr></table></figure><p>Action :非常有用的类，可以创建菜单项、工具栏按钮</p><p>快捷操作<br>——-功能————————快捷键————–解释————–<br>Switch Header&#x2F;Source F4在同名的头文件和源程序文件之间切换</p><p>Follow Symbol Under Cursor F2 变量：跳转到声明；函数：声明和定义切换</p><p>Switch Between FunctionShift+F2函数：声明和定义切换<br>Declartion and Definition</p><p>Refacetor\Rename SymbolCtrl+Shift+R 改名称，将替换所有用到这个符合的地方<br>Under Cursor</p><p>Refactor\Add Definitionin .cpp为函数原型在cpp文件中生成函数体</p><p>Auto-indent SelectionCtrl+I 为选择的文字自动进行缩进</p><p>Toggle Comment SelectionCtrl+&#x2F;注释或取消注释</p><p>ContextHelpF1为光标所在的符号显示帮助</p><p>Save AllCtrl+Shift+S 文件全部保存</p><p>qt核心特点<br>元对象编译器（meta-object Complier,MOC）是一个预处理器（所谓的元就是：meta在英文词中有超越、更上一层的含义。）<br>先将Qt的特性程序转换成标准C++程序，再由标准C++编译器进行编译<br>元对象的意义</p><p>使用信号与槽机制，只有添加Q_OBJECT宏，moc才能对类里的信号与槽进行预处理</p><p>Qt为C++语言增加的特性在Qt core模块里实现，由Qt的元对象系统实现包括:信号与槽机制、属性系统、动态类型转换等。</p><p>元对象系统 (Meta-Object System)<br>1.Qobject类是所有使用元对象系统的类的基类<br>2.在一个类的private部分声明Q_OBJECT宏<br>3.MOC(元对象编译器)为每个QObject的子类提供必要的代码</p><p>qobject_cast（类类型转换） 与 C++语言种 static_cast(数据类型之间转化) 、dynamic_cast</p><p>属性系统:<br>Q_PROPERTY宏定义一个返回类型为type!，名称为name的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/516163795">https://zhuanlan.zhihu.com/p/516163795</a></p><p>信号与槽</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QMetaObject::Connection QObject::connect(const QObject *sender, const char *signal,const QObject *receiver, const char *member,Qt::ConnectionType = Qt::AutoConnection);</span><br><span class="line"></span><br><span class="line">//如果信号和槽函数带有参数，需要注明参数类型</span><br><span class="line">connect(spinNum,SIGNAL(valueChanged(int)),this,SLOT(updateStatus(int)));</span><br><span class="line"></span><br><span class="line">QMetaObject::Connection QObject::connect(cosnt QObject *sender,const OMetaMethod &amp;signal,const QObject *receivers,const QMetaMethod &amp;method,Qt::ConnectionType = Qt::AutoConnection)</span><br><span class="line">//对于信号名称唯一的(不能有重载，有重载函数只能用上面的)，没有参数不同而不同的信号函数</span><br><span class="line">connect(lineEdit,&amp;QLineEdit::textChanged,this,&amp;widget::on_textChanged);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后一个参数: Qt::ConnectionType表示了信号与槽之间的关联方式<br>Qt::AutoConnection(缺省值):自动确定关联方式<br>Qt::DirectConnection: 信号被发射时，槽立即执行，槽函数与信号在同一线程<br>Qt::QueuedConnection: 事件循环回到接收者线程后执行槽，槽与信号在不同线程<br>Qt::BlockingQueueConnection: 与Qt::QueuedConnection相似，信号线程会被阻塞直到槽执行完毕。当槽函数与信号在同一线程，会造成死锁。</p><p>在槽函数里，使用QObject::sender()可以获取信号发射者的指针,下面代码是写在槽函数中的，槽函数知道发送信号得类型，可以使用动态类型转换拿到他的指针，然后设置发送者得值和使用值都是可以得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QSpinBox*spinbox = qobject_cast&lt;QSpinBox *&gt; (sender())</span><br></pre></td></tr></table></figure><p>自定义信号及其使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class QPerson:public QObject</span><br><span class="line">&#123;</span><br><span class="line">Q_OBJECT</span><br><span class="line">private:</span><br><span class="line">int m_age = 10;</span><br><span class="line">public:</span><br><span class="line">void incAge();//是一个按钮，按下就触发</span><br><span class="line">signals:</span><br><span class="line">void ageChanged(int value);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void QPerson::incAge()&#123;m_age++;emit ageChanged(m_age);//发射信号&#125;</span><br></pre></td></tr></table></figure><p>信号函数必须无返回值，但可以有输入参数信号函数无需实现，只需在某些条件下发射信号</p><p>QT全局定义（Global：全局的意思）<br><code>&lt;QtGlobal&gt;</code>头文件包含了qt类库的一些全局定义<br>1.基本数据类型2.函数 3.宏<br>因为太常用，所以不用显示的包含，QT类的头文件都会包含该文件（函数类型的定义必须使用这些变量定义，不要使用<code>#include&lt;cstdint&gt;</code>）</p><p>qreal 缺省是8字节double类型浮点数，如果Qt使用 -qreal float 选项进行配置，就是4字节float 类型的浮点数</p><p>qfloat16 是Qt5.9.0中新增的一个类用于表示16位的浮点数，要使用gfloat16，需要包含头文件<code>&lt;QFloat16&gt;</code></p><p>全局函数定义<br>————函数—————————————–功能———————–<br>T qAbs(const T &amp;value)返回变量value的绝对值</p><p>const T&amp;qBound(const T &amp;min,const T<br>&amp;value,const T &amp; max)返回value限定在min至max范围之内的值</p><p>bool qFuzzyCompare(double p1,double p2)若p1和P2近似相等，返回true<br>bool qFuzzyCompare(float p1,float p2)</p><p>bool qFuzzylsNull(double d)如果参数d约等于0，返回true</p><p>double qlnf()返回无穷大的数</p><p>bool qlsFinite(double d)若d是一个有限的数，返回true<br>bool qlslnf(double d)若d是一个无限大的数，返回true<br>bool qlsNaN(double d)若d不是一个数，返回true<br>const T&amp;qMax(const T&amp;value1,const T&amp;value2)返回value1和value2种最大的值<br>const T&amp;qMin(const T&amp;value1,const T&amp;value2)返回value1和value2种最小的值<br>qint64 qRound64(double value)将value近似为最接近的qint64整数<br>int qRound(double value)将value近似为最接近的int整数</p><p>还有一些基础的数学运算函数在 <code>&lt;QtMath&gt;</code> 头文件中定义，比如三角运算函数、弧度与角度之间的转换函数等。</p><p>QT_VERSION: 这个宏展开为数值形式0xMMNNPP (MM &#x3D; major, NN &#x3D; minor, PP &#x3D; patch) 表示Qt编译器版本，例如Qt编译器版本为Qt 5.9.1，则 QT_VERSION 为 0x050901。这个宏常用于条件编译设置，根据Qt版本不同，编译不同的代码段。</p><p>QT_VERSION_CHECK: 这个宏展开为 Qt 版本号的一个整数表示</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">   QT_VERSION is (major &lt;&lt; 16) + (minor &lt;&lt; 8) + patch.</span><br><span class="line">*/</span><br><span class="line">#define QT_VERSION      QT_VERSION_CHECK(QT_VERSION_MAJOR, QT_VERSION_MINOR, QT_VERSION_PATCH)</span><br><span class="line">/*</span><br><span class="line">   can be used like #if (QT_VERSION &gt;= QT_VERSION_CHECK(4, 4, 0))</span><br><span class="line">*/</span><br><span class="line">#define QT_VERSION_CHECK(major, minor, patch) ((major&lt;&lt;16)|(minor&lt;&lt;8)|(patch))</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#if QT_VERSION &gt;= 0x051402</span><br><span class="line">/*code*/</span><br><span class="line">#else</span><br><span class="line">/*code*/</span><br><span class="line">#nedif</span><br></pre></td></tr></table></figure><p>QT_VERSION_STR: 这个宏展开为Qt版本号的字符串，如“5.9.0”</p><p>Q_BYTE_ORDER、Q_BIG_ENDIAN和Q_LTTLE_ENDIAN: Q_BYTE_ORDER表示系统内存中数据的字节序，Q_BIG_ENDIAN 表示大端字节序，Q_LITTLE_ENDIAN 表示小端字节序。在需要判断系统字节序时会用到</p><p>Q_DECL_IMPORT和Q_DECL_EXPORT:在使用或设计共享库时，用于导入或导出库的内容后续章节有其使用实例。</p><p>Q_DECL_OVERRIDE: 在类定义中，用于重载一个虚函数，例如在某个类中重载虚函数paintEvem()，可以定义如下: void paintEvent(QPaintEvent*) Q_DECL_OVERRIDE使用该宏后，如果重载的虚函数没有进行任何重载操作，编译器将会报错</p><p>Q_DECL_FINAL: 这个宏将一个虚函数定义为最终级别，不能再被重载，或定义一个类不能再被继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class QRect Q_DECL_FINAL//QRect 不能再被继承</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Q_UNUSED(name): 这个宏用于在函数中定义不在函数体里使用的参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void MainWindow::on_imageSaved(int id, const QString &amp;fileName)</span><br><span class="line">&#123;</span><br><span class="line">Q_UNUSED(id);</span><br><span class="line">Lablnfo-&gt;setText(&quot;图片保存为:&quot;+fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>foreach(variable,container): 用于容器类的遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foreach (const QString &amp;codecName, recorder-&gt;supportedAudioCodecs())</span><br><span class="line">ui-&gt;comboCodec-&gt;addltem(codecName);</span><br></pre></td></tr></table></figure><p>例如recorder有三个值遍历三次，每次的值都传给codeName</p><p>forever: 用于构造一个无限循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">forever</span><br><span class="line">&#123;</span><br><span class="line">//中间要退出要有相应代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qDebug(const char* message,..) : 在debugger窗体显示信息，如果编译器设置了Qt_NO_DEBUG_OUTPUT，则不作任何输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qDebug(&quot;ltems in list: %d&quot;, myList.size());</span><br></pre></td></tr></table></figure><p>类似的宏还有 qWarning、gCritical、gFatal、glnfo 等，也是用于在 debugger 窗体显示信息</p><p>字符串与数值之间的转换<br>1.QString类可以显示字符串与数值之间的转换；2.使用QLable、QLineEdit显示和输入信息； 3.使用布局</p><p>QString类从字符串转换为整数的函数有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int toInt(bool *ok = Q_NULLPTR,int base = 10);</span><br><span class="line">const long toLong(bool *ok = Q_NULLPTR,int base = 10);</span><br><span class="line">const short toShort(bool *ok = Q_NULLPTR,int base = 10);</span><br><span class="line">const uint toUInt(bool *ok = Q_NULLPTR,int base = 10);</span><br><span class="line">const ulong toULong(bool *ok = Q_NULLPTR,int base = 10)const;</span><br></pre></td></tr></table></figure><p>QString 将字符串转换为浮点数的函数有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double toDouble(bool *ok = Q_NULLPTR)const</span><br><span class="line">float toFloat(bool * ok= Q_NULLPTR)const</span><br></pre></td></tr></table></figure><p>希望显示两位小数，下面4行语句都可以实现这个功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = QString::number(total,&#x27;f&#x27;,2);</span><br><span class="line">str = QString::asprintf(&quot;%.2f&quot;,total);</span><br><span class="line">str = str.setNum(total,&#x27;f&#x27;,2);</span><br><span class="line">str = str.sprintf(&quot;%.2f&quot;,total);</span><br></pre></td></tr></table></figure><p>字符串与输入输出<br>QString的常用功能<br>QString存储字符采用的是Unicode码，（16位Qchar）</p><p>append()和prepend()后面添加或者前面添加字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QString str1 = &quot;卖&quot;,str2 = &quot;拐&quot;；</span><br><span class="line">QString str3 = str1;</span><br><span class="line">str1.append(str2);//str1 = 卖拐</span><br><span class="line">str3.prepend(str2);//str2 = 拐卖</span><br></pre></td></tr></table></figure><p>oUpper()和toLower() 字符转换成大写或小写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString str1 = &quot;Hello World&quot;,str2;</span><br><span class="line">str2 = str1.toUpper();//str2 = &quot;HELLO WORLD&quot;</span><br><span class="line">str2 = str1.toLower();//str2 = &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>count()、size()和length()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">QString str1 = &quot;NI好&quot;</span><br><span class="line">N = str1.count()//N = 3</span><br><span class="line">N = str1.size()//N = 3</span><br><span class="line">N = str1.length()//N = 3</span><br></pre></td></tr></table></figure><p>trimmed()和simplified()  掐头去尾，空格合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString str1 = &quot; Are    you    OK? &quot;,str2;</span><br><span class="line">str2 = str1.trimmed();//str1 = &quot;Are    you    OK?&quot;</span><br><span class="line">str2 = str1.simplified()//str1 = &quot;Are you OK?&quot;</span><br></pre></td></tr></table></figure><p>indexOf() 和 lastlndexOf()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//int indexOf(const QString &amp;str，int from = 0, QT::CaseSensitivity cs = Qt::CaseSensitive)const</span><br><span class="line">//需要找str字符串种特点字符，从那个位置开始找，默认区分大小写</span><br><span class="line">QString str1 = &quot;G:\QT_5_PRO\sampl6_1\sampl6_1\main.cpp&quot;;</span><br><span class="line">N = str1.indexOf(&quot;5_&quot;);//n = 7</span><br><span class="line">N = str1.lastlndexOf(&quot;\\&quot;);//n = 29 这里双斜杠是代表斜杠，只不过是找的最后一个斜杠</span><br></pre></td></tr></table></figure><p>isNull()和isEmpty()   未赋值字符串 空字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QString str1,str2 = &quot;&quot;;</span><br><span class="line">N= str1.isNull();N= true 未赋值字符串变量</span><br><span class="line">N= str2.isNull(); N = flase 只有&#x27;\0&#x27;的字符串，也不是Null</span><br><span class="line">N= str1.isEmpty();N= true</span><br><span class="line">N=str2.isEmpty();N= true</span><br></pre></td></tr></table></figure><p>QString 只要赋值，就在字符串的末尾自动加上”\0”,如果只要判断字符串内容释放为空，常用isEmpty()</p>]]></content>
    
    
    <summary type="html">QT开发</summary>
    
    
    
    <category term="QT" scheme="https://goupos.top/categories/QT/"/>
    
    
    <category term="QT" scheme="https://goupos.top/tags/QT/"/>
    
  </entry>
  
  <entry>
    <title>C语言二叉树</title>
    <link href="https://goupos.top/2023/11/26/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://goupos.top/2023/11/26/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2023-11-25T21:18:25.000Z</published>
    <updated>2023-12-19T03:18:00.285Z</updated>
    
    
    <summary type="html">C语言二叉树</summary>
    
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
    <category term="c语言关键字执行顺序" scheme="https://goupos.top/categories/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/c%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    
    
    <category term="C语言与编译器关键字以及宏和代码" scheme="https://goupos.top/tags/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F%E5%92%8C%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记0</title>
    <link href="https://goupos.top/2023/11/06/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B00/"/>
    <id>https://goupos.top/2023/11/06/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B00/</id>
    <published>2023-11-06T00:49:23.000Z</published>
    <updated>2023-11-22T16:28:41.225Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="C-关键字-C语言中有的关键字，删除了"><a href="#C-关键字-C语言中有的关键字，删除了" class="headerlink" title="C++关键字(C语言中有的关键字，删除了)"></a>C++关键字(C语言中有的关键字，删除了)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">asm ：允许在 C++ 程序中嵌入汇编代码&lt;C语言也可以嵌入&gt;</span><br><span class="line">auto：是存储类型标识符，表明变量&quot;自动&quot;具有本地范围，块范围的变量声明（如for循环体内的变量声明）默认为auto存储类型。</span><br><span class="line">inline：（内联）函数的定义将在编译时在调用处展开。inline 函数一般由短小的语句组成，可以提高程序效率。</span><br><span class="line">typeid:指出指针或引用指向的对象的实际派生类型。</span><br><span class="line">bool</span><br><span class="line">dynamic_cast</span><br><span class="line">typename</span><br><span class="line">mutable</span><br><span class="line">catch</span><br><span class="line">explicit</span><br><span class="line">namespace</span><br><span class="line">static_cast</span><br><span class="line">using</span><br><span class="line">export</span><br><span class="line">new</span><br><span class="line">virtual</span><br><span class="line">class</span><br><span class="line">operator</span><br><span class="line">false</span><br><span class="line">private</span><br><span class="line">template</span><br><span class="line">volatile</span><br><span class="line">const_cast</span><br><span class="line">protected</span><br><span class="line">this</span><br><span class="line">wchar_t</span><br><span class="line">continue:跳过当前循环</span><br><span class="line">public</span><br><span class="line">throw</span><br><span class="line">friend</span><br><span class="line">register</span><br><span class="line">true</span><br><span class="line">delete</span><br><span class="line">reinterpret_cast</span><br><span class="line">try</span><br></pre></td></tr></table></figure><p>C++之继承关系<br>继承关系可访问的类关系表示如下表格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">继承方式基类的public成员基类的protected基类成员private</span><br><span class="line"></span><br><span class="line">public public protected 不可见</span><br><span class="line"></span><br><span class="line">protected变成protected成员protected 不可见</span><br><span class="line"></span><br><span class="line">private变成private成员private 不可见</span><br></pre></td></tr></table></figure><h4 id="1-友元"><a href="#1-友元" class="headerlink" title="1. 友元"></a>1. 友元</h4>]]></content>
    
    
    <summary type="html">C++学习笔记0</summary>
    
    
    
    <category term="C++" scheme="https://goupos.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://goupos.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记2</title>
    <link href="https://goupos.top/2023/11/05/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>https://goupos.top/2023/11/05/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C++/C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2023-11-05T14:16:50.000Z</published>
    <updated>2023-11-27T16:20:07.591Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="1-类模板-模板类与友元"><a href="#1-类模板-模板类与友元" class="headerlink" title="1. 类模板-模板类与友元"></a>1. 类模板-模板类与友元</h4><p>模板类的友元函数有三类：<br>1）非模板友元:友元函数不是模板函数，而是利用模板类参数生成的函数。只能在类中实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">class AA</span><br><span class="line">&#123;</span><br><span class="line">friend void show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line">public:</span><br><span class="line">AA(const T1 x, const T2 y) :m_x(x), m_y(y)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">friend void show(AA&lt;T1, T2&gt;&amp; a)//编译器利用模板参数生成了友元函数，但是，这个函数不是模板函数</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;x= &quot; &lt;&lt; a.m_x &lt;&lt; &quot; , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;show(AA&lt;T1, T2&gt;&amp; a)&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//编译器会利用友元函数模板生成实例，和下面这些代码冲突了，所以出现了重定义</span><br><span class="line">//函数模板具体化</span><br><span class="line">//friend void show(AA&lt;int, string&gt;&amp; a);//这样就很麻烦了，要为每一个类型创建一个友元函数</span><br><span class="line">//friend void show(AA&lt;char, string&gt;&amp; a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AA&lt;int, string&gt; aa_1(8,&quot;我是一只快乐鸟&quot;);</span><br><span class="line"></span><br><span class="line">void show()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;x= &quot; &lt;&lt; aa_1.m_x &lt;&lt; &quot; , y = &quot; &lt;&lt; aa_1.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//void show(AA&lt;int,string&gt;&amp; a)</span><br><span class="line">//&#123;</span><br><span class="line">//cout &lt;&lt; &quot;x= &quot; &lt;&lt; a.m_x &lt;&lt; &quot; , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">//cout &lt;&lt; &quot;show(AA&lt;int,string&gt;&amp; a)&quot; &lt;&lt; endl;</span><br><span class="line">//&#125;</span><br><span class="line">//</span><br><span class="line">//void show(AA&lt;char, string&gt;&amp; a)</span><br><span class="line">//&#123;</span><br><span class="line">//cout &lt;&lt; &quot;x= &quot; &lt;&lt; a.m_x &lt;&lt; &quot; , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">//cout &lt;&lt; &quot;show(AA&lt;char, string&gt;&amp; a)&quot; &lt;&lt; endl;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">AA&lt;int, string&gt; aa_2(8, &quot;我是一只快乐鸟&quot;);</span><br><span class="line">AA&lt;char, string&gt; aa_3(8, &quot;我是一只快乐鸟&quot;);</span><br><span class="line">AA&lt;double, string&gt; aa_4(8, &quot;我是一只快乐鸟&quot;);</span><br><span class="line"></span><br><span class="line">show();</span><br><span class="line">show(aa_2);</span><br><span class="line">show(aa_3);</span><br><span class="line">show(aa_4);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方案的本质是：编译器利用模板参数帮我生成了友元函数。方便使用，注意：编译器利用模板参数生成了友元函数，但是，这个函数不是模板函数，而是友元函数实体<br>这样对我们写程序有什么影响：如果我们想为某种数据类型创建特别版本的友元函数（具体化）这种方法是无法做到，用该方法生成的友元函数只能用于这个模板类，不能用于其他的模板类.</p><p>2）约束模板友元：模板类实例化时，每个实例化的类对应一个友元函数。(最好的友元函数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void show(T&amp; a);//第一步：在模板类的定义前面声明友元函数模板</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">class AA</span><br><span class="line">&#123;</span><br><span class="line">friend void show&lt;&gt;(AA&lt;T1, T2&gt;&amp; a);//第二步：在模板类中，再次声明友元函数模板</span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">AA(const T1 x, const T2 y) :m_x(x), m_y(y) &#123;&#125;</span><br><span class="line">~AA() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;//第三步：友元函数模板定义</span><br><span class="line">void show(T&amp; a)//通用类型函数模板</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;通用：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;&gt;//第三步：具体化版本</span><br><span class="line">void show(AA&lt;int, string &gt;&amp; a)//具体化函数模板</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;具体化&lt;int, string &gt;：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">AA&lt;int, string&gt; aa_1(88, &quot;我是小明&quot;);</span><br><span class="line">show(aa_1);</span><br><span class="line"></span><br><span class="line">AA&lt;char, string&gt; aa_2(88, &quot;我是小婷&quot;);</span><br><span class="line">show(aa_2);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好的友元方案，该方案的友元函数是函数模板，为模板设置友元分三个步骤<br>第一步：在模板类的定义前面，声明友元函数模板；目的是为了让模板类AA知道友元函数模板的存在<br>第二步：在模板类中再次声明友元函数模板；目的是让编译知道需要实例化的友元函数模板 ，类模板与函数模板本来是没有关系的，如下（1）代码让他们有关系,编译器在实例化某种数据类型的模板类时，也会实例化这种数据类型的模板函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(1) friend void show&lt;&gt;(AA&lt;T1, T2&gt;&amp; a);</span><br></pre></td></tr></table></figure><p>第三步：友元函数模板的定义，放在模板类的下面;因为友元函数是函数模板，可以有具体化的版本。</p><p>这种友元的函数模板可以用于多个模板类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;typename T&gt;//第三步：友元函数模板定义</span><br><span class="line">void show(T&amp; a)//通用类型函数模板</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;通用：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void show(T&amp; a);//第一步：在模板类的定义前面声明友元函数模板</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">class AA</span><br><span class="line">&#123;</span><br><span class="line">friend void show&lt;&gt;(AA&lt;T1, T2&gt;&amp; a);//第二步：在模板类中，再次声明友元函数模板</span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">AA(const T1 x, const T2 y) :m_x(x), m_y(y) &#123;&#125;</span><br><span class="line">~AA() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">class BB</span><br><span class="line">&#123;</span><br><span class="line">friend void show&lt;&gt;(BB&lt;T1, T2&gt;&amp; a);//第二步：在模板类中，再次声明友元函数模板</span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">BB(const T1 x, const T2 y) :m_x(x), m_y(y) &#123;&#125;</span><br><span class="line">~BB() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;//第三步：友元函数模板定义</span><br><span class="line">void show(T&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;通用：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;&gt;//第三步：具体化版本</span><br><span class="line">void show(AA&lt;int, string &gt;&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;具体化&lt;int, string &gt;：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;&gt;//第三步：具体化版本</span><br><span class="line">void show(BB&lt;int, string &gt;&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;具体化&lt;int, string &gt;：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">AA&lt;int, string&gt; aa_1(88, &quot;我是小明&quot;);</span><br><span class="line">show(aa_1);</span><br><span class="line"></span><br><span class="line">AA&lt;char, string&gt; aa_2(88, &quot;我是小婷&quot;);</span><br><span class="line">show(aa_2);</span><br><span class="line"></span><br><span class="line">BB&lt;int, string&gt; bb_1(88, &quot;我是小明&quot;);</span><br><span class="line">show(bb_1);</span><br><span class="line"></span><br><span class="line">BB&lt;char, string&gt; bb_2(88, &quot;我是小婷&quot;);</span><br><span class="line">show(bb_2);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：可以具体化、支持多个模板类</p><p>3）非约束模板类友元：模板类实例化时，如果实例化了n个类，也会实例化n个友元函数，每个实例化的类都拥有n个有缘函数。(它不科学)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">class AA</span><br><span class="line">&#123;</span><br><span class="line">template&lt;typename T&gt; friend void show(T&amp; a);</span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">AA(const T1 x, const T2 y) :m_x(x), m_y(y) &#123;&#125;</span><br><span class="line">~AA() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;//通用的函数模板</span><br><span class="line">void show(T&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;通用：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;&gt;//函数模板的具体版本</span><br><span class="line">void show(AA&lt;int, string &gt;&amp; a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;具体化&lt;int, string &gt;：x = &quot; &lt;&lt; a.m_x &lt;&lt; &quot;  , y = &quot; &lt;&lt; a.m_y.c_str() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">AA&lt;int, string&gt; aa_1(88, &quot;我是小明&quot;);</span><br><span class="line">show(aa_1);</span><br><span class="line"></span><br><span class="line">AA&lt;char, string&gt; aa_2(88, &quot;我是小婷&quot;);</span><br><span class="line">show(aa_2);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-类模板-模板类的成员模板"><a href="#2-类模板-模板类的成员模板" class="headerlink" title="2. 类模板-模板类的成员模板"></a>2. 类模板-模板类的成员模板</h4><p>意思是在模板类中创建模板类和函数模板，开发中，模板类中有类模板和函数模板的情况很常见；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T1,class T2&gt;</span><br><span class="line">class AA </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">T1 m_x;</span><br><span class="line">T2 m_y;</span><br><span class="line"></span><br><span class="line">AA(T1 x, T2 y) :m_x(x), m_y(y)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">void show()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;m_x=&quot; &lt;&lt; m_x &lt;&lt; &quot;  , m_y=&quot; &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;class T&gt;//里面这个类模板参数可以和外面的类模板相同，也可以不同</span><br><span class="line">class BB</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">T m_a;</span><br><span class="line">T1 m_b;//可以用AA的模参数T1和T2创建成员变量</span><br><span class="line">T1 m_c;</span><br><span class="line">//BB() &#123;&#125;</span><br><span class="line">BB() &#123;&#125;</span><br><span class="line">~BB() &#123;&#125;</span><br><span class="line">//void show()</span><br><span class="line">//&#123;</span><br><span class="line">//cout &lt;&lt; &quot;m_a=&quot; &lt;&lt; m_a &lt;&lt; &quot;  , m_b=&quot; &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">void show();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BB&lt;string&gt; m_bb;</span><br><span class="line"></span><br><span class="line">template&lt;typename T&gt;</span><br><span class="line">void show(T tt)//是类模板AA的成员函数，也是函数模板</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;tt=&quot; &lt;&lt; tt &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;m_x=&quot; &lt;&lt; m_x &lt;&lt; &quot;  , m_y=&quot; &lt;&lt; m_y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, class T2&gt;</span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">void AA&lt;T1,T2&gt;::BB&lt;T&gt;::show()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;m_a=&quot; &lt;&lt; m_a &lt;&lt; &quot;  , m_b=&quot; &lt;&lt; m_b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">AA&lt;int, string&gt; a(88, &quot;我是小明&quot;);</span><br><span class="line">a.show();</span><br><span class="line">a.m_bb.m_a = &quot;小婷&quot;;</span><br><span class="line">a.m_bb.m_b = 66;</span><br><span class="line">a.m_bb.show();</span><br><span class="line">a.show(&quot;结束行&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-类模板-将模板类用作参数"><a href="#3-类模板-将模板类用作参数" class="headerlink" title="3. 类模板-将模板类用作参数"></a>3. 类模板-将模板类用作参数</h4><p>链表数组，为了支持任意类型数据，最好的方法是用类模板来实现（物理结构不相同，但是逻辑结构是相同的）<br>模板的目的就是代码重用。链表和数组的逻辑结构是一样的，是否可以做成一个模板类呢？可以的。<br>链表这个模板类模板化目的为了兼容各种数据类型<br>C++支持模板的模板:把模板名当成一种特殊的类型，实例化对象的时候，可以用模板名作为参数，传给模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">class LinkList//链表类模板 被称为容器 </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">T1* m_head;</span><br><span class="line">int m_len = len;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">LinkList();</span><br><span class="line">~LinkList();</span><br><span class="line">void insert()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中插入一条记录。&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void ddelete()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中删除了一条记录。&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void update()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中更新一条记录&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">LinkList&lt;T1, len&gt;::LinkList()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">LinkList&lt;T1, len&gt;::~LinkList()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">class Array</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">T1* m_data;//数组指针</span><br><span class="line">int m_len = len;//表长</span><br><span class="line">public:</span><br><span class="line">Array();</span><br><span class="line">~Array();</span><br><span class="line">void insert()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中插入一条记录。&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void ddelete()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中删除了一条记录。&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">void update()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;向链表中更新一条记录&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">Array&lt;T1, len&gt;::Array()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;class T1, int len&gt;</span><br><span class="line">Array&lt;T1, len&gt;::~Array()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//线性表模板类：tabletype-线性表类型  datetype-线性表数据类型</span><br><span class="line">//template&lt;class, int&gt;class 模板类</span><br><span class="line">template&lt;template&lt;class, int&gt;class tabletype, class datatype, int len&gt;</span><br><span class="line">class LinearList</span><br><span class="line">&#123;</span><br><span class="line">/*线性表模板类的代码实现，特别地方有：</span><br><span class="line">那就是它的参数</span><br><span class="line">*/</span><br><span class="line">public:</span><br><span class="line">tabletype&lt;datatype, len&gt; m_table;//创建线性表对象</span><br><span class="line"></span><br><span class="line">LinearList();</span><br><span class="line">~LinearList();</span><br><span class="line"></span><br><span class="line">void insert()//线性表插入操作</span><br><span class="line">&#123;</span><br><span class="line">m_table.insert();</span><br><span class="line">&#125;</span><br><span class="line">void ddelete() &#123; m_table.ddelete(); &#125;//线性表删除操作</span><br><span class="line">void updata() &#123; m_table.update(); &#125;//线性表更新操作</span><br><span class="line">void oper()//按业务要求操作线性表</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;len=&quot; &lt;&lt; m_table.m_len &lt;&lt; endl;</span><br><span class="line">m_table.insert();</span><br><span class="line">m_table.update();</span><br><span class="line">&#125;</span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">template&lt;template&lt;class, int&gt;class tabletype, class datatype, int len&gt;</span><br><span class="line">LinearList&lt;tabletype, datatype, len&gt;::LinearList()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">template&lt;template&lt;class, int&gt;class tabletype, class datatype, int len&gt;</span><br><span class="line">LinearList&lt;tabletype, datatype, len&gt;::~LinearList()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//创建线性表对象,容器类型为链表，链表的数据类型为int,表长为20</span><br><span class="line">LinearList&lt;LinkList, int, 20&gt;a;</span><br><span class="line">//LinearList:线性表的类模板名，创建线性表对象</span><br><span class="line">//LinkList：线性表第一个参数是容器的类型，容器都是类模板，所以填写类模板名</span><br><span class="line">//第二个参数用于指定容器的数据类型，意思是容器中存放的是什么类型的数据</span><br><span class="line">//第三个参数是指定容器的大小</span><br><span class="line">a.insert(); </span><br><span class="line">a.ddelete(); </span><br><span class="line">a.updata();</span><br><span class="line"></span><br><span class="line">//创建线性表对象,容器类型为链表，链表的数据类型为string,表长为20</span><br><span class="line">LinearList&lt;Array, string, 20&gt;b;</span><br><span class="line">b.insert(); </span><br><span class="line">b.ddelete(); </span><br><span class="line">b.updata();</span><br><span class="line"></span><br><span class="line">/*他们选择不同容器 LinkList 和 Array 容器，容器可以不同，但是操作数据的方法是相同的*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线性表模板类的代码实现，特别地方有：那就是它的参数<br><code>template&lt;class, int&gt;class tabletype</code>的意思：表示 <code>tabletype</code> 不是一个普通的参数，而是模板，意思是这个参数要填写模板名，不要填写普通类型（int、string）;<br>填什么样的模板名呢？填有两个参数的类模板名，一个参数的类模板名是不可以的。并且要求类模板的第一个参数是通用类型，第二个是非通用类型。<br>在如下代码中 class 也可以用 typename 代替,类模板更习惯用 class 而已</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class, int&gt;class tabletype</span><br><span class="line">template&lt;typename, int&gt;class tabletype</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">template&lt;template&lt;class, int&gt;class tabletype, class datatype, int len&gt;</span><br></pre></td></tr></table></figure><p>模板名通过参数 tabletype 传入到了类中，类中可以用 tabletype 创建对象；<code>tabletype</code> 是一个模板名， 用<code>tabletype</code>创建对象的时候，还需要指定具体的数据类型；<code>tabletype</code>应该用什么数据类型。<br>最常见的做法是：用模板参数从外面传进来，例如 把 datatype 填这里，len 填在这里<br>这个一般用于数据处理中</p><h4 id="4-编译预处理"><a href="#4-编译预处理" class="headerlink" title="4. 编译预处理"></a>4. 编译预处理</h4><p>C++程序编译的过程：预处理 -&gt; 编译（优化、汇编） -&gt; 链接<br>预处理指令主要有以下三种：<br>包含头文件:#include<br>宏定义:#define #undef<br>条件编译：#if #else #elif #end #ifnedf #if defined</p><h4 id="5-编译和链接"><a href="#5-编译和链接" class="headerlink" title="5. 编译和链接"></a>5. 编译和链接</h4><p>1）分开编译的好处：每次只编译修改过的源文件，然后在再链接，效率最高。<br>2）编译单个<code>*.cpp</code> 文件的时候，必须要让编译器知道名称的存在，否则会出现找不到标识符的错误。<br>3）编译单个<code>*.cpp</code> 文件的时候，编译器只需要知道名称的存在，不会把他们的定义一起编译。<br>4）如果函数和类的定义不存在，编译不会报错，但链接会出现无法解析的外部命令<br>5）链接的时候、变量、函数和类的定义只能有一个，否则会出现重定义错误。(如果把变量、函数和类的定义放在<code>*.h</code> 文件中，<code>*.h</code> 会被多次包含，链接前会存在多个副本，如果放在<code>*.cpp</code> 文件中，<code>*.cpp</code> 文件不会被包含，只会被编译一次，链接前只存在一个版本)(如果加上 <code>static</code> 可以避免被重复包含)<br>6）把变量、函数和类的定义放在<code>*.h</code>中是不规范的做法，如果<code>*.h</code>被多个<code>*.cpp</code>包含，会出现重定义。头文件加上防止重定义编译的宏定义<br>7）用 <code>#include</code> 包含 <code>*.cpp</code> 是不规范的做饭，原理同上<br>8）尽可能不使用全局变量，如果一定要用，要在 <code>*.h</code> 文件中声明（需要加 <code>extern</code>）, <code>*.cpp</code> 中定义。<br>9）全局的<code>const</code>常量在头文件中定义 (<code>const</code>常量仅在文件内有效)<br>10）<code>*.h</code> 重复包含的处理方法只对单个的<code>*.cpp</code>文件有效，不是整个项目.<br>11）函数模板和类模板的声明和定义可以分开书写，但它们的定义并不是真实的定义，只能放在<code>*.h</code>文件中;函数模板和类模板的具体化版本的代码是真实的定义，所以放在<code>*.cpp</code> 文件中。<br>12) Linux下C++编译和链接的原理与VS一样。</p><h4 id="6-C-命名空间"><a href="#6-C-命名空间" class="headerlink" title="6. C++命名空间"></a>6. C++命名空间</h4><p>实际开发中，较大型的项目会使用大量的全局名字，如类、函数、模板、变量等，很容易出现名字冲突的情况。<br>命名空间分割了全局空间，每个命名空间是一个作用域，防止名字冲突<br>语法<br>创建命名空间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">namespace 命名空间的名字</span><br><span class="line">&#123;</span><br><span class="line">//类、函数、模板、变量的声明和定义</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建命名空间的别名<br>namespace 别名 &#x3D; 原名;</p><p>要使用命名空间的数据类型有三种方法：<br>第一种方法：在名字前面加上命名空间的名字和两个冒号,这种方法简单明了，不会造成任何冲突，但是使用起来比较繁琐，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">namespace AA//自定义命名空间</span><br><span class="line">&#123;</span><br><span class="line">int aa = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果想使用命名空间中的变量</span><br><span class="line">cout&lt;&lt;AA::aa&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>第二种方法：用using声明,使用using声明要注意这样一个问题，如果再同一个区域出现了相同的名字，那么编译会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">namespace AA//自定义命名空间</span><br><span class="line">&#123;</span><br><span class="line">int aa = 1;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//如果想用 AA 命名空间的 aa ,但是在下面代码中不能再出现 aa 变量名</span><br><span class="line">using AA::aa;</span><br><span class="line">using AA::func;</span><br><span class="line"></span><br><span class="line">cout&lt;&lt;aa&lt;&lt;endl;</span><br><span class="line">func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三种方法：用using编译指令，使用using编译指令要注意这样一个问题，如果再同一个区域出现了相同的名字，虽然编译不会报错，但是会屏蔽之前创建的变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">namespace AA//自定义命名空间</span><br><span class="line">&#123;</span><br><span class="line">int aa = 1;</span><br><span class="line">void func()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">using namespace AA;//有了这行代码后，main函数中，AA命名空间中的全部名字都可以用 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项<br>1）命名空间是全局的，可以分布再多个文件中(有命名空间和没有命名空间代码组织一样的，函数和类的声明在头文件中，函数和类的定义在源文件中；全局变量在头文件中声明，在源文件中定义)</p><figure class="highlight plaintext"><figcaption><span>namespace_new.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &quot;namespace_new.h&quot;</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">int ab = 1; //全局变量</span><br><span class="line"></span><br><span class="line">void A1::show()//类成员函数的类外实现</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;调用了A1::show()函数&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func1()//调用了全局函数定义</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;调用了func()函数&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>namespace_new.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">extern int ab;</span><br><span class="line"></span><br><span class="line">void func1();//全局函数声明</span><br><span class="line"></span><br><span class="line">class A1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void show();//类的成员函数</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;namespace_new.h&quot;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace aa;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">A1 a1;</span><br><span class="line">a1.show();</span><br><span class="line">func1();</span><br><span class="line">cout &lt;&lt; ab &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有同一个命名空间的代码可以分散在不同的文件中,例如把命名空间AA代码分开，如下所示</p><figure class="highlight plaintext"><figcaption><span>namespace_new.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &quot;namespace_new.h&quot;</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">void A1::show()//类成员函数的类外实现</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;调用了A1::show()函数&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void func1()//调用了全局函数定义</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;调用了func()函数&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>namespace_new.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">void func1();//全局函数声明</span><br><span class="line"></span><br><span class="line">class A1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">void show();//类的成员函数</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>namespace_new2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#include &quot;namespace_new2.h&quot;</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">int ab = 1; //全局变量</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>namespace_new2.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line"></span><br><span class="line">namespace aa</span><br><span class="line">&#123;</span><br><span class="line">extern int ab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总的来说，组织代码的方法，和没有命名空间相比，只是在代码外面，套了一个命名空间而已</p><p>2）命名空间可以嵌套。<br>3）在命名空间中声明变量，而不是使用外部全局变量和静态全局变量（应用经验。静态变量不适用原因：例如上面全局变量 ab 在源文件中定义，头文件中声明，不在头文件中声明，那么外部就不知道有该变量，效果和静态变量一样）<br>4）对于using声明，首选将其作用域设置为局部而不是全局 ；将这个代码放在main函数作用域中<code>using AA::aa;</code>，不要放置外面<br>5）不要在头文件中使用using编译指令，如果非要使用，应将它放在所有的 #include 之后。<br>6）匿名的命名空间，在当前文件中从创建的位置到文件结束有效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace //匿名的命名空间</span><br><span class="line">&#123;</span><br><span class="line">int ii = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;ii&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-C-类型转换-static-cast"><a href="#7-C-类型转换-static-cast" class="headerlink" title="7. C++类型转换 static_cast"></a>7. C++类型转换 static_cast</h4><p>风格的类型转换很容易理解:<br>C语法:(目标类型)表达式或目标类型(表达式);<br>C++认为C风格的类型转换过于散，可能会带来隐患，不够安全。<br>C++推出了新的类型转换来替代C风格的类型转换，采用更严格的语法检查，降低使用风险。<br>C++新增四个关键字<code>static_cast、const_cast、reinterpret_cast、dynamic_cast</code>,用于支持C++风格的类型转换。<br>C++的类型转换只是语法上的解释本质上与C风格的类型转换没什么不同，C语言做不到事情的C++也做不到<br>语法<br>static_cast&lt;目标类型&gt;(表达式);实际开发中，这个用的多<br>const_cast&lt;目标类型&gt;(表达式);<br>reinterpret_cast&lt;目标类型&gt;(表达式);<br>dynamic_cast&lt;目标类型&gt;(表达式);</p><p>static_cast<br>1）用于内置数据类型之间的转换，除了语法不同，C和C++没有区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double dd = 1.23;</span><br><span class="line">long ll ;</span><br><span class="line">ll = static_cast&lt;long&gt;(dd);\\C++风格</span><br></pre></td></tr></table></figure><p>2）用于指针之间转换C风格可以把不同类型的指针进行转换。C++不可以，需要借助 void *</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int ii = 10;</span><br><span class="line">void *pv = &amp;ii;</span><br><span class="line">double * pd4 =  static_cast&lt;double*&gt;(pv);</span><br></pre></td></tr></table></figure><p>reinterpret_cast<br>static_cast不能用于转换不同类型的指针(引用) (不考虑有继承关系的情况)，reinterpret_cast可以。<br>reinterpret_cast的意思是重新解释，能够将一种对象类型转换为另一种类型，不管他们是否有关系。（就是想怎么转就怎么转）<br>语法：reinterpret_cast&lt;目标类型&gt;(表达式);<br><code>&lt;目标类型&gt;</code>和<code>(表达式)</code>中必须有一个是指针(引用)类型。为什么会这么要求，因为它只为转换指针的应用场景而设计的<br><code>reinterpret_cast</code>不能丢掉<code>(表达式)</code>的<code>const</code>或<code>volitale</code>属性。</p><p>static_cast转换指针受到一些限制，C++设计的目标是:让static_cast满是程序员普通的需求;非常规的、特别的应用场景用reinterpret_cast；<br>应用场景<br>1）<code>reinterpret_cast</code>的第一种用途是改变指针（引用）的类型.<br>例如:把<code>int*</code>型指针直接转换成<code>double*</code>型指针，中间不借助<code>void*</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int ii= 10；</span><br><span class="line">double * pd = reinterpret_cast&lt;double*&gt;(&amp;ii);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">double aa = 100.23;</span><br><span class="line">int *aa_int = reinterpret_cast&lt;int *&gt;(&amp;aa);</span><br><span class="line">double * aa_double = reinterpret_cast&lt;double*&gt;(aa_int);</span><br><span class="line"></span><br><span class="line">printf(&quot;%f\n&quot;,*aa_double);</span><br><span class="line">cout &lt;&lt; *aa_double &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>2）<code>reinterpret_cast</code>的第二种用途是将指针(引用)转换成整型变量。整型与指针占用的字节数必须一致，否则转换可能损失精度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void func(void * ptr)</span><br><span class="line">&#123;</span><br><span class="line">long long ii = reinterpret_cast&lt;long long&gt;(ptr);</span><br><span class="line">cout &lt;&lt; &quot;ii=&quot; &lt;&lt; ii &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long ii = 10;</span><br><span class="line">func(reinterpret_cast&lt;void *&gt;(ii));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）<code>reinterpret_cast</code> 的第三种用途是将一个整型变量转换成指针 (引用)</p><p>const_cast<br><code>static_cast</code>不能丢掉指针(引用)的<code>const</code>和<code>volitale</code>属性<code>const_cast</code>可以。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const int * aa = nullptr;</span><br><span class="line">int *cc = const_cast&lt;int *&gt;(aa);</span><br></pre></td></tr></table></figure><p>在实际开发中为什么要丢掉指针const呢？<br>如下定义一个函数<code>funca()</code>,形参用整形指针，那就用<code>const_cast</code>转换，把指针<code>aa</code>的<code>const</code>丢掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void funca(int *ii)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">const int * aa = nullptr;</span><br><span class="line">funca(const_cast&lt;int*&gt;(aa));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-C-的String容器"><a href="#7-C-的String容器" class="headerlink" title="7. C++的String容器"></a>7. C++的String容器</h4><p><code>string</code>是字符容器，内部维护了一个动态的字符数组。<br>与普通的字符数组相比，string 容器有三个优点:<br>1)使用的时候，不必考虑内存分配和释放的问题<br>2)动态管理内存(可扩展)<br>3)提供了大量操作容器的API。缺点是效率略有降低。</p><p><code>string</code>类是<code>std:basic_string</code>类模板的一个具体化版本的别名。<br><code>using std:string=std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt;&gt;</code></p><p>构造和析构<br>静态常量成员string::npos为字符数组的最大长度（通常为unsigned int 的最大值）；<br>NBTS (null-terminated string): C风格的字符串 (以空字符0结束的字符串)<br>string 类有七个构造函数(C++11新增了两个):<br>1）<code>string()</code>:创建一个长度为0的<code>string</code>对象(默认构造函数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s1;//创建一个长度为0的string对象</span><br><span class="line">cout &lt;&lt; &quot;s1=&quot; &lt;&lt; s1 &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;s1.capacity()=&quot; &lt;&lt; s1.capacity() &lt;&lt; endl;//返回当前容器容量，可以存放字符的总数</span><br><span class="line">cout &lt;&lt; &quot;s1.size() = &quot; &lt;&lt; s1.size() &lt;&lt; endl;//返回当前容器中数据的大小</span><br></pre></td></tr></table></figure><p>2)<code>string(const char *s)</code>: 将<code>string</code>对象初始化为<code>s</code>指的<code>NBTS</code>(转换函数)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>3)<code>string(const string &amp;str)</code>: 将<code>string</code>对象初始化为<code>str</code>(拷贝构造函数)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>4)<code>string(const char *s,size_t n)</code>: 将<code>string</code>对象初始化为<code>s</code>指的<code>NBTS</code>的前n个字符，即使超过了(C风格)<code>NBTS</code>结尾，这里不判断结尾标志（这里的第一个参数不要理解为字符串，理解为一个地址<code>string(const void *s,size_t n)</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string s6(&quot;hello world&quot;, 5);</span><br><span class="line">cout &lt;&lt; &quot;s6=&quot; &lt;&lt; s6.c_str() &lt;&lt; endl;</span><br><span class="line">string s7(&quot;hello world&quot;, 50);//会从这条字符串向后复制50个字符</span><br><span class="line">cout &lt;&lt; &quot;s7=&quot; &lt;&lt; s7.c_str() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>5）<code>string(const string &amp;str,size_t pos=0,size_t n=npos):</code>将<code>sring</code>对象初始化为<code>str</code> 从位置<code>pos</code>开始到结尾的字符，或从位置<code>pos</code>开始的<code>n</code>个字符。会判断字符串结尾标志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string s1 = &quot;hello world&quot;;</span><br><span class="line">string s8(s1, 3, 5);</span><br><span class="line">cout &lt;&lt; &quot;s8=&quot; &lt;&lt; s8.c_str() &lt;&lt; endl;</span><br><span class="line">string s9(s1, 3);//从第三个位置开始，截取后面全部内容 lo world</span><br><span class="line">cout &lt;&lt; &quot;s9=&quot; &lt;&lt; s9.c_str() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;s9.capacity()=&quot; &lt;&lt; s9.capacity() &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;s9.size()=&quot; &lt;&lt; s9.size() &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>6）<code>template&lt;class T&gt; string(T begin,T end)</code>:将<code>string</code>对象初始化为区间[begin,end]内的字符,其中 begin 和 end 的行为就像指针，用于指定位置，范围包括 begin 在内，但不包括 end<br>7）string(size_t n,char c): 创建一个由 n 个字符 c 组成的 string 对象。</p><p>C++11新增的构造函数:<br> 1)string(string &amp;&amp; str) noexcept: 它将一个 string 对象初始化为 string 对象 str,并可能修改str(移动构造函数)。(要学习了右值引用之后才知道它)<br>2)<code>string(initializer_list&lt;char&gt; il)</code>: 它将一个<code>string</code>对象初始化为初始化列表il中的字符。例如: string ss &#x3D;{‘h’,’e’,’l’,’l’,’o’}; </p><h4 id="8-string容器设置目标"><a href="#8-string容器设置目标" class="headerlink" title="8. string容器设置目标"></a>8. string容器设置目标</h4><p>弄清楚string容器设计目标<br>char cc[8];&#x2F;&#x2F;是使用了连续的8个存储空间，<br>是以字节为最小存储单元的动态容器<br>用于存储放过字符串（不存放空字符0，空字符0是C风格字符串）<br>用于存放数据的内存空间（缓冲器），在这种情况下，什么样的数据都可以放到容器中</p><p>string内部的三个指针<br><code>char *start_</code>;动态分配内存块开始的地址<br><code>char *end_</code>;动态分配内存块最后的地址<br><code>char *finish_</code>;已使用空间的最后的地址<br>因为有这三个指针，所以，用它存放字符串的时候，不需要空字符0</p><h4 id="9-string容器设置目标"><a href="#9-string容器设置目标" class="headerlink" title="9. string容器设置目标"></a>9. string容器设置目标</h4><h4 id="10-vector-容器"><a href="#10-vector-容器" class="headerlink" title="10. vector 容器"></a>10. vector 容器</h4><p>vector容器封装了动态数组<br>包含头文件：<code>#include&lt;vector&gt;</code><br>vector类模板的声明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T, class Alloc = allocator&lt;T&gt;&gt;</span><br><span class="line">class vector</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">T *start_;</span><br><span class="line">T *finish_;</span><br><span class="line">T *end_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分配器<br>各种STL容器模板都接受一个可选的模板参数，该参数指定使用哪个分配器对象来管理内存如果省略该模板参数的值，将默认使用<code>allocator&lt;T&gt;</code>，用<code>new</code>和<code>delete</code>分配和释放内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//创建一个空的 vector 容器</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">cout &lt;&lt; &quot;v1.capacity()=&quot; &lt;&lt; v1.capacity() &lt;&lt; &quot;  , v1.size()=&quot; &lt;&lt; v1.size() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//创建 vector 容器，元素个数为8（容量和实际大小都是n）</span><br><span class="line">vector&lt;int&gt; v2(8);</span><br><span class="line">cout &lt;&lt; &quot;v2.capacity()=&quot; &lt;&lt; v2.capacity() &lt;&lt; &quot;  , v2.size()=&quot; &lt;&lt; v2.size() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="11-迭代器-其实就是像数组一样的访问他的元素"><a href="#11-迭代器-其实就是像数组一样的访问他的元素" class="headerlink" title="11. 迭代器(其实就是像数组一样的访问他的元素)"></a>11. 迭代器(其实就是像数组一样的访问他的元素)</h4><p>为什么要使用迭代器<br>迭代器是访问容器中元素的通用方法。<br>如果使用迭代器，不同的容器，访问元素的方法是相同的。<br>迭代器支持的基本操作:赋值 <code>(=)</code>、解引用<code>(*)</code>、比较 <code>(==和!=)</code>、从左向右遍历 <code>(++)</code><br>一般情况下，迭代器是指针和移动指针的方法</p><p>迭代器有五种分类:<br>1）正向迭代器<br>只能使用++运算符来遍历容器，每次沿容器向右移动一个元素。<br>容器名&lt;元素类型&gt;::iterator 迭代器名;&#x2F;&#x2F; 正向迭代器<br>容器名&lt;元素类型&gt;::const_iterator 迭代器名; &#x2F;&#x2F; 常正向选代器</p><p>迭代器失效问题</p><p>迭代器的实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">//自定义一个数组类型，实现元素的添加，修改，移除，遍历</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">//迭代器 ：遍历容器，获取容器中的元素数据 ,进行某些操作 * ++ -- !=  </span><br><span class="line">class IntIterator </span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">IntIterator(int*p)</span><br><span class="line">&#123;</span><br><span class="line">ptr = p;</span><br><span class="line">&#125;</span><br><span class="line">int&amp; operator*()</span><br><span class="line">&#123;</span><br><span class="line">return *ptr;</span><br><span class="line">&#125;</span><br><span class="line">void operator++()//前置</span><br><span class="line">&#123;</span><br><span class="line">++ptr;</span><br><span class="line">&#125;</span><br><span class="line">bool operator!=(const IntIterator&amp;it)</span><br><span class="line">&#123;</span><br><span class="line">return ptr != it.ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int*ptr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//在不考虑任何意外的情况下实现</span><br><span class="line">class Array</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">//行为</span><br><span class="line">Array(int capacity = 1)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;capacity = capacity;</span><br><span class="line">_size = 0;</span><br><span class="line">data = new int[this-&gt;capacity];</span><br><span class="line">&#125;</span><br><span class="line">~Array()</span><br><span class="line">&#123;</span><br><span class="line">delete []data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void append(int value)//从后面添加一个元素</span><br><span class="line">&#123;</span><br><span class="line">data[_size++] = value;</span><br><span class="line">&#125;</span><br><span class="line">void pop_back()//从后面移除一个元素</span><br><span class="line">&#123;</span><br><span class="line">_size--;</span><br><span class="line">&#125;</span><br><span class="line">void replace(int index,int value)//修改指定位置的值</span><br><span class="line">&#123;</span><br><span class="line">//不能越界</span><br><span class="line">data[index] = value;</span><br><span class="line">&#125;</span><br><span class="line">int size()const</span><br><span class="line">&#123;</span><br><span class="line">return _size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IntIterator begin()//返回首元素的地址</span><br><span class="line">&#123;</span><br><span class="line">return IntIterator(data);//创建了一个迭代器</span><br><span class="line">&#125;</span><br><span class="line">IntIterator end()//返回最后一个元素的下一个位置的地址</span><br><span class="line">&#123;</span><br><span class="line">return IntIterator(data+_size);//创建了一个迭代器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int capacity;//容量，最多能够容纳的元素个数</span><br><span class="line">int*data;</span><br><span class="line">int _size;//已经存储的元素个数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Array arr&#123;10&#125;;</span><br><span class="line"></span><br><span class="line">arr.append(10);</span><br><span class="line">arr.append(20);</span><br><span class="line">arr.append(30);</span><br><span class="line"></span><br><span class="line">//cout &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">arr.pop_back();</span><br><span class="line"></span><br><span class="line">//用迭代器对数组进行遍历</span><br><span class="line">for(IntIterator it = arr.begin();it != arr.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;*it = &quot; &lt;&lt; *it &lt;&lt; endl;//</span><br><span class="line">&#125;</span><br><span class="line">//auto :根据对象的值，自动去推导其类型</span><br><span class="line">for(auto it = arr.begin();it != arr.end();++it)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;*it = &quot; &lt;&lt; *it &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12-基于范围的for循环"><a href="#12-基于范围的for循环" class="headerlink" title="12.基于范围的for循环"></a>12.基于范围的for循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vv = &#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line"></span><br><span class="line">for(auto it = vv.begin(); it!= vv.end(); it++)//迭代器遍历容器vv</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt; *it &lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for(auto val:vv)//用基于范围的for循环遍历容器vv.</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt; val &lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt; endl;</span><br></pre></td></tr></table></figure><p><code>for(int val:vv)</code> 相当于把容器vv中的元素逐个赋值给变量val<br>对于一个有范围的集合来说，在程序代码中指定循环的范围有时候是多余的，还可能犯错误。<br>C++11中引入了基于范围的for 循环。<br>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(迭代的变量：迭代的范围)</span><br><span class="line">&#123;</span><br><span class="line">//循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）迭代的范围：可以填数组名、容器名、统一初始化列表或者其它可迭代的对象（支持begin()、end0、++、&#x3D;&#x3D;）<br>迭代的变量：一般用<code>auto</code>关键字声明<br>2）数组名传入函数后，已退化成指针，不能作为容器名。<br>3）如果容器中的元素是结构体和类，迭代器变量应该申明为引用，加const约束表示只读。<br>4）注意迭代器失效的问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(const auto &amp;val:vv)//用基于范围的for循环遍历容器vv.</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt; val &lt;&lt;&quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt; endl;</span><br></pre></td></tr></table></figure><h4 id="13-list容器"><a href="#13-list容器" class="headerlink" title="13.list容器"></a>13.list容器</h4><p>list容器封装了双链表。<br>包含头文件 <code>#include &lt;list&gt;</code><br>统一初始化列表的语法：构造函数的形参是这个<code>initializer list&lt;T&gt; il</code>,完整语法<code>list(initializer list&lt;T&gt; il)</code>就有三种初始化写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用统一初始化列表创建list容器</span><br><span class="line">list&lt;int&gt; l2(&#123;1,2,3,4,5,6,7,8,9,10&#125;);</span><br><span class="line">list&lt;int&gt; l3 = &#123;1,2,3,4,5,6,7,8,9,10&#125;；</span><br><span class="line">list&lt;int&gt; l4 &#123;1,2,3,4,5,6,7,8,9,10&#125;</span><br></pre></td></tr></table></figure><h4 id="14-list容器的操作"><a href="#14-list容器的操作" class="headerlink" title="14.list容器的操作"></a>14.list容器的操作</h4><h4 id="15-pair键值对"><a href="#15-pair键值对" class="headerlink" title="15.pair键值对"></a>15.pair键值对</h4><p>pair是类模板，一般用于表示key&#x2F;value数据，其实现是结构体<br>pair结构模板的定义如下：（C++中类和模板是同一种，类可以做成模板，结构体也可以做成模板）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">teamplate&lt;class T1, class T2&gt;</span><br><span class="line">struct pair</span><br><span class="line">&#123;</span><br><span class="line">T1 first;//第一个成员，一般表示KEY.</span><br><span class="line">T2 second;//第二个成员，一般表示value</span><br><span class="line"></span><br><span class="line">pair();//默认构造函数</span><br><span class="line">pair(const T1 &amp;val,const T2 &amp;val2);//有两个参数的构造函数</span><br><span class="line"></span><br><span class="line">pair(const pair&lt;T1,T2&gt; &amp;p);// 拷贝构造函数</span><br><span class="line">void swap(pair&lt;T1,T2&gt; &amp;p);// 交换两个 pair。</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>make_pair函数模板的定义如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">teamplate&lt;class T1, class T2&gt;</span><br><span class="line">make_pair(const T1 &amp;first,const T2 &amp;second)</span><br><span class="line">&#123;</span><br><span class="line">return pair&lt;T1,T2&gt;(first,second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>STL定义了pair结构体模板和make_pair函数模板</p><p>下面两个函数，每个只会调用一次构造函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto p4 = make_pair&lt;int,string&gt;(6,&quot;西施&quot;);//make_pair返回临时对象</span><br><span class="line">auto p5 = pair&lt;int,string&gt;(5,&quot;西施&quot;);//匿名对象</span><br><span class="line">auto p6 = make_pair(6,&quot;西施&quot;);//慎用，make_pair()函数自动推导，再调用拷贝构造，再调用拷贝构造</span><br><span class="line">pair&lt;int,string&gt; p7 = make_pair(7,&quot;西施&quot;)；//慎用，make_pair()函数自动推导，再调用拷贝构造，在转换</span><br></pre></td></tr></table></figure><p>注意：<br><code>auto p5 = pair&lt;int,string&gt;(5,&quot;西施&quot;);</code>这行代码不要理解为先创建匿名对象，然后再调用拷贝构造函数创建对象p5；可以理解为先创建匿名对象，然后用了p5的名字；或者直接理解为：创建对象p5时，显式的调用了构造函数。<br><code>auto p4 = make_pair&lt;int,string&gt;(6,&quot;西施&quot;);</code>：不要理解为，make_pair创建了临时对象，函数返回后，P4使用拷贝函数；可以理解为和上面一样，是编译器做了优化处理<br>不同编译器可能会有点不同</p><p>pair键值对得value还可以用结构体和类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;</span><br><span class="line">struct data_info</span><br><span class="line">&#123;</span><br><span class="line">T data1;</span><br><span class="line">T data2;</span><br><span class="line">T data3;</span><br><span class="line"></span><br><span class="line">data_info(T data1, T data2, T data3) :data1(data1), data2(data2), data3(data3)</span><br><span class="line">&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">pair&lt;data_info&lt;int&gt;, string&gt;p4(&#123;43,9,03&#125;,&quot;西施&quot;);</span><br><span class="line">cout &lt;&lt; p4.first.data1 &lt;&lt; p4.first.data2 &lt;&lt; p4.first.data3 &lt;&lt; p4.second &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-红黑树"><a href="#15-红黑树" class="headerlink" title="15.红黑树"></a>15.红黑树</h4><p>二叉链表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">struct BTNode</span><br><span class="line">&#123;</span><br><span class="line">pair&lt;K,V&gt;P;//键值对。</span><br><span class="line">BTNode*parent;//父节点</span><br><span class="line">BTNode*lchirld;//左子树</span><br><span class="line">BTNode*rchild;//右子树 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="16-map容器"><a href="#16-map容器" class="headerlink" title="16.map容器"></a>16.map容器</h4><p>map容器封装了红黑树(平衡二排序树)，用于查找。<br>包含头文件: <code>#ihclude&lt;map&gt;</code><br>map容器的元素是pair键值对。<br>map类模板的声明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class K, class V, class P = less&lt;K&gt;, class Alloc = allocator&lt;pair&lt;const K, V &gt;&gt;&gt;</span><br><span class="line">class map : public _Tree&lt;Tmap_traits&lt; K, V, P,_ Alloc, false&gt;&gt; </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个模板参数K:key的数据类型(pair.first)<br>第二个模板参数V: value 的数据类型 (pair.second)。<br>第三个模板参数P:排序方法，缺省按 key升序。<br>第四个模板参数 <code>_Alloc</code>:分配器，缺省用 new和 delete。<br>红黑树使用二叉链表，map可以提供双向迭代器</p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//map() 创建一个空的map容器</span><br><span class="line">map&lt;int, string&gt; m1;</span><br><span class="line"></span><br><span class="line">//map(initializer_list&lt;pair&lt;k,v&gt;&gt;il) 使用统一初始化列表</span><br><span class="line">map&lt;int, string&gt; m2(&#123; &#123;8,&quot;西施&quot;&#125;,&#123;3,&quot;冰冰&quot;&#125;,&#123;4,&quot;晶晶&quot;&#125; ,&#123;5,&quot;欢欢&quot;&#125; &#125;);</span><br><span class="line">//map&lt;int, string&gt; m2 = &#123; &#123;8,&quot;西施&quot;&#125;,&#123;3,&quot;冰冰&quot;&#125;,&#123;4,&quot;晶晶&quot;&#125; ,&#123;5,&quot;欢欢&quot;&#125;&#125;;</span><br><span class="line">//map&lt;int, string&gt; m2&#123; &#123;8,&quot;西施&quot;&#125;,&#123;3,&quot;冰冰&quot;&#125;,&#123;4,&quot;晶晶&quot;&#125; ,&#123;5,&quot;欢欢&quot;&#125;&#125;;</span><br><span class="line">for ( auto &amp;val:m2)//map正向遍历</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; val.first &lt;&lt; &quot;=&quot; &lt;&lt; val.second &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器一般有的操作：<br>构造函数、特性操作、元素操作、复制操作、交换操作、比较操作、查找操作、插入和删除操作</p><h4 id="16-哈希-x2F-散列表"><a href="#16-哈希-x2F-散列表" class="headerlink" title="16.哈希&#x2F;散列表"></a>16.哈希&#x2F;散列表</h4><p>哈希表：数组+链表<br>哈希表长（桶的个数）：数组的长度<br>哈希函数：size_t hash(const T&amp;key)<br>{<br>    &#x2F;&#x2F;key%小于哈希表长的最大质数<br>}<br>装填因子：元素总数&#x2F;表长，其值越大，效率越低。</p><h4 id="17-unordered-map容器-C-11标准新增加的-无序的容器"><a href="#17-unordered-map容器-C-11标准新增加的-无序的容器" class="headerlink" title="17.unordered_map容器(C++11标准新增加的) 无序的容器"></a>17.unordered_map容器(C++11标准新增加的) 无序的容器</h4><p>实际开发中数据量只有几万，用红黑树也不错。如果数据量达到上千万，必须用哈希表<br>unordered_map 容器封装了哈希表，查找、插入和删除元素时，只需要比较几次 key 的值。<br>包含头文件: <code>#include&lt;unordered_map&gt;</code><br>unordered_map 容器的元素是 pair键值对。<br>unordered_map 类模板的声明:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template &lt;class K, class V, class _Hasher = hash&lt;K&gt;, class _Keyeq = equal_to&lt;K&gt;,class _Alloc = allocator&lt;pair&lt;const K, V&gt;&gt;&gt;</span><br><span class="line">class unordered_map : public _Hash&lt; Umap_traits&lt;K, V,_Uhash_compare&lt;K,_Hasher,_Keyeq&gt;,_Alloc,false&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个模板参数K:key的数据类型(pair.first)。<br>第二个模板参数V: value 的数据类型(pair.second)<br>第三个模板参数_Hasher: 哈希函数，默认值为 <code>std::hash&lt;K&gt;</code><br>第四个模板参数_Keyeq:比较函数，用于判断两个 key 是否相等，默认值是 <code>std:equal to&lt;K&gt;</code><br>第五个模板参数_Alloc: 分配器，缺省用 new 和delete。</p><p>创建std::unordered_map 类模板的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class K,class V&gt;</span><br><span class="line">using umap = std::unordered_map&lt;K, V&gt;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">C++学习笔记</summary>
    
    
    
    <category term="C++" scheme="https://goupos.top/categories/C/"/>
    
    
    <category term="C++" scheme="https://goupos.top/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>MDK KEIL创建多项目-多工程编译</title>
    <link href="https://goupos.top/2023/10/31/MDK%20KEIL/MDK%20KEIL%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B-%E5%A4%9A%E5%B7%A5%E7%A8%8B%E7%BC%96%E8%AF%91/"/>
    <id>https://goupos.top/2023/10/31/MDK%20KEIL/MDK%20KEIL%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B7%A5%E7%A8%8B-%E5%A4%9A%E5%B7%A5%E7%A8%8B%E7%BC%96%E8%AF%91/</id>
    <published>2023-10-31T03:30:34.000Z</published>
    <updated>2023-11-01T09:29:07.305Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><ol><li><p>首先说明一下多工程的作用：<br>假如你写了一个boot和一个app等好几个工程，当如果这几个工程同用一个文件，你修改了以后，意味着所有的工程都需要重新编译，一个一个工程编译就带来了困难。</p></li><li><p>开始创建多工程</p></li></ol><p>1)你已经创建了两个以及以上的前提上<br>2)创建多工程（多工程其实也是一个工程）<br>方法：点击 <code>Project</code> -&gt; <code>New Multi-Project Workspace...</code> -&gt; 填写工程名字，放置在选择的文件夹,然后保存 -&gt; 会弹出提示框 <code>Create New xxxx-Project Workspace </code> 在 <code>uVision Projects</code>添加项目路径（如果不添加路径无法保存） -&gt; 点击 <code>OK</code><br>3)如果还想继续添加工程到当前项目中，可以找到界面上这个图标，如下是路径：<br>方法：点击 <code>Project</code> -&gt; <code>manage</code> -&gt; <code>New Multi-Project Workspace...</code><br>4）所有工程全编译<br>方法：找到界面中 <code>Batch Build</code> 下拉 -&gt; <code>Batch Setup</code> -&gt; <code>Select All</code> -&gt; <code>Close</code><br>再次点击<code>Batch Build</code> 下拉 -&gt; <code>Batch Rebuild</code><br>5）选择工程目录<br>方法：界面中点击 <code>Project</code> 目录中需要选中的项目，右击鼠标 -&gt; <code>Set as Active Project</code>  </p>]]></content>
    
    
    <summary type="html">MDK KEIL创建多工程-多工程编译</summary>
    
    
    
    <category term="MDK KEIL" scheme="https://goupos.top/categories/MDK-KEIL/"/>
    
    
    <category term="MDK KEIL" scheme="https://goupos.top/tags/MDK-KEIL/"/>
    
  </entry>
  
</feed>
