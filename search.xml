<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>公告</title>
    <url>/2022/05/19/%E5%85%AC%E5%91%8A/</url>
    <content><![CDATA[<blockquote>
<p>博客的通知公告<br>如果遇到需要密码的博客文章，博客状态有几种状态：<br>1.博客正在完善，或者有部分不对的地方需要修改，<br>2.博客完善，但是付出了一定的代价，所以闭源。<br>如果查看打开加密文章，请通过邮箱联系本人 <a href="mailto:&#x78;&#x67;&#109;&#99;&#x72;&#x65;&#97;&#116;&#x65;&#x40;&#102;&#111;&#120;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x78;&#x67;&#109;&#99;&#x72;&#x65;&#97;&#116;&#x65;&#x40;&#102;&#111;&#120;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#109;</a><br>博客资料源如果涉及到版权问题，请联系作者，可以将资料源删除或者闭源，或者添加版权信息。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>博客作者个人简历</title>
    <url>/2022/04/28/%E4%B8%AA%E4%BA%BA%E5%A4%A7%E4%BA%8B/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e099d68fa4fc1e25d1eec6d7a2f7d0c0e86a3c60d5ea174d6e970229436846f4">33b6c39d002ebceceb3e747ef576ef82efd06357e8f183a69e435032de79e80d472ffa5747c886765ba8745f4bb62fa67a1a991fdf8931c9dac47ed1ad2294db8b7b001c19bdc633d36b1199b4787c2bd3a18f52802ccd85d804043d725d86fabb9b35ba21b05c09b8f34fbc70e598be4514d2d77b3ef0df28e0d233cca23faaa8bca178e5db7e4238f9115c95fd42fb3339e7cb849ed20d5aedb3b25e3bde7cebc71c48c953ffc93cf73775f3ccb78b38abe9cd5cbfbfdee3c6612e5d33bdb4c8d8b714f59d87eaa6cc02d6a11fc85534a6cfad0d334b91a63544143929dfe36c02fd17045bc8132d45f00d0655b524980517fa5df664b51364f95192681827a3c99082527cbaf98298e162a12c3651aa2b0dce91816381e25c2e6a28b6048056b2fb7864c969f8ffead37b2e59fae61cf90a349967ea76784464f26faa762c518365c39a187c9f70740c3c0172a236a4b05d6c16ee1ba4fed0121066fa051d2839711c6ff031fa029edbcc24634eb82d4ac43f5830d8add7d1f1cd78b9790ec435a84ca730feff619ba2b6783a44b9b913823dd9ffb9f3b01bbd41cb8b32ef0f5da7526cedb59f04ae944aa14567a2d80c47d731460fba98dc9308c2342e72bb5b7ce57b4ea98bf7072bf9177f072a06dbfb05915b4b136d4bec192b80bb5be309ca416136eebab1d24b8a58219b76b8726d91dc27c09d2971e7fde469d2f8938af1e60d82e8a3df1f76b34883c10ae6d46b322f1c4d1ad359c6709e5faa8b0c718d588b2485a7273b108544c82a9911b4c590a48a5af6e6e3d8764c321b82fcc5dc20e30580d6512a3c0c593b17f32ed7b8ade9907b21dcfce9c3229469171808bf4d331e069d5f1b1293f458ee2acc0d475ad21a47b75fb0c894f1cdc5b50d38048a8c4a77134f00a918080c65ea44986fd1316036485aa981ce373667bfee1ec03b8312842ab781e4da9b81157003eedcbf8e6c0359e2732e5f93c278d671f56528d1ea52e02d493f361e16da5de3688db58e8deec14706f3b8d177b4b5abd24a9aaf70d42c12791d46eb8e764975fcbb75abef928be534b376595adcdb7495199144b305f66d43a52874bde58f5dfa0d3ac771eda774fd5eaa84d922bb4139104c9d230ab301ba405f47c37c40566aa95e7aa99e50bd2c3e59d59720e81bfd916397ece81697528b851a2821111a7a11d7bd431dce79d869cfa57ef60f394c0461970ef41797c845886e002aef</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>简历</category>
      </categories>
      <tags>
        <tag>个人简历</tag>
      </tags>
  </entry>
  <entry>
    <title>IAR Embedded错误以及问题解决方法</title>
    <url>/2023/09/08/IAR%20Embedded/IAR_Embedded%E9%94%99%E8%AF%AF%E4%BB%A5%E5%8F%8A%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<span id="more"></span>

<h5 id="IAR出现错误：Get-Alternative-File-解决办法"><a href="#IAR出现错误：Get-Alternative-File-解决办法" class="headerlink" title="IAR出现错误：Get Alternative File 解决办法"></a>IAR出现错误：Get Alternative File 解决办法</h5><ol>
<li>解决方法：点击 Project -&gt; Rebuild All </li>
<li>错误原因：出现这种错误的大多数原因是直接用例程，而例程在人家电脑上编译的，对应的路径文件也是人家电脑上的，所以必须重新rebuild一下对应到自己的电脑上。</li>
</ol>
]]></content>
      <categories>
        <category>IAR Embedded</category>
      </categories>
      <tags>
        <tag>IAR Embedded</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM汇编语言(1)</title>
    <url>/2023/09/04/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/ARM%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(1)/</url>
    <content><![CDATA[<span id="more"></span>




]]></content>
      <categories>
        <category>汇编语言</category>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言关键字执行顺序</title>
    <url>/2023/09/02/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/c%E8%AF%AD%E8%A8%80%E5%85%B3%E9%94%AE%E5%AD%97%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<span id="more"></span>

<h4 id="1-for-关键字执行顺序。"><a href="#1-for-关键字执行顺序。" class="headerlink" title="1. for 关键字执行顺序。"></a>1. <code>for</code> 关键字执行顺序。</h4><figure class="highlight plaintext"><figcaption><span>for</span></figcaption><table><tr><td class="code"><pre><span class="line">#include  &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">uint8_t i = 0;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    for(i = 0 ,printf(&quot;for 1\t&quot;); i &lt; 3 ,printf(&quot;for 2\t&quot;); i++ ,printf(&quot;for 3\t&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;i = %d\n&quot;,i);</span><br><span class="line">        if(i == 3)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 1   for 2   i = 0 初始化时候</span><br><span class="line">for 3   for 2   i = 1 运行时候</span><br><span class="line">for 3   for 2   i = 2</span><br><span class="line">for 3   for 2   i = 3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>c语言关键字执行顺序</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Office中文离线安装包下载地址合集</title>
    <url>/2023/08/31/win%E7%94%B5%E8%84%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/Office%E4%B8%AD%E6%96%87%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<span id="more"></span>





]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>BAT文件</title>
    <url>/2023/08/29/win%E7%94%B5%E8%84%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/BAT%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<span id="more"></span>

<blockquote>
<p>参考源<br>正在编写</p>
</blockquote>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>win纯净系统安装注册等</title>
    <url>/2023/08/27/win%E7%94%B5%E8%84%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/win%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<span id="more"></span>
<blockquote>
<p>由于图库存在问题，暂时没有图片<br>需要准备的，需要准备一台电脑和一个U盘，建议选择USB3.0或以上的，这样插在USB3.0接口上，安装系统更快，U盘大小选择8G</p>
</blockquote>
<h1 id="1-原装-windows-点击此处进入：windows系统"><a href="#1-原装-windows-点击此处进入：windows系统" class="headerlink" title="1. 原装 windows 点击此处进入：windows系统"></a>1. 原装 <code>windows</code> 点击此处进入：<a href="https://www.microsoft.com/zh-cn/software-download/">windows系统</a></h1><ol>
<li>安装教程如下视频：（引用别人视频，可以登入bilbil账号查看高清）</li>
<li>选择想要安装的系统点击进入，选择立即下载工具，然后安装工具，根据安装提示操作，制作操作系统选择U盘制作，下面是视频(个别地方可以根据自己需求修改)<iframe src="//player.bilibili.com/player.html?aid=342656275&bvid=BV1e94y1y7zS&cid=752740223&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li>
</ol>
<h1 id="2-windows注册"><a href="#2-windows注册" class="headerlink" title="2.windows注册"></a>2.windows注册</h1><ol>
<li>注册成专业版，以 <code>管理员身份</code> 启动 &#96;cmd.exe（命令提示符）,依次输入如下代码(注意一定要用管理员启动，否则可能注册失败)<br>下面两个注册码任选一个<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ipk 33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure></li>
<li>关于如何使用使用 <code>管理员身份</code> 启动 <code>cmd.exe（命令提示符）</code>：<br> 方法一、可以在win左下角搜索框中输入 <code>cmd.exe</code> 然后右击会提示管理员启动；<br> 方法二、按下<code>win</code> + <code>r</code>按键（如下视频中会有），然后在任务栏中找到 <code>cmd.exe（命令提示符）</code>鼠标右击可以看到命令提示符，然后选择命令提示符再次右击，就可以看到以管理员身份运行，然后再输入上面的命令。</li>
<li>相关参考视频可以参考如下<iframe src="//player.bilibili.com/player.html?aid=637362623&bvid=BV1jb4y1p7mr&cid=549239255&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li>
</ol>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>娱乐C语言</title>
    <url>/2023/08/26/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/%E5%A8%B1%E4%B9%90C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<span id="more"></span>
<blockquote>
<p>收集娱乐C代码(只为了收集不做任何其他用)<br>点击 <code>0</code> 项，可以直接导航到在线编译器，可以验证下列代码以及猜想,欢迎提供更多娱乐代码</p>
</blockquote>
<h5 id="0-代码验证导航"><a href="#0-代码验证导航" class="headerlink" title="0.代码验证导航"></a>0.<a href="https://rextester.com/l/c_online_compiler_gcc"><code>代码验证导航</code></a></h5><h5 id="1-娱乐代码示例一：使用-替换所有-参考于网友给的截图-图一乐就好"><a href="#1-娱乐代码示例一：使用-替换所有-参考于网友给的截图-图一乐就好" class="headerlink" title="1. 娱乐代码示例一：使用 - 替换所有 (参考于网友给的截图,图一乐就好)"></a>1. 娱乐代码示例一：使用 <code>-</code> 替换所有 (参考于网友给的截图,图一乐就好)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define __ main</span><br><span class="line">#define _____ int</span><br><span class="line">#define ___ printf</span><br><span class="line">#define ____ &quot;TIME&quot;</span><br><span class="line">#define ______ return</span><br><span class="line">#define _______ 0</span><br><span class="line">#define _ ;</span><br><span class="line">#define ________ &quot;%s\n&quot;</span><br><span class="line">#define _________ &quot;test&quot;</span><br><span class="line">#define __________ (</span><br><span class="line">#define ___________ )</span><br><span class="line">#define ____________ ,</span><br><span class="line"></span><br><span class="line">_____ __()</span><br><span class="line">&#123;</span><br><span class="line">    ___ __________ ________ ____________ _________ ___________ _</span><br><span class="line">    ___ __________ ________ ____________ ____ ___________ _</span><br><span class="line">    ______ _______ _</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>运行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">test</span><br><span class="line">TIME</span><br></pre></td></tr></table></figure>

<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5>]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>娱乐C语言</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>GD32芯片索引</title>
    <url>/2023/08/22/GD32/GD32%E8%8A%AF%E7%89%87%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<blockquote>
<p>此文件只是问题索引，不展示任何数据</p>
</blockquote>
<span id="more"></span>
<h1 id="1-问题索引"><a href="#1-问题索引" class="headerlink" title="1.问题索引"></a>1.问题索引</h1><h1 id="2-笔记索引"><a href="#2-笔记索引" class="headerlink" title="2.笔记索引"></a>2.笔记索引</h1>]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>GD32芯片故障与原因</title>
    <url>/2023/08/22/GD32/GD32%E8%8A%AF%E7%89%87%E6%95%85%E9%9A%9C%E4%B8%8E%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>GD32芯片笔记</title>
    <url>/2023/08/22/GD32/GD32%E8%8A%AF%E7%89%87%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>USB复合和组合设备</title>
    <url>/2023/05/27/USB%E8%AE%BE%E5%A4%87%E5%BC%80%E5%8F%91/USB%E5%A4%8D%E5%90%88%E5%92%8C%E7%BB%84%E5%90%88%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<blockquote>
<p>文章参考源<br>1.<a href="1">STM32 USB复合设备编写</a><br>2.<a href="2">USB组合设备 Interface Association Descriptor (IAD)</a><br>3.<a href="3">STM32 USB复合设备(VCP虚拟串口+HID键盘)详解</a></p>
</blockquote>
<p>Communication Device Class，简称CDC<br>USB Compound Device，USB复合设备<br>USB Composite Device，USB组合设备</p>
]]></content>
      <categories>
        <category>USB</category>
      </categories>
      <tags>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机hex和bin​文件有什么区别</title>
    <url>/2023/04/12/STM32/%E5%8D%95%E7%89%87%E6%9C%BAhex%E5%92%8Cbin%E2%80%8B%E6%96%87%E4%BB%B6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>参考源：<br><a href="https://developer.arm.com/search#q=intel%20hex%20file%20format&cf[navigationhierarchiesproducts]=Tools%20and%20Software">Hex文件格式</a><br><a href="https://developer.arm.com/search#q=axf%20file%20format&cf[navigationhierarchiesproducts]=Tools%20and%20Software">axf文件格式</a><br><a href="https://developer.arm.com/search#q=bin&cf[navigationhierarchiesproducts]=Tools%20and%20Software">Bin文件格式</a></p>
</blockquote>
<span id="more"></span>

<p>1.这里就不介绍Hex和bin文件了。</p>
<hr>
<h1 id="bin文件"><a href="#bin文件" class="headerlink" title="bin文件"></a>bin文件</h1><ol>
<li><p>bin 是 binary 的缩写，直白的翻译即为二进制文件，在这里理解为可执行的机器代码（程序）文件，因为计算机存储只有 0 和 1。</p>
</li>
<li><p>bin 除了是程序文件的含义，还有其他含义，比如虚拟光驱文件，我们下载的一个 Windows 镜像文件后缀就可能是bin。</p>
</li>
<li><p>bin 相对于hex、axf是一种最简单的程序文件，只有程序数据，程序文件有多大，程序也就多大。</p>
</li>
<li><p>因此，你下载 bin 程序文件的时候，必须要设置起始地址，比如：通过STM32 ST-LINK Utility工具下载bin文件：</p>
</li>
</ol>
<p><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/ju1DzqX8iaOkMLjBwcVQ6LmJaqhEmLL6o6dwibeB5eDiceouM2qbhNugEltFZoAXFyPWjzFywviaLw0ianMvtCOvpKQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1">STM32 ST-LINK</a></p>
<p>而hex则不可修改（文件中包含地址信息）：<br><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/ju1DzqX8iaOkMLjBwcVQ6LmJaqhEmLL6oVnG0tjcX5pbDfnY0xh5ICRjOYqdaZ9a9iaxnzxDaWUFC3MzAvYylicvg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1">STM32 ST-LINK</a></p>
<hr>
<h1 id="Hex文件"><a href="#Hex文件" class="headerlink" title="Hex文件"></a>Hex文件</h1><ol>
<li>hex 格式文件由 Intel 制定的一种十六进制标准文件格式，是由编译器转换而成的一种用于下载到处理器里面的ASCII文本文件。</li>
</ol>
<p><a href="https://en.wikipedia.org/wiki/Intel_HEX">维基百科解释</a></p>
<blockquote>
<p>Intel HEX is a file format that conveys binary information in ASCII text form. It is commonly used for programming microcontrollers, EPROMs, and other types of programmable logic devices. In a typical application, a compiler or assembler converts a program’s source code (such as in C or assembly language) to machine code and outputs it into a HEX file. The HEX file is then imported by a programmer to “burn” the machine code into a ROM, or is transferred to the target system for loading and execution.<br>IntelHEX 是一种以 ASCII 文本格式传递二进制信息的文件格式。它通常用于编程微控制器，EPROM 和其他类型的可编程逻辑器件。在典型的应用程序中，编译器或汇编器将程序的源代码(如 C 或汇编语言)转换为机器代码并输出到 HEX 文件中。HEX 文件然后由程序员导入，将机器代码“刻录”到 ROM 中，或者传输到目标系统进行加载和执行。</p>
</blockquote>
<p><a href="https://www.keil.com/support/docs/1584/">Keil官网解释</a></p>
<blockquote>
<p>The Intel HEX file is an ASCII text file with lines of text that follow the Intel HEX file format. Each line in an Intel HEX file contains one HEX record. These records are made up of hexadecimal numbers that represent machine language code and&#x2F;or constant data. Intel HEX files are often used to transfer the program and data that would be stored in a ROM or EPROM. Most EPROM programmers or emulators can use Intel HEX files.<br>英特尔十六进制文件是一个 ASCII 文本文件，文本行遵循英特尔十六进制文件格式。英特尔十六进制文件中的每一行都包含一条十六进制记录。这些记录由表示机器语言代码和&#x2F;或常量数据的十六进制数组成。英特尔十六进制文件往往是用来传输程序和数据，将存储在 ROM 或 EPROM。大多数 EPROM 程序员或模拟器可以使用 Intel HEX 文件。</p>
</blockquote>
<h2 id="Hex格式"><a href="#Hex格式" class="headerlink" title="Hex格式"></a>Hex格式</h2><p>:BBAAAATT 【D···D】CC</p>
<table>
<thead>
<tr>
<th align="center">行开始</th>
<th align="center">数据长度</th>
<th align="center">地址</th>
<th align="center">数据类型</th>
<th align="center">数据</th>
<th align="center">校验和</th>
</tr>
</thead>
<tbody><tr>
<td align="center">..</td>
<td align="center">BB</td>
<td align="center">AAAA</td>
<td align="center">TT</td>
<td align="center">【D···D】</td>
<td align="center">CC</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">1字节</td>
<td align="center">2字节</td>
<td align="center">1字节</td>
<td align="center">n字节</td>
<td align="center">1字节</td>
</tr>
</tbody></table>
<dl><dt>其中：</dt><dd>代表行开始，固定为冒号:</dd></dl><p>BB代表Bytes，数据长度</p>
<p>AAAA代表Address，地址</p>
<p>TT代表Type，数据类型（标识）</p>
<p>D···D代表Date，数据</p>
<p>CC代表CheckSum，校验和</p>
<p>说明：</p>
<p>BB数据长度，也就是D···D这个字段的数据长度；</p>
<p>AAAA地址，起始地址、偏移地址，根据数据类型(TT)有关；</p>
<p>TT数据类型（标识）：</p>
<p>00：数据标识</p>
<p>01：文件结束标识</p>
<p>02：扩展段地址</p>
<p>04：线性地址</p>
<p>05：线性开始地址</p>
<p>（地址代表高16位地址，也就是要向左移16bit）这里指的是数据类型中 02 04 05中的地址。</p>
<p>CC校验和计算公式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CheckSum = 0x100 - (Sum &amp; 0xFF)</span><br></pre></td></tr></table></figure>

<h1 id="实例描述Hex"><a href="#实例描述Hex" class="headerlink" title="实例描述Hex"></a>实例描述Hex</h1><p>下面通过一个例子来说明hex。<br>说明一下：不同数据类型的数据略有差异，先再看下00（数据类型）的格式：<br><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/ju1DzqX8iaOkMLjBwcVQ6LmJaqhEmLL6og5Gw843S1aV9TgwuHcVuGyn6IG4hc4FD9kcbRasVo1yp5gb5JKAZlQ/640?wx_fmt=png">00数据类型格式</a></p>
<p>一个常见hex文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:020000040800F2</span><br><span class="line">:1000000000040020B1010008FD020008BD02000844</span><br><span class="line">:10001000F902000801020008350400080000000091</span><br><span class="line">:1000200000000000000000000000000021030008A4</span><br><span class="line">···省略数行</span><br><span class="line">:100470000000024084040008000000200004000086</span><br><span class="line">:040480004804000824</span><br><span class="line">:040000050800019955</span><br><span class="line">:00000001FF</span><br></pre></td></tr></table></figure>

<ol>
<li>04类型：线性地址行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:020000040800F2</span><br></pre></td></tr></table></figure>
<p>02：数据长度，这里是（0800）地址的2字节长度；<br>0000：偏移地址，这里数据其实无效；<br>04：线性地址数据类型；<br>0800：线性起始地址，左移16位，即：0x0800 0000；<br>F2：校验和<br>F2 &#x3D;  0x100 - (0x02 + 0x04 + 0x08)&amp;0xFF;</p>
<p>比如，修改起始地址为0600：<br><a href="https://mmbiz.qpic.cn/sz_mmbiz_png/ju1DzqX8iaOkMLjBwcVQ6LmJaqhEmLL6oPicDyjzRKRcKkPHXNIyo8jK4I2GPYgRoYvjNwDuJtJZqgYTyibVQnAWQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1">修改起始地址</a></p>
<ol start="2">
<li>00类型：数据行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:1000000000040020B1010008FD020008BD02000844</span><br></pre></td></tr></table></figure>
<p>10：数据长度，这里是16字节（程序）数据的长度；</p>
<p>0000：偏移地址，数据第一行偏移0000地址，第二行就是偏移0010，第二行就是偏移0020，依次偏移到FFF0；<br>如果偏移到FFF0，则会重新下一个起始地址，一段程序你就明白了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:10FFD000D0C5CFA20D0A00003052010810B50A4862</span><br><span class="line">:10FFE00002F0FEFC09A002F0FBFC14A002F0F8FCF9</span><br><span class="line">:10FFF0001EA221A123A002F0F3FC2CA002F0F0FC31</span><br><span class="line">:020000040801F1</span><br><span class="line">:10000000394802F0EDFC10BD3C5301080D0A2A20CE</span><br><span class="line">:1000100020202020202020202020202020202020E0</span><br><span class="line">:100020002020202020202020202020414756D6C7F5</span><br></pre></td></tr></table></figure>
<p>00：线性地址数据类型；</p>
<p>00040020B1010008FD020008BD020008：程序数据，就是bin文件里面的纯程序数据；</p>
<p>44：校验和</p>
<p>44 &#x3D;  0x100 - (0x10 + 0x04 + 0x20 + 0xB1 + 0x01 + 0x08 + 0xFD + 0x02 + 0x08 + 0xBD + 0x02 + 0x08 + 0x44) &amp; 0xFF;</p>
<ol start="3">
<li>01类型：文件结束行</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:00000001FF</span><br></pre></td></tr></table></figure>
<p>00：数据长度；</p>
<p>0000：偏移地址，这里数据其实无效；</p>
<p>01：代表文件结束；</p>
<p>FF：校验和</p>
<p>更多细节内容，可以参看链接：<br>[参考源][7]</p>
<h1 id="bin和Hex区别"><a href="#bin和Hex区别" class="headerlink" title="bin和Hex区别"></a>bin和Hex区别</h1><p>bin文件只是单纯的程序数据，hex除程序数据之外还有一定格式数据。<br>在hex之上，还有一种axf文件，而 axf 和 bin、 hex 同样也属于程序文件，差别在于 axf 具有更多的调试信息。<br>用一个表格来区分bin、hex和axf三者的关系：</p>
<table>
<thead>
<tr>
<th align="left">bin</th>
<th align="left">hex</th>
<th align="left">axf</th>
</tr>
</thead>
<tbody><tr>
<td align="left">程序数据</td>
<td align="left">程序数据</td>
<td align="left">程序数据</td>
</tr>
<tr>
<td align="left"></td>
<td align="left">地址、类型、校验等标记信息</td>
<td align="left">地址、类型、校验等标记信息</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left">调试信息</td>
</tr>
</tbody></table>
<hr>
<p>[7]:</p>
]]></content>
  </entry>
  <entry>
    <title>磁珠</title>
    <url>/2023/03/17/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E7%A3%81%E7%8F%A0/</url>
    <content><![CDATA[<h1 id="磁珠的主要参数："><a href="#磁珠的主要参数：" class="headerlink" title="磁珠的主要参数："></a>磁珠的主要参数：</h1><ol>
<li>阻抗：磁珠阻抗是在100MHz时测得的阻抗所确定的。常表示为22R@100MHz，即为磁珠在100MHz下，其阻抗为22Ω。阻抗越大，抑制噪声的效果越好，我理解为阻抗越大，消耗在阻抗上的能量则越大，更容易让噪声以热量形式散出，从而达到抑制效果。</li>
</ol>
<p> 100MHz在某种意义上只是一个标准，此频率并不是磁珠阻抗最大的时刻，因为磁珠在实际的应用中，随着频率的改变，随着电流的变化，阻抗都会相应的发生变化。</p>
<ol start="2">
<li><p>DCR(直流电阻)：指直流电流通过磁珠时，磁珠呈现的电阻值，DCR一般越小越好，对有用信号的衰减越小。</p>
</li>
<li><p>额定电流：指磁珠正常工作时允许的最大电流。</p>
</li>
</ol>
<hr>
<h1 id="磁珠的选型"><a href="#磁珠的选型" class="headerlink" title="磁珠的选型"></a>磁珠的选型</h1><ol>
<li>磁珠频率阻抗曲线中 Z R X分别代表什么意义?<br> Z是阻抗曲线，R是直流电阻曲线，X是电抗曲线。磁珠主要用在高频滤波领域，主要关注阻抗和额定电流。在100MHz电抗达到峰值，阻抗越大，衰减越强滤波效果越好，但是直流损耗也就越大，这里主要看使用的效果，普通磁珠阻抗100到600欧姆，同时要保证电流不能超过额定值。</li>
</ol>
]]></content>
      <categories>
        <category>硬件设计</category>
        <category>磁珠</category>
      </categories>
      <tags>
        <tag>硬件设计</tag>
      </tags>
  </entry>
  <entry>
    <title>TVS选择</title>
    <url>/2023/03/15/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/TVS%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p><a href="https://www.icspec.com/news/article-details/2114340?type=prefecture">TVS文章参考源</a></p>
<hr>
<h1 id="加TVS"><a href="#加TVS" class="headerlink" title="加TVS"></a>加TVS</h1><ol>
<li><p>TVS(Transient Voltage Suppressor)，就是对电路中短暂存在的高电压进行抑制，以免此高电压对电路造成损害，或导致电路工作异常。</p>
</li>
<li><p>抗静电实验标准IEC61000-4-2，其中人体模型HBM(Human Body Model)用来模拟人体放电，机器模型MM(Machine Model)用来模拟金属等物体放电.</p>
</li>
</ol>
<p>对于电容 <strong>i&#x3D;c*du&#x2F;dt</strong> 电压的突变，会导致大的感生电流<br>对于电感 <strong>u&#x3D;L*di&#x2F;dt</strong> 电流的突变，会导致大的感生电压</p>
<hr>
<h1 id="如何选择防护器件"><a href="#如何选择防护器件" class="headerlink" title="如何选择防护器件"></a>如何选择防护器件</h1><p>我们设计一个产品，首先要明确，需要通过哪些标准，以及过什么等级。下面是最常采用的几个标准：<br>IEC 61000-4-2 静电放电抗扰度；<br>IEC 61000-4-4 电快速瞬变脉冲群抗扰度；<br>IEC 61000-4-5 浪涌抗扰度；</p>
<hr>
<h1 id="TVS主要参数"><a href="#TVS主要参数" class="headerlink" title="TVS主要参数"></a>TVS主要参数</h1><ol>
<li><p>Vrwm(Maximum continuous Reverse Working Voltage ) 最高工作电压，或者说截止电压。就是说，加这个电压时，管子仍然是截止的，或者说漏过去的电流非常小。那么超过这个最高工作电压，会怎么样呢？这里要注意，电压超过Vrwm后，TVS并不会马上动作，也不像有的文章说的会劣化，损坏，而是漏电流增加的速度快一些。</p>
</li>
<li><p>VBR(Breakdown Voltage) 击穿电压。当电压超过此电压，漏电流开始急剧增加。这里所谓击穿，不能理解为器件损坏，而是正常动作。</p>
</li>
<li><p>Vc(Clamping Voltage) 钳位电压。这也是一个重要指标，就是当一个电压很高的脉冲来了，TVS器件从截止状态，变为导通状态，电压被钳制在一个比较低的水平，电流从TVS通过，回流到地，从而保护了后级电路。</p>
</li>
<li><p>Ipp(Peak Pulse Current) 峰值脉冲电流。器件所能承受的最大脉冲电流。注意是脉冲，脉冲，脉冲，重要的事情说三遍。如果连续通过这么大的电流，马上死翘翘。Ipp乘上Vc 基本上等于器件峰值功率Ppp(Peak Pulse Power)。我们评估器件时，如果脉冲宽度比较窄，那么最大电流可以超过Ipp，相反，如果脉冲宽度比较宽，电流小于Ipp 也会造成器件损坏。</p>
</li>
<li><p>Cj(Junction Capacitor) 结电容。低速电路不用管，如果是高速电路，这个电容会导致信号变形。此电容越小越好。</p>
</li>
</ol>
<hr>
<h1 id="参考视频"><a href="#参考视频" class="headerlink" title="参考视频"></a>参考视频</h1><iframe src="//player.bilibili.com/player.html?aid=427304337&bvid=BV1w3411g7An&cid=742504168&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>


]]></content>
      <categories>
        <category>硬件设计</category>
        <category>TVS</category>
      </categories>
      <tags>
        <tag>硬件设计</tag>
      </tags>
  </entry>
  <entry>
    <title>差模电感与共模电感</title>
    <url>/2023/03/11/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/%E7%A1%AC%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E5%B7%AE%E6%A8%A1%E7%94%B5%E6%84%9F%E4%B8%8E%E5%85%B1%E6%A8%A1%E7%94%B5%E6%84%9F/</url>
    <content><![CDATA[<h1 id="电感说明"><a href="#电感说明" class="headerlink" title="电感说明"></a>电感说明</h1><ol>
<li>功率电感：电能转换为磁能存储和释放，成为电压转换电路的一个组成部分。</li>
<li>扼流电感：阻止高频率AC电流成分</li>
</ol>
<hr>
<h1 id="电感选型"><a href="#电感选型" class="headerlink" title="电感选型"></a>电感选型</h1><ol>
<li><p>电感值越大，纹波越小，尺寸越大，直流电阻越大，效率减小</p>
</li>
<li><p>电感精度： </p>
<table>
<thead>
<tr>
<th align="center">字母</th>
<th align="center">参数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">J</td>
<td align="center">±5%</td>
</tr>
<tr>
<td align="center">K</td>
<td align="center">±10%</td>
</tr>
<tr>
<td align="center">M</td>
<td align="center">±20%</td>
</tr>
<tr>
<td align="center">N</td>
<td align="center">±30%</td>
</tr>
</tbody></table>
</li>
<li><p>电感额定电流：通过线圈而不损害电感的最大电流，工作电流不应该超过该值；</p>
</li>
<li><p>电感量：可分为静态电感量和动态电感量，是线圈本身的固有特性，与电流大小无关。</p>
</li>
<li><p>饱和电流：电感量下降至原来的70%的电流。设计时要求取5%~20%的余量值。DCDC电路设计中，该值被放大到20% ~ 50%的余量值。</p>
</li>
<li><p>电感直流电阻：电感在电路中通常等效为电阻电容和电感的，电感直流电阻是在直流情况下，测得的直流电阻；<br>         直流电阻越大，电感损耗越大，电源的效率会降低；<br>         对效率要求较高时，选择直流电阻小的电感；</p>
</li>
<li><p>自谐振频率：电感内部是有电容，电容和电感是互相可以震荡，产生一个自谐振频率，当高过这个频率点的时候，电感就会呈现电容性，低于这个频率点时候，电感才是电感效应。选择电感时候，自谐振频率大于我们工作频率。</p>
</li>
<li><p>品质因素Q：他是一个重要指标，公式 <strong>Q &#x3D; wL&#x2F;r</strong></p>
<table>
<thead>
<tr>
<th align="center">公式</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Q &#x3D; wL&#x2F;r</td>
<td align="center">w:角频率(通常是固定的)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">L:电感值(通常是固定的)</td>
</tr>
<tr>
<td align="center"></td>
<td align="center">r:电阻有效值(直流电阻)</td>
</tr>
</tbody></table>
</li>
<li><p>封装</p>
</li>
</ol>
<hr>
<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ol>
<li>通常电路中使用的电感都不希望电感饱和（特殊应用除外），其工作曲线应在饱和曲线以内，</li>
<li><a href="https://www.cirmall.com/articles/31724/">电容设计的3个原则参考点</a></li>
</ol>
<hr>
<h1 id="两种电感的使用范围和选取"><a href="#两种电感的使用范围和选取" class="headerlink" title="两种电感的使用范围和选取"></a>两种电感的使用范围和选取</h1><ol>
<li><p>差模电感<br> 使用范围：电源总线使用</p>
</li>
<li><p>共模电感<br> 使用范围：差分总线使用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>硬件设计</category>
        <category>电感</category>
      </categories>
      <tags>
        <tag>硬件设计</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式系统设计师5天修炼</title>
    <url>/2023/02/13/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%B8%88/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%B8%885%E5%A4%A9%E4%BF%AE%E7%82%BC/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="f14b785cfaf8f9e7019edf5b12cf5f2c061a9c51e0d084ccb71cb052d68304ff">2fb2388ac9e5a085c94326d49cfe6438a4cd4262f8557c978a29691988102b67074df2b8e6f6f298f3e051877ac5add50bc61df03132a1b8913ca526e098064d81a4982996b497ad33f5d703b9fb2f772e517bd5ab02b7bcf088d602cf9bb3524452aa6141f39fb2e5fa9778cc58e2f61c12e1054452b0e44bee08e92f99808a8808bcbe861e22e690df0b7407ed1ff833ed2812dba842b32dc006ab760baf18b821ef4ce45e04b7cfb344f31ac0d8a3e88b043e0327705833d2ca95fe8b4121f140ea21c84c330d0cff47cb37944ac80143ddc89e08e1bfdb385b5ad40d760488b80c87b9c68444b290f57ad79ceec29edf222018b15c0d4b7de0748cf751777fe66dede5d3ef517c388ccb00a7e1eb9b316b055a6c10fdc9dbabeead2c640bc4ab1e7c0c54a46b9e2284b4e0d4428071427d98dd1aea7ea3e7a2c09a5e22be2751a3efe0c3d2fceb7f766aac7d7450dcb199fd3c7bab1b6fda35c7e61598929a3afc091ef3c0ae3d1e0491c5deb552fcba86937507e8b02ab4d46c411fce5a503a51dc68909ac439ea164b069683eca31f32984bb1984f1003c0923f844c62bfd723735ac822579b06c5838fd8a47ba9e12f2f64f8c127417bf535c5d80e25cee409744403dc341f8213b74cd3c2a5896d8ca897690d795395b7c5014cc06c1f7ebb887f85099afeab63d5497bbb387fc991cb946cadc7bbd2e8eeb56a14abc806266a1792058b004ac59fe37d972a2342ecee77c13c1ee40d50803812d68c71b7a0231df4ae497a6bdd70723e0c5a9f943ad4885153d3165a0b8d6ed15ddbc0fa63a38a351cb1e506a4e206ea6a389993880f95025fdbd439f26c29f6de94964108c5fd47f8ca81872f754c07992753f2ee32f0f5b6bc4bfd7bdca40bd1513961aaca2b8ee1937a92fdec69a55beaac2879ab3e92a593fdb7acf567c6f7e46f94c5b90b25af9e45582ef822bafed33c9d73e40b80399ff8cad9b60ec7670c470688fdb36ddf3c6deaee80e78ca2272cbd9a9218a23797777b6d56737fd4f941be7dbdbd873d4b28d954e50bc05e586412af03d926dad52f61b55db5f07ee0f70e0ba95fcc555964f1e49f2fcfbbd68e9de4493e9b8daadf271354e61e837e53a11effe6a12e208da2b3772f89c7b7</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>嵌入式系统设计师</category>
        <category>数据表示</category>
      </categories>
      <tags>
        <tag>嵌入式系统设计师</tag>
      </tags>
  </entry>
  <entry>
    <title>校验码</title>
    <url>/2023/02/13/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%B8%88/%E6%A0%A1%E9%AA%8C%E7%A0%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c2ab2d776370659a01b64f73bbe41d30cc2ff5a357c101718de9e5a4998e82e3">2fb2388ac9e5a085c94326d49cfe6438770742fb37732e9eec0dbf9299f5eb2a0ab2d72d609874eab9fb4a5ced54306859dd94b0766830175f5f0306fa63009cb3d4008e4e3d7a74f0cbf72b9a1b7bc7178619635ee64a96e28711f7d994043ddd95e8a78a7b87d4e004742622c8eb67aa68784807556fc5375efc8fbcc2697ff2c251e12b42844d3731c817161ce847d67524421851ed840913fccb38ec9d4b882723a1d2c5db03c5f5a50df12e2baf1d2ae2f681cdd875a59f92ec3f9dd9b331f9814b2f03a27a5941fa80eb3105cb84fca52f5059fe5e9bd7562f79948b199b050fedcd69dc202ab5a809667c6d259392e3ca317ebe09bbb351645c78661891a41bab8b15dea18115946e840383641c870a5258593a2b562282f3e2e532ea805561aa96a502b13300eaf3d50b5ed04f7fd9d02184e82ca2f3a82343ef131c93b410531f1e3bfd0ae27ce2214d44ba10ba4a285d31abbaeee7cc575b254a4136812fe1c6cbd4109ad20da74c02c89c4fcaf6104e6862c36a0ac83ce49c9169097953c97812a446a5fa374b629f3c2ac6be2aa3f5f175b37a89a30320acecece0da9016a80feb82bb2c22de76e8399ddcb0d414a7f587763fc774137acff7ef246a4a59ac244b5e7af159871a063640be8f4304957ff4f7aab5a1278dcac67ced01749eb33d2018f2ef6d6524a9cd06ef70ec0f067660ff149b70e530f7961090316f5a6a5ca251b41c8c5ad1ebb3ef22af4ea1430970382a094b6f964e099bda948c75e5ca02a9a906731f1cf6445d52668ffaadf96d25488fae41dbc4c6a6c3ab3c4ce5cf0c7443f8944b43a9d23c6b9d7bdd981715d0bb864503754853bc57ea1b81adf32b2f6035487cd91bfc5ffc8f0b468da59408a910944282c49f460e66ae84e6a030109c992f5483757f9e18a7fa393f74425801017914bb0a54719ddca490369370eca5d2fe1162d2f6662be9554a5f9a8bf4ef080ffe58e28e50b369a3765207e974d5c5f9025e00aa3aab2297ea3994cf2b3033096a737dde7e21dec20848a652aee1f9d046eb1e9c196e7f15a6dbd4e646cc43cc279dfa1a7aca28da20aee431ee1cdcca9cfb62dae59d5a52a6cf1415d2ee3d8f7cb3b40304f6e13ec59d0669d2d1a2447f164fcae8fd9825ac60e5385aaa319203a613afee435830e61d74faaf20717f749e0e1e4e03b4659f0933bfd0ef1566604b6eddd31519937b21d6035670763a6b9de87cb6a7480f66a61acade436f2e2c95411ed17f9a50453bc2cff9c83413d5439a2fc80a4da535143827128170ebff9e880786231507036ff374fab59f84c449c790b0b46987f9dfe8ff1c257bba2f7289d1c4d379562395db9a03f3dcc65cd043b570fbc62c168751773c214b10d062a577940a76a0fb13710af781bdc4f881107558a1ead29801569850462b18017e8cc8606ced4c0c0148428ec7afc0d431bacc6573b784317a2408b6d36d528fdaf7f0d948328ce02b2bb0ab71ed89f6b267ead712aca3f54c8cf38b23a8dbaa5fa6beb408c7612f5648e3c727ec33882187e2dff3c7084268a83b6f7c97ab5ad29999e4eb6786a5928e638d499c6dc0796a8e9ef49d3eef6ce600f030523f5ee035e8b0be0f18ba973625ef6baa5698e3f52895c6467320cbb449b09634ea6376ef727e31f0e7fe76ae6bc2fffe9ccc6d3b34b7d03527e98b9c05d038b57a58e11cf2eae4cf5f74656b49b87fec967aec30e28b03c94b566dce97dd6697fb1b6fd32927090c7e2e9f128f9d6ef54e61c65a9c1d4aa5898e54005c048e1fba39d49af33fa953bf48831ba8e1cbbae8c0220f2c6b0f1fb3101310c6a830caba777c78fe74b0ae717de5fd4bd171d49e24a002b2f247b12feafd0b51380a242b3d0bac041fb561f0896fa0b076753c481415787ee82c11f4aa06af18a458365d3e83a6e1e67b7190743cd0a176a5d0fb5bda12d9e188d4ff96456b3169f00b68495b6db6cea8cc6f8a39012be9f1681be0517d2922f52461b57a4d573afa8a0eddfd389bd2dc37754238e57798ed3da7ff9f41e58167387c1e094b8024fd041a9e9ed92fbff23ef9ece57028e0e393a13fc2f85d5390bf29e03c2c9793cf5d482c6d984c6aef09277187a806cfc1d7ccf2d0f5367dede6b98ec29da71fd42ca1d54dcc7ac0497b0209cb729911bcccac8f8a565fc8b9ac33142049f10171db960d1005c6ff8c340a3918c409719fed702a9aff1ff2c371232f83c676fbe217563f57959f82bd1ba7a64c32c74551694a2b7b1f8677a362197c944f7912bf22f2013b07016c9e154faed4bf41e68767a7da0f9ba1d463ce3c1369b276336daca90e0120171ec5c3bff8fc8ab8c837cfd20751f0644e4067e7d1114daacacef54aac2705bf4856e2986a29a7467b6f0eaa4e4ba2f625832ca5c35b4a1608537786cd06660bdd71b1abcf8b05125ee8363a4c2ea41b485ee5d73eea2fb45edcd4becf790ae397ff8453d6a202728e26d6c723b82d5a49150cb8c8d33397280d4b38dba8a3165fc5d7605d92ed0ad97a676aa7283ed66504a0e2a1bddb0001d9062fbf35c04127f53a72947fbb69f22107eddf73ca623603921f553b7cb467d4633a8aa50a5848f465d2389d9a034288f716e70a819dc01e11159de434663be6a78a62af78f8f45748eeba93a6adc1d3d1deed722a89fc78448eee8486b2594ae58ac9c58a3b5f4b6bf3e5a5dba023c1dfbe97155eb62296dc75a27bd3b214fe429d3cac9aa1e50a0b84bcb3d8eea4eeab733162f8d0b3f338cf3cf18ac4087f12e97c9590a07649bfa0eff090278f904b31550060a490b28adc8d5b9fd5ba9c2bcf25285adc3ac8a3478a2e46c27a3f9f816732b74834a4b18b6e13eaf4786e8a9460ca5431ecd9b1a73f1a9c0be3a12622dd398f8c2e348daf2a9c4b57bb2746ca41eb88436766086c3d9c584c04883bb8c17b5aa7878887ebad1f59f3d4d4730f442f5a7d05a17a9914a02b62795513954c56b75a02e995b6dbc85cd3186b1dbfa3ddfa09ffbab4354c85c3e4b54d85b874faa3de9c0e7c45ce7ef4f838f83cdc4cac1614aadcd3e68234aca99afaa6d72bcba3ba3c356428d2766b58fbd5d2a82ff82cb18e49df90d26accaee80e0258f65d23b4f019716276f49f5ad9dee5533d86b76d720abfe34439d9347f5ff2a3b51f619450bdb3a8ea734e8b7b70762dc3c744bb7e14d5027d8677732e0f625cde202167d6cd74895bfdc295041f81ffe8a832a4e8145beab39008969f55c6ef954efff4f59f6d83095c857bd61a35d69c2279f48e1e578973fb5e1b679364ad9e61f6d066dae77764bff300080429a0a95e01c80e696dd70f60076c36dcb19f40664f24f45806fc49b3b1773f51e7f08b4e137377eddc05b5d604d0bfa45b48822fb2d9873256e1c0efbe956712f08be55977b4eab3a18b4e298b7e4923b8d47d124a1a60b6029b9fc029dc689c3ef1d456aebea5a77f50f9085498e4971f41d0a08a1dea016eacb5b3d8cd87fcf8690ade9e25ff02c63dc598e12a0d4d20182c8033086565abbb285befd18d5c2575ae4e2ff26e7d70fb70755e701e78a9e0d520a935df3d1f5cdf8b245d0d180e5f893f8d742a007de285789babebc51f95eee2872c509da72a36ca87fa9a705ec43f542bdd889eeb2e826fcaee476fe60169c555e709dae71a90c68d078152337a00f03d2eeb68edb2f6833e61f2c8333250ee4a2939bd66917cce75407461191ff2dd3be0f0b73d188cedab365912a6fab53ddeca959a6ad8977ff66b1488a3c2e3c790e1005ef08790d7495e5a823563ee64fdd1ba7f5d4f889fe0776e9743c8163fd327e8970f6f4a33f865bc5ec25f524edfabe7349e1624262ed55d4565227bb5e7b8176ba0ae43ca7eddf19cc3fcc8813b57b4dd04486ac549ff2f511726d429440f61d8ac19eda45c38f439e73ce9b6405339b9ca706f9a952227c01fa72a7fc796b7be97595692df55f9eecb8a55fd3a1440ae700cdea078abb3cc87268cb4de363b2c0894b4d5cb2f604c9b471f6ba717bde4e064db0ca5d17384d594f9e7126ba8b6556bd60481153a450abf7c8a2ba68dfcc55971c2f7f1733a5d4a9f64b477d7cf93a151a9dda30fd4addcbd0e2d826ab6fdfa85b411ae5ef349e3d1c0478f7f0bed56c239794973689dc82e85291d99789b7f208ccd595b31951fc2180bf77064534b018c540fa08678112264cd840c5acda72a7d7ce197955ee655bf56aa58ee694fa84c3f2da1ec7841410936919b7317bb5ba6d74c95fb575238d4746f9ea3cd662d249f328f1347381d5e71b823df94321605002413f0d4356ae336b282cb25a59cc985270258809d46aeac40e6a8743f877623c421f403121d544a60b98e1d1ad3a0a7bef69c1e20d0f334d3f76a8e77cdf211d400ffe2373caf6a4d5a9e41dd9f28f28b3b3bc52f1cb655ac334d123f6bb9e70338bdeb9fbe1a9654b04cd0cea3861fd69ee379dfb03db8af11ff77f52da9f4d32c45a79d0dd40d08b132494238c53bda95ab26d3b0255aff33414a976d1c69f4ffed5b144b80141cccebda5effe655c723c18a1730ecb09933ef1ddb5be2c84a9b3e2ac38b659cbceab92a5612f505c76f16ff2a2ccd263d3b334183cc47dd78130ae3e3a5cac06bb038f74651a4086875015beb4d60f22abc7ecec1a775bdc2a5386a13edbf4f995e0685c1bc0898a44fcb47c52ca26d96de0c074428243b453ea61791afcf84fd4b3e9d073d57bff0bdb32de290da687195cde7a9a4a80bf4945cd64d615b13e0737d6bdcd79c735fd128bcf9d863f3c9e9f5ba6ae6161e69bdda3a4d767485e32ba8c4f4ceb5669b670db70182af0d196c61b33a1dd2bc41501cded97f52f033ed7f874b3e559d441c1627337f13d39df65390f8d8974106a5847461fa6325375703b4f6a367a1b32d998b1bc33ea24b0047ff30bde643bd944ac4e016a003166a8be0c4cbf0f271d0847c1dc5ee3917ff7d9441c0249a6e4a1745eb1493d24547f5aa34fdf8dbbc476a09a89b642f99962ae29f03b08c4ff79efa18408b8194e4f7adebae19bc618ce4c33b84b4d8d7a4506391e1c55c567cc68bb6c1ef54593a49e84dfafd7b4e2c368ad4285bfae447e4a4d9b0790aa7679594ca38a369f20c63457620b5ec478bff1a139ace4c760bbba062e3d6f199b1de62488e3ec6900cce6d8c2163d50c36564f3979d71af1e0ad109de376605cf4490c12d48578d85e415fda700ef9920a41e71acb729fdfbbd68ada42ead605c7a1dd38cf6318dce17248007b88db3af427a378a749fa093e5f3e50b9dc9276f54957194b02fae31348b0935d6f8cd5a4f86757b07f72aa2d3f7e84eed6bc5603a03eeb41ee32bf44e8c51272e3456749448174013ee309281555c414c76ed70625ccf21678b6796332c7cbdeec62665539e35086e0b64af3</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>嵌入式系统设计师</category>
        <category>数据表示</category>
      </categories>
      <tags>
        <tag>嵌入式系统设计师</tag>
      </tags>
  </entry>
  <entry>
    <title>软考真题及答案</title>
    <url>/2023/02/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%B8%88/%E8%BD%AF%E8%80%83%E7%9C%9F%E9%A2%98%E5%8F%8A%E7%AD%94%E6%A1%88/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="51849202f5b71dade07bf6bae511e6cc368e5a87324a1bade22bd7b86d4682c5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>嵌入式系统设计师</category>
        <category>考试试题</category>
      </categories>
      <tags>
        <tag>嵌入式系统设计师</tag>
      </tags>
  </entry>
  <entry>
    <title>数据的表示</title>
    <url>/2023/02/12/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%B8%88/%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1d5a6201c2a0ea9dbdc2fdbf50cd62e8985117db54087117252a4f868c315fbc">2fb2388ac9e5a085c94326d49cfe64389b8e8a5cb8fb8d105f9ccb428a91e0081aaa7303207c3b1afaed583382071181c9c7a43c690f140db40abab4d45f106d1532a5b1d6ace764bfdc1c865b33947635af8832cf5db719a9c9c3755bf8429e31f2eaf9a3bd506ade31ac0b0f4ea74395d53fea8b193e7953ab781181d80c886a3737a86fcdb671b2a38189a737fe47a554b8f1309d9b2c2d5e67496f4f9cc0f682c823d9c294843cffeac8b847ecc1408bfc8406a81412bbb7955fe702419b81c0cf3f633974f15892b7b6c1944f011d185387197585981f74a93ac9c9601ed00e664e2f7eac58d86440651094f264c45faab0891426ddbc4e4f64b48e72472521ebcc166f86018aec06b64cfbab3923d4b0d1d3446bea2ee38fa9bbbb976abd6645acc4df5271f2f94515c7b8871fd707b7b6989c418c06ec4029ffbf3d65c61700dd09da546b4a00050da320eba4c46552145799f743991832b2dce47f616760244e79084931328edc71afaf19fe42d184d162b8bd92dbbebba1e18a57007d750b5a750df04434d9b02f02e3b0b6c02d2e8657374a1ab2bf8f4bbfabfb1a53a2995bb7506e7c77f99348bc53367f9415720ca9f6921c95c1587ce5d295a28adf39477fa2aa75fac190bb79c03ae7e53a8e313373db9020ea28fffa413719f2f28b6896257c44acfcc91bfd90da2ccc2c6cdd16ae34a80c77cee5e89663aba71e152f93bd0da50b056a882249c8ea3d2e0ae352075da92811149c94dd1042628ef2ef03bb0054d8106923ce382e6427d4c27485b2deb73e5a74124a874b2c378b0917caa8ad2d36126030c17fc00f15e131a713d7e37150c015806b94f4e9e33c0b7c7ed88d9706082bf3e030dbf9becb06ca2756fc088dda9344beac0e3c3a83a6f7614b99df560802fc45ddb71cb7dc66205aac699210219690260cfc5592954139c21f26dfb2ace566c58f5a734839d90a07aec6cde7e7b178f25ad6ab0cc76900a6019dbc3537d60d18da6943003102bf937f80a1176df4bbfcce8a85851366157532710ba9fbc0d4657e070c9624c33c254801f91630f53ce36722e4928c5f8928dc65bd8fc037be1331c51dd65bc02285925fdf772398bbf9485b0af11470efa31491219e7494242fb6052cff6bedddee8294c72c6c68e76e182dacdec010b8b1a5a159e0f954d37219c512e7215c202f1f5fe0a2f6189e321638dca2be0fe428095805bb332ccb312c77107c94ccd934476b24084864670f39887aaf3233a54e54e69ac14abfb070d00c0f17151f080e84b7aa5253590e73ff83744c4a4f81032c46ae60dcbdc265294d4d1733b2500cb4a2408d338e2039d5ec6283aa8476c7bbe5438bd80b1736bf8a15bf9d49f6f33aba08cc91555bd4bbc6bcbd1131b52adcd9669f11742d1f656abc5d5efe0e462c741eab267db39b54e332d8692038f56ecaffadc41019fb9434cf150e0a46f2a7e59df6253d4d73d22a5debf1ce54a46b6b79732e4176fd87209be69c512a791df18d99d217621d37e84df6817554bc5ca94b90675f3e426237182ea3f8fc2e1b54b52e14db9b9075ba58f8e40e007a304fa3f15cf8ee50b84915d2d67c001ac755ab1fc1b97e0a852f85bcf30f6fa35f54d6a020b4f2b0adf872fb3978937f907397749bd70c442b107e6a5867dbb8b04bfdcc01338795e40ca5a1716dc3ddd3ba19d788f6a5d2b97b69990c4e34c37c71422ed96f06a70a197a2da6a07cd4e306ee42d2e6b91b95cb2e0fcdfeb8bf31f7105b68e667a75cd1b70ebd98ebdb16b2dcd09e5bae001f2e90fdb6ea6f77dbeebe1839a2769cb5292277a4b89f05f826da98a8c56b0ded3a848df7aa7ba1c3b783951b032d78b316a97167ce574fda3d0684f4c234186ba4db9ac3636b16bb77ece6c2d3b4e12ca7f78513d548bb5c9cfb4d43646ca493dddf0f5c6aa86cc9d6405b3dfc41cf3a846659c31386b0b657b9a8b47d9abbed7b4069df956232082064ca0775a65d35df597c984530f4fec937dec7e74656e6967b18f4a37a010a50f7c66d1415af740d902174b265e650ea097f4be5858b8842eab8fc634f3d130c232491a1a4b6a0bf74a4a66131cea3e843ffe152f5917ae9fc6d123acab50efc614d8a3aecd315972d47b445d44a574f5163fc667e0952ca865072a66aef970dd508a7a7d181602d91a7252a15e44a591bcbaa6c3c3e05e62619da49b21999d92f4fcb7d1050d05eb09a8ec1831008ff92999d1e75d4bd5436a7f6d1b8b267df6f51a6264cbc19a7c57a5d17f6d08fdc27addb494a8640e3938f7e4a176c7f0571425d13f5fcfd2f21fa912f1fbaa33c70011f76d3ef1e5e46c0162c2415909216b20a0f00a7fa564f82411d23d699b080db0abaf32f71058cc43071e87f6e34c7a971de4462f19647348429f328d6ecd9430c77d6d1ff5ba6a5b54057454a8985a89ce929caef1188c76a7db56824d8c162d811ebc905f94fb71ce734bb09dc4d480979a31a59198188d169a1a624b3a92c25bc67ed0250b43dbc538cb7058453b7663f0be43c22447afe6d1f2b5f8b6c5e50278cd6c335b3583e157d9dc60364e483e80310415148fce859811fd39a25f26de67a21ddb8b41392677c3999262365bfdf028c02c08fde1ad5f1d5c892487c758784f4c6515dd498089322620ccafa494aec62458bdb5114b7cd76c1a1d1b8bfe62a54ea352db439d446d7de2fc6d57fd5d7ec79dcff5562a53929c5f6ffc8ed09a2ef64f00bc224a0356c988569efa568133a0e2921</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>嵌入式系统设计师</category>
        <category>数据表示</category>
      </categories>
      <tags>
        <tag>嵌入式系统设计师</tag>
      </tags>
  </entry>
  <entry>
    <title>三十六计、孙子兵法、鬼谷子</title>
    <url>/2023/02/12/%E4%B8%89%E5%8D%81%E5%85%AD%E8%AE%A1%E3%80%81%E5%AD%99%E5%AD%90%E5%85%B5%E6%B3%95%E3%80%81%E9%AC%BC%E8%B0%B7%E5%AD%90/</url>
    <content><![CDATA[<p>三十六计.pdf</p>
<iframe id="myFrame" src="https://xgm-embedded-os.gitee.io/npdf/web/viewer.html?file=%E4%B8%89%E5%8D%81%E5%85%AD%E8%AE%A1.pdf" width="100%" height="700">
    <p>This browser does not support PDFs. Please download the PDF to view it: <a href="https://xgm-embedded-os.gitee.io/npdf/web/viewer.html?file=%E4%B8%89%E5%8D%81%E5%85%AD%E8%AE%A1.pdf">Download PDF</a>.</p>
</iframe>



]]></content>
      <categories>
        <category>中国文化书籍</category>
      </categories>
      <tags>
        <tag>中国文化书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>电话号码C语言源码</title>
    <url>/2023/02/11/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81C%E8%AF%AD%E8%A8%80%E6%BA%90%E7%A0%81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="cad416f441a7171a31be07b283f4747312b877248a4941d7b35cb1ed54b0b7ea"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>生成电话号码的源码</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言#pragma的使用</title>
    <url>/2023/02/11/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80-pragma%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<p>参考源：<a href="https://baike.baidu.com/item/%23pragma/706691?fr=aladdin">https://baike.baidu.com/item/%23pragma/706691?fr=aladdin</a><br>如下是个人使用的，未使用的未记录</p>
</blockquote>
<span id="more"></span>

<h1 id="Message-消息-参数"><a href="#Message-消息-参数" class="headerlink" title="Message(消息)参数"></a>Message(消息)参数</h1><ol>
<li><p>参数能够在编译信息输出窗口中输出相应的信息，这对于源代码信息的控制是非常重要的。其使用方法为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma message(__FILE__)</span><br></pre></td></tr></table></figure>
<p>当编译器遇到这条指令时就在编译输出窗口中将消息文本打印出来，如下是打印被编译的源文件名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&gt;g:\算法程序\algorithm\define_printf\define.c</span><br></pre></td></tr></table></figure>
</li>
<li><p>当我们在程序中定义了许多宏来控制源代码版本的时候，我们自己有可能都会忘记有没有正确的设置这些宏，此时我们可以用这条指令在编译的时候就进行检查。假设我们希望判断自己有没有在源代码的什么地方定义了_X86这个宏可以用下面的方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifdef _X86</span><br><span class="line">#pragma message(&quot;_X86 macro activated!&quot;)</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p>当我们定义了_X86这个宏以后，应用程序在编译时就会在编译输出窗口里显示“_X86 macro activated! ”。我们就不会因为不记得自己定义的一些特定的宏而抓耳挠腮了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&gt;_X86 macro activated!</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="pragma-once-比较常用）"><a href="#pragma-once-比较常用）" class="headerlink" title="#pragma once(比较常用）"></a>#pragma once(比较常用）</h1><ol>
<li><p>只要在头文件的最开始加入这条指令就能够保证头文件被编译一次，这条指令实际上在VC6中就已经有了，但是考虑到兼容性并没有太多的使用它。</p>
</li>
<li><p>#pragma once是编译相关，就是说这个编译系统上能用，但在其他编译系统不一定可以，也就是说移植性差，不过基本上已经是每个编译器都有这个定义了。</p>
</li>
<li><p>#ifndef，#define，#endif这个是C++语言相关，这是C++语言中的宏定义，通过宏定义避免文件多次编译。所以在所有支持C++语言的编译器上都是有效的，如果写的程序要跨平台，最好使用这种方式</p>
</li>
</ol>
<h1 id="pragma-hdrstop"><a href="#pragma-hdrstop" class="headerlink" title="#pragma hdrstop"></a>#pragma hdrstop</h1>]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>pragma</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>ASK,OOK,FSK,GFSK简介</title>
    <url>/2023/02/11/%E6%97%A0%E7%BA%BF/ASK-OOK-FSK-GFSK%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<blockquote>
<p>参考源：<a href="https://www.cnblogs.com/zhihongyu/archive/2012/04/12/2443617.html">https://www.cnblogs.com/zhihongyu/archive/2012/04/12/2443617.html</a></p>
</blockquote>
<span id="more"></span>

<p>ASK 是幅移键控调制的简写，例如二进制的，把二进制符号0和1分别用不同的幅度来表示，就是ASK了</p>
<p>而OOK 则是ASK 调制的一个特例，把一个幅度取为 0，另一个幅度为非0，就是OOK了。例如二进制符号0用不发射载波表示，二进制1用发射1表示</p>
<p>ASK跟OOK的频谱都比较宽。</p>
<p>FSK 是频移键控调制的简写，即用不同的频率来表示不同的符号。例如 2KHz 表示符号0，3KHz 表示符号 1</p>
<p>GFSK 是高斯频移键控的简写，在调制之前通过一个高斯低通滤波器来限制信号的频谱宽度。</p>
<hr>
<h1 id="ASK定义"><a href="#ASK定义" class="headerlink" title="ASK定义"></a>ASK定义</h1><p>“移幅键控”又称为“振幅键控”(Amplitude Shift Keying )记为ASK，是调制技术的一种常用方式。如果数字调制信号的可能状态与二进制信息符号或它的相应基带信号状态一一对应,则称其已调信号为二进制数字调制信号。用二进制信息符号进行键控称为二进制振幅键控，用2ASK表示。</p>
<p><img data-src="https://s2.loli.net/2023/02/11/YmDosMer76bjiAp.jpg" alt="图1：移幅键控原理图"></p>
<p>在“移幅键控”方式中，当“1”出现时接通振幅为A的载波，“0”出现时关断载波，这相当于将原基带信号（脉冲列）频谱搬到了载波的两侧。 　　<br>移幅键控（ASK）相当于模拟信号中的调幅，只不过与载频信号相乘的是二进制数码而已。移幅就是把频率、相位作为常量，而把振幅作为变量，信息比特是通过载波的幅度来传递的。二进制振幅键控（2ASK），由于调制信号只有0或1两个电平，相乘的结果相当于将载频或者关断，或者接通，它的实际意义是当调制的数字信号为“1”时，传输载波；当调制的数字信号为“0”时，不传输载波。原理如图1所示，其中s（t）为基带矩形脉冲。一般载波信号用余弦信号，而调制信号是把数字序列转换成单极性的基带矩形脉冲序列，而这个通断键控的作用就是把这个输出与载波相乘，就可以把频谱搬移到载波频率附近，实现2ASK。实现后的2ASK波形如图2所示。</p>
<p><img data-src="https://s2.loli.net/2023/02/11/7ScmY13CPOs6zgQ.jpg" alt="图2：输出后的2ASK波形"></p>
<p>移幅键控这种调制技术工作的最简单和最常用的形式是开关，载波存在用“1”代表，载波不存在用“0”代表。这种类型的调制称为开关键控(OOK)，是最节省能量的调制方式，因为只有在发送“1”时辐射能量。幅移键控需要很高的信噪比才能解调信号，因为根据其本身特性，大部分信号都是以很低的功率进行发射的。ASK调制射频系统的优点是发射和接收设备的结构简单，并且功耗比较低。但不幸的是，ASK／OOK调制系统所占用的带宽低于500kHz或着峰值密度根本不会落入“数字调制系统”要求的范围。这表明ASK／OOK调制系统的发射功率被限制在50mV／m，或者必须采用一些FHSS技术以满足FCC的15．247条款的要求。</p>
<h1 id="ook"><a href="#ook" class="headerlink" title="ook"></a>ook</h1><p>On-Off Keying<br>OOK是ASK调制的一个特例，把一个幅度取为0，另一个幅度为非0，就是OOK。 　　二进制启闭键控（OOK：On-Off Keying）又名二进制振幅键控（2ASK），它是以单极性不归零码序列来控制正弦载波的开启与关闭。该调制方式的出现比模拟调制方式还早，Morse码的无线电传输就是使用该调制方式。由于OOK的抗噪声性能不如其他调制方式，所以该调制方式在目前的卫星通信、数字微波通信中没有被采用，但是由于该调制方式的实现简单，在光纤通信系统中，振幅键控方式却获得广泛应用。该调制方式的分析方法是基本的，因而可从OOK调制方式入门来研究数字调制的基本理论。</p>
<h1 id="FSK频移键控"><a href="#FSK频移键控" class="headerlink" title="FSK频移键控"></a>FSK频移键控</h1><p>中文名称：频移键控<br>英文名称：frequency-shift keying;</p>
<h2 id="FSK-定义："><a href="#FSK-定义：" class="headerlink" title="FSK 定义："></a>FSK 定义：</h2><p>正弦振荡的频率在一组离散值间改变的角度调制，其中每一离散值表示时间离散调制信号的一种特征状态。</p>
<p>应用学科：通信科技（一级学科）；通信原理与基本技术（二级学科）</p>
<p>频移键控，英文缩写FSK。 　　</p>
<p>频移键控是利用两个不同频率F1和F2的振荡源来代表信号1和0。用数字信号的1和0去控制两个独立的振荡源交替输出。对二进制的频移键控调制方式，其有效带宽为B&#x3D;2xF+2Fb,xF是二进制基带信号的带宽也是FSK信号的最大频偏，由于数字信号的带宽即Fb值大，所以二进制频移键控的信号带宽比较大，频带利用率小。</p>
<p><img data-src="https://s2.loli.net/2023/02/11/JnBF4XRCeL1VHAo.jpg"></p>
<h1 id="GFSK-调制的定义"><a href="#GFSK-调制的定义" class="headerlink" title="GFSK 调制的定义"></a>GFSK 调制的定义</h1><h2 id="GFSK-高斯频移键控"><a href="#GFSK-高斯频移键控" class="headerlink" title="GFSK - 高斯频移键控"></a>GFSK - 高斯频移键控</h2><hr>
<p>高斯频移键控GFSK - Gauss frequency Shift Keying ，是在调制之前通过一个高斯低通滤波器来限制信号的频谱宽度。</p>
<hr>
<h3 id="调制原理"><a href="#调制原理" class="headerlink" title="调制原理"></a>调制原理</h3><p>GFSK 高斯频移键控调制是把输入数据经高斯低通滤波器预调制滤波后，再进行FSK调制的数字调制方式。它在保持恒定幅度的同时,能够通过改变高斯低通滤波器的3dB带宽对已调信号的频谱进行控制，具有恒幅包络、功率谱集中、频谱较窄等无线通信系统所希望的特性。因此,GFSK调制解调技术被广泛地应用在移动通信、航空与航海通信等诸多领域中。</p>
<h1 id="GFSK调制可以分为直接调制和正交调制2种方式。"><a href="#GFSK调制可以分为直接调制和正交调制2种方式。" class="headerlink" title="GFSK调制可以分为直接调制和正交调制2种方式。"></a>GFSK调制可以分为直接调制和正交调制2种方式。</h1><hr>
<h3 id="直接调制"><a href="#直接调制" class="headerlink" title="直接调制"></a>直接调制</h3><p>直接调制是将数字信号经过高斯低通滤波后，直接对射频载波进行模拟调频。当调频器的调制指数等于0.5,它就是熟知的GMSK(高斯最小频移键控)调制，因此GMSK调制可以看成是GFSK调制的一个特例。而在有的文献中,称具有不同BT积和调制指数的GFSK调制方式为GMSK&#x2F;FM,这实际上是注意到了当调制指数不等于0.5时，该方式不能称为GMSK这一事实。</p>
<p>直接调制法虽然简单,但由于通常调制信号都是加在PLL频率合成器的VCO上，其固有的环路高通特性将导致调制信号的低频分量受到损失。因此,为了得到较为理想的GFSK调制特性，提出了一种称为两点调制的直接调频技术。在这种技术中,调制信号被分成2部分，一部分按常规的调频法加在PLL的VCO端,另一部分则加在PLL的主振荡器一端。由于主振荡器不在控制反馈环内，它能够被信号的低频分量所调制。这样,所产生的复合GFSK信号具有可以扩展到直流的频谱特性，且调制灵敏度基本上为一常量,不受环路带宽的影响。但是，两点调制增加了GFSK调制指数控制的难度。</p>
<hr>
<h3 id="正交调制"><a href="#正交调制" class="headerlink" title="正交调制"></a>正交调制</h3><p>正交调制则是一种间接调制的方法。该方法将数字信号进行高斯低通滤波并作适当的相位积分运算后,分成同相和正交两部分，分别对载波的同相和正交分量相乘,再合成GFSK信号。相对而言，这种方法物理概念清晰,也避免了直接调制时信号频谱特性的损害。另一方面，GFSK参数控制可以在一个带有标定因子的高斯滤波器中实现,而不受后续调频电路的影响，因而参数的控制要简单一些。正因为如此,GFSK正交调制解调器的基带信号处理特别适合于用数字方法实现。</p>
]]></content>
      <categories>
        <category>无线</category>
        <category>无线模式</category>
      </categories>
      <tags>
        <tag>无线</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog HDL入门(4)</title>
    <url>/2022/12/13/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/FPGA/Verilog-HDL%E5%85%A5%E9%97%A8(4)/</url>
    <content><![CDATA[<blockquote>
<p>Verilog 基础语言4 </p>
</blockquote>
<span id="more"></span>

<h1 id="4-第三章内容"><a href="#4-第三章内容" class="headerlink" title="4.第三章内容"></a>4.第三章内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">结构建模</span><br><span class="line">	verilog HDL中的结构建模风格，结构建模风格用以下3种</span><br><span class="line">	Gate实例引用语句</span><br><span class="line">	UDP实例引用语句 or and xor</span><br><span class="line">	module 实例应用语句</span><br><span class="line">	</span><br><span class="line">	模块</span><br><span class="line">	在Verilog HDL种，一个模块定义了一个基本单元，格式</span><br><span class="line">	module module_name(port_list);</span><br><span class="line">		Declarations_and_Statements</span><br><span class="line">	endmodule</span><br><span class="line">	端口列表(port_list)列出了该模块与外部模块进行通信的端口。</span><br><span class="line">	</span><br><span class="line">	端口</span><br><span class="line">	模块的端口可以被声明为输入、输出、双向端口。端口的默认类型为线网类型(即wire类型)，也可以明确地把端口声明为线网类型。在声明端口后，可在模块内将输出端口再次声明为reg变量类型。无论是在线网声明还是变量声明中，线网 变量必须与端口声明中指定的位宽一致。</span><br><span class="line">	</span><br><span class="line">	端口声明还可以直接放在端口列表中而不放在模块内部，这样的端口声明风格称为模块端口声明风格 模块端口列表风格（端口声明放在模块内部）。</span><br><span class="line">	</span><br><span class="line">	模块端口声明风格</span><br><span class="line">	module (</span><br><span class="line">	input wire[3:0] prog_ctr,</span><br><span class="line">	output wire[1:0]instr_reg,</span><br><span class="line">	inout wire [15:0]next_addr</span><br><span class="line">	);</span><br><span class="line"></span><br><span class="line">	endmodule</span><br><span class="line">	</span><br><span class="line">	端口在端口列表中被声明，那么就不能在模块内部重新声明。端口还可以被进一步限定为寄存器类型(reg)端口 、有符号类型(signed)端口。</span><br><span class="line">	module remap_ctrl(</span><br><span class="line">		input[31:0]rpc_addr,	//默认的类型是无符号线网类型</span><br><span class="line">		input signed[31:0]rpc_rdata,	//有符号线网类型</span><br><span class="line">		output reg remap,ready,				//无符号寄存器类型变量</span><br><span class="line">		output reg signed [31:0]rpc_wdata//rpc_wdata是有符号寄存器类型变量</span><br><span class="line">	);</span><br><span class="line">	</span><br><span class="line">	endmodule</span><br><span class="line">	所有端口都是用逗号隔开，共用同一个声明的多个端口</span><br><span class="line">	</span><br><span class="line">	参数端口</span><br><span class="line">		除了可以在模块内部声明参数外，还可以用端口列表的风格来声明参数。</span><br><span class="line">	module module_name </span><br><span class="line">		#(parameter param1 = value1,param2 = value2,...,</span><br><span class="line">			parameter param3 = value3)		//声明参数</span><br><span class="line">			(port_list);</span><br><span class="line">	...</span><br><span class="line">	endmodule</span><br><span class="line">	在参数声明中可以选择 指定参数的位宽以及符号。</span><br><span class="line">	module sspm</span><br><span class="line">	#(parameter SIZE = 6,WIDTH = 8,</span><br><span class="line">	parameter [WIDTH-1:0]HOLD_VALUE = 56,</span><br><span class="line">	parameter DUMP_FILE = &quot;dump.rpt&quot;)</span><br><span class="line">	(input chip_select,read_write,</span><br><span class="line">	output [WIDTH-1:0]data);</span><br><span class="line">	...</span><br><span class="line">	endmodule</span><br><span class="line">	若每一个实例引用语句中的参数都一样，换言之,参数值不是由实例引用语句来指定的，则参数应该被声明为局部参数。</span><br><span class="line">	否则参数既可以在模块内部声明，也可以在参数端口中声明。</span><br><span class="line">	</span><br><span class="line">	模块实例引用： 按照位置排列的连接 按照名称的连接</span><br><span class="line">	</span><br><span class="line">	连接类型：标识符（变量 线网）、位选择、部分选择、上述类型的拼接、表达式（只适用于输入端口）</span><br><span class="line">	</span><br><span class="line">	未连接的端口</span><br><span class="line">		实例引用语句中，若端口表达式的位置为空白，就将该端口指定为未连接的端口。</span><br><span class="line">		例子</span><br><span class="line">		df u0df(.q(qs),</span><br><span class="line">				.qb(), //输入端口</span><br><span class="line">				.cock(ck),</span><br><span class="line">				.qd()	//输出端口</span><br><span class="line">				);			//按照名称对应</span><br><span class="line">		df u1df(qs, ,ck,,);	//按照位置对应</span><br><span class="line">		模块未连接输入端的值被设置为z。模块未连接的输出端只是表示该输出端口没有被使用。</span><br><span class="line">	</span><br><span class="line">	不同的端口位宽</span><br><span class="line">	在端口和端口表达式之间存在着一种隐含的连续赋值的关系。</span><br><span class="line">	因此当端口和端口表达式的位宽不一致时，会进行端口匹配，采用的位宽匹配规则与连续赋值时使用的规则相同。</span><br><span class="line">	module child(psa,ppy);</span><br><span class="line">		input [5:0]psa;</span><br><span class="line">		output [2:0]ppy;</span><br><span class="line">		...</span><br><span class="line">	endmodule</span><br><span class="line">	</span><br><span class="line">	module top;</span><br><span class="line">		wire [1:2] bdl;	//2位</span><br><span class="line">		wire [2:6] mpr;	//5位</span><br><span class="line">		</span><br><span class="line">		child u6child(</span><br><span class="line">			.psa(bdl),</span><br><span class="line">			.ppy(mpr)</span><br><span class="line">		);</span><br><span class="line">	endmodule</span><br><span class="line">	模块child的实例引用语句中，存在两个隐含的连续赋值。</span><br><span class="line">	</span><br><span class="line">	psa是输入端口，所以从端口表达式往端口进行赋值</span><br><span class="line">	assign psa = bdl;</span><br><span class="line">	</span><br><span class="line">	ppy是输出端口，所以从端口往端口表达式进行赋值</span><br><span class="line">	assign mpr = ppy;</span><br><span class="line">	</span><br><span class="line">	bdl[2]-&gt;psa[0],bdl[1]-&gt;psa[1]。psa[5] psa[4] psa[3] psa[2] 未连接，因此值为z</span><br><span class="line">	mpr[6]&lt;-ppy[0],mpr[5]&lt;-ppy[1],mpr[4]&lt;-ppy[2]</span><br><span class="line">	</span><br><span class="line">	模块参数值</span><br><span class="line">	一个模块在另一个模块的内部被实例引用时，较高层次的模块能够改变较低层次模块参数的参数值。用以下两种途径可以改变模块实例的参数：</span><br><span class="line">	1.使用定义参数语句(defparam语句)修改参数值</span><br><span class="line">	2.在模块实例引用中修改参数值</span><br><span class="line">	</span><br><span class="line">	1.定义参数语句</span><br><span class="line">	定义参数语句的格式如下：</span><br><span class="line">	defparam 	hier_path1 = value1,</span><br><span class="line">				hier_path2 = value2,...;</span><br><span class="line">	</span><br><span class="line">	在较低层次模块中的参数层次路径明可以使用如下这样一条语句清晰地矛以设置(层次路径名)，</span><br><span class="line">	module top (tpa,tpd,tps,tpc);</span><br><span class="line">		input tpa,tpd;</span><br><span class="line">		output tps,tpc;</span><br><span class="line">		defparam u5ha.XOR_DELAY = 5,	//名为u5ha的半加器实例中的参数XOR_DELAY </span><br><span class="line">		u5ha.AND_DELAY = 2;				//名为u5ha的半加器实例中的参数AND_DELAY</span><br><span class="line">		</span><br><span class="line">		half_adder u5ha(tpa,tpb,tps,tpc);</span><br><span class="line">		</span><br><span class="line">	endmodule</span><br><span class="line">	</span><br><span class="line">	module top2(tp2p,tp2q,tp2cin,tp2sum.tp2cont);</span><br><span class="line">		input tp2p,tp2q,tp2cin;</span><br><span class="line">		output tp2sum,tp2cout;</span><br><span class="line">		</span><br><span class="line">		defparam</span><br><span class="line">			u8fa.u1ha.XOR_DELAY = 2,	//在名为u8fa的全加速器实例中引用的名为u1ha的半加器实例中的参数XOR_DELAY</span><br><span class="line">			</span><br><span class="line">			u8fa.u1ha.AND_DELAY = 3,	//名为u8fa的全加速器实例中引用的名为u1ha的半加器实例中的参数AND_DELAY</span><br><span class="line">			</span><br><span class="line">			u8fa.OR_DELAY = 3;	//名为u8fa的全加器实例中的参数OR_DELAY</span><br><span class="line">			</span><br><span class="line">			full_adder u8fa(tp2p,tp2q,tp2cin，tp2sum,tp2cout);</span><br><span class="line">			</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		模块实例引用中修改参数值</span><br><span class="line">			模块实例的本身就能指定新的参数值，模块实例引用语句可采用以下两种风格来指定实例中的参数值：</span><br><span class="line">			（1）按照位置来赋对应的参数值（位置关联）：第1个值对应于模块中声明的第1个参数,第2个值对应于模块中声明的第2个参数，依此类推</span><br><span class="line">			（2）按照名称来赋对应的参数值（名称关联）:参数的名称和值都被明确地标出。因此参数地顺序并不重要，从而可以按照任意顺序来传递参数。更重要的是，不是所有的参数值都必须明确的标出</span><br><span class="line">			</span><br><span class="line">			下面功能一样</span><br><span class="line">			module top3(tp3a,tp3d,tp3s,tp3c);</span><br><span class="line">				input tp3a,tp3d;</span><br><span class="line">				output tp3s,tp3c;</span><br><span class="line">				</span><br><span class="line">				half_adder #(5,2) u4ha(tp3a,tp3d,tp3s,tp3c);</span><br><span class="line">				//第1个值5赋给参数AND_DELAY,该参数是在模块half_adder中声明的第1个参数</span><br><span class="line">				//第2个值2赋给参数XOR_DELAY,该参数是在模块half_adder中声明的第2个参数</span><br><span class="line">				//这是通过位置来赋值</span><br><span class="line">				</span><br><span class="line">				//下面是通过名称来赋参数值</span><br><span class="line">				half_adder #(.AND_DELAY(5),.XOR_DELAY(2)) u12ha(tp3a,tp3d,tp3s,tp3c);</span><br><span class="line">			endmodule</span><br><span class="line">			</span><br><span class="line">			module top4(tp4p,tp4q,tp4cin,tp4sum.tp4cont);</span><br><span class="line">				input tp4p,tp4q,tp4cin;</span><br><span class="line">				output tp4sum,tp4cont;</span><br><span class="line">				</span><br><span class="line">				defparam </span><br><span class="line">					u22fa.u1ha.XOR_DELAY = 2,	//全加器实例，u22fa中引用半加器实例u1ha中的参数XOR_DELAY</span><br><span class="line">					u22fa.u1ha.AND_DELAY = 3;	//全加器实例，u22fa中引用半加器实例u1ha中的参数AND_DELAY</span><br><span class="line">					</span><br><span class="line">					full_adder #(3) u22fa(tp4p,tp4q,tp4cin,tp4sum.tp4cont);</span><br><span class="line">					//值3是参数OR_DELAY的新值</span><br><span class="line">			endmodule</span><br><span class="line">			</span><br><span class="line">			按照位置来赋参数值时，模块实例引用语句中的参数值顺序必须于与参数在被引用的底层模块中被声明的顺序一致。在模块top3中的半加器实例u4ha中，AND_DELAY 设置5 ，XOR_DELAY 设置 2。</span><br><span class="line">			模块top3 和top4 的解释说明了用带参数值的模块实例引用语句只能将参数值向下传递一个层次（例如 OR_DELAY）,但是用参数定义语句能够修改任意层次的参数值。</span><br><span class="line">			注意：在带参数值的模块实例引用语句中，指定参数值位置的标记符与门级实例引用语句中定义延时的位置标记符相似。</span><br><span class="line">			</span><br><span class="line">	外部端口</span><br><span class="line">		模块定义中，端口列表举出了模块外部可见的端口</span><br><span class="line">		module scram_a(arb,ctrl,mem_blk,byte);</span><br><span class="line">			input [0:3] arb;</span><br><span class="line">			input ctrl;</span><br><span class="line">			input [8:0]mem_blk;</span><br><span class="line">			output [0:3]byte;</span><br><span class="line">			...</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		arb、ctrl、mem_blk、byte 为这个模块的端口。这些端口同时也是外部端口，即在实例引用中，当采用按照名称</span><br><span class="line">		</span><br><span class="line">		在模块定义的端口列表中，这两种风格可以混合使用，换言之，在模块定义中允许只有部分端口拥有外部端口名称。</span><br><span class="line">		如果模块端口是按位置对应关系进行连接的，则模块实例应用语句中不能使用外部端口名称。（端口名称不能与模块实例名相同）</span><br><span class="line">		</span><br><span class="line">		内部端口名称不经可以是标识符，也可以是下面类型的表达式之一：</span><br><span class="line">		位选择；部分选择 位选择、部分选择和标识符的拼接项。</span><br><span class="line">		下面举例说明：</span><br><span class="line">		module scram_c(</span><br><span class="line">				arb[0:2],ctrl,</span><br><span class="line">				&#123;mem_blk[0],mem_blk[1]&#125;,byte[3]</span><br><span class="line">				);</span><br><span class="line">		</span><br><span class="line">			input [0:3] arb;</span><br><span class="line">			input ctrl;</span><br><span class="line">			input [8:0]mem_blk;</span><br><span class="line">			output [0:3]byte;</span><br><span class="line">			...</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		在scram_c模块的定义中，端口列表中包括部分选择（arb[0:2]）、标识符（ctrl）、拼接项(&#123;mem_blk[0],mem_blk[1]&#125;)和位选择(byte[3])。在外部端口是位选择、部分选择、拼接项的情况下，不能隐式地指定外部端口的名称。因为若这样定义模块端口的话，在模块实例引用语句中，模块端口必须按位置对应关系才能进行互连， 示例</span><br><span class="line">		</span><br><span class="line">		scram_c u_scram_c(</span><br><span class="line">				cab[4:6],ram_ctl,mmy[1:0],tcb</span><br><span class="line">				);</span><br><span class="line">		</span><br><span class="line">		这个实例引用语句中，端口按照位置对应关系来进行互连;因此，cab[4:6]连接到arb[0:2],ram_ctl连接到ctrl，mmy[1]连接到mem_blk[0],mmy[0]连接到mem_blk[1]，tcb连接到byte[3]。arb[3] mem_blk[8:2]没有连接到任何信号，因此这些输入信号将被赋予默认值Z</span><br><span class="line">		</span><br><span class="line">		当内部端口信号与外部连接所需要的表示信号的位宽不完全一致时，若想要使用按名称对应关系连接，(内部端口并不所有信号需要与外部连接时，但是又要按名称对应关系连接，采用方式)则必须为模块内部的端口明确地指定外部端口名称。</span><br><span class="line">		如下</span><br><span class="line">		 module scram_d(</span><br><span class="line">			.data(arb[0:2]),</span><br><span class="line">			.control(ctrl),</span><br><span class="line">			.mem_word(mem_blk[0],mem_blk[1]),</span><br><span class="line">			.addr(byte[3])</span><br><span class="line">			);</span><br><span class="line">			input [0:3]arb;</span><br><span class="line">			input ctrl;</span><br><span class="line">			input[0:8]mem_blk;</span><br><span class="line">			output [0:3]byte;			</span><br><span class="line">			...</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		在模块scram_d的实例引用语句中，端口既能够按位置对应关系，也能够按名称对应关系连接，但是不能混合使用。</span><br><span class="line">		按名称对应关系连接的实例引用语句。</span><br><span class="line">		scram_d u_scram_d(</span><br><span class="line">			.data(cab[4:6]),.control(ram_ctrl),</span><br><span class="line">			.mem_word(mmy[1:0]),.addr(tcb)</span><br><span class="line">			);</span><br><span class="line">			</span><br><span class="line">		模块也可以只有外部端口而没有相应的内部端口。例如：</span><br><span class="line">		module scram_e(</span><br><span class="line">			.data ,.control(ctrl),</span><br><span class="line">			.mem_word(&#123;mem_blk[0],mem_blk[1]&#125;),.addr()</span><br><span class="line">			);</span><br><span class="line">			</span><br><span class="line">		input ctrl;</span><br><span class="line">		input [8:0]mem_blk;</span><br><span class="line">		...</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		模块scram_e有两个外部端口data、addr 没有与模块内部的任何信号相连。</span><br><span class="line">		</span><br><span class="line">		一个内部端口是否能与多个外部端口相连？</span><br><span class="line">		Verilog HDL 允许一个内部端口与多个外部端口相连。例：</span><br><span class="line">		module fan_out(</span><br><span class="line">			.a(ctrl_in),.b(cond_out),.c(cond_out)</span><br><span class="line">			);</span><br><span class="line">			input ctrl_in;</span><br><span class="line">			output cond_out;</span><br><span class="line">			</span><br><span class="line">			assign cond_out = ctrl_in;</span><br><span class="line">			endmodule</span><br><span class="line">		</span><br><span class="line">		内部端口cond_out与两个外部端口b和c相连。因此在b和c上都将出现cond_out的值。</span><br><span class="line">		</span><br><span class="line">		module ssp_ctrl(</span><br><span class="line">			.wdata(&#123;write_bus[15:12],write_bus[3:0]&#125;)</span><br><span class="line">			);</span><br><span class="line">			input [15:0]write_bus;</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		module top_ssp_ctrl;</span><br><span class="line">			reg [7:0] ssp_select;</span><br><span class="line">		</span><br><span class="line">			ssp_ctrl u_ssp_ctrl(.wdata(ssp_select));</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		上面描述模块ssp_ctrl的外部端口名称是wdata,而模块top_ssp_ctrl有选择性地把ssp_select的8个位依次连接到write_bus[15:12] 和 write_bus[3:0] 上。</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	generate(产生，引起) 语句 </span><br><span class="line">			允许细化时间（Elaboration - time）的选取或者某些语句的重复。这些语句可以包括模块实例引用语句、连续赋值语句、always语句、initial 语句 、门级实例引用语句等。</span><br><span class="line">			细化时间是指仿真开始前的一个阶段，此时所有的设计模块已经被链接到一起，并已完成层次引用。</span><br><span class="line">			generate 语句用关键字 generate ... endgenerate 来定界</span><br><span class="line">			在 generate 语句中可以出现以下 3 种语句。</span><br><span class="line">			(1) generate - loop 循环语句</span><br><span class="line">			(2) generate - case 分支语句</span><br><span class="line">			(3) generate - conditional 条件语句</span><br><span class="line">			</span><br><span class="line">			generate 格式</span><br><span class="line">			</span><br><span class="line">			generate</span><br><span class="line">				//generate 循环语句</span><br><span class="line">				//generate 条件语句</span><br><span class="line">				//generate 分支语句</span><br><span class="line">				//嵌套的 generate 语句</span><br><span class="line">			endgenerate</span><br><span class="line">			</span><br><span class="line">	generate 循环语句</span><br><span class="line">		(generate 循环语句 主要功能是帮助设计者编写由多次重复所构造的复杂语句。这可借助于基于结构单元的 generatefor 循环语句，在Verilog编译细化阶段，自动地生成由结构单元实例构成的复杂代码.)</span><br><span class="line">		</span><br><span class="line">		generate 循环语句被用于(Verilog 编译)细化阶段的语句复制，基本上允许对结构元素编写一个for循环。 例 普通N位的异或门</span><br><span class="line">		module nbit_xor</span><br><span class="line">		(#(parameter SIZE = 16))</span><br><span class="line">		(</span><br><span class="line">		input [SIZE-1:0] a,b,</span><br><span class="line">		output [SIZE-1:0] y;</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		genvar gv_i;</span><br><span class="line">		generate</span><br><span class="line">			for(gv_i = 0;gv_i&lt;SIZE;gv_i = gv_i +1)</span><br><span class="line">			begin: sblka</span><br><span class="line">				xor uxor(y[gv_i],a[gv_i],b[gv_i]);</span><br><span class="line">			end</span><br><span class="line">		endgenerate</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		在细化期间，generate 循环语句将被扩展。对于循环变量的每一个值，for循环语句的实体会被重复一次。 例子喜欢后变成</span><br><span class="line">		xor sblka[0].uxor(y[0],a[0],b[0]);</span><br><span class="line">		xor sblka[1].uxor(y[1],a[1],b[1]);</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		通常， generate 循环语句的格式如下：</span><br><span class="line">		for(intitial_expression;final_expression;assignment)</span><br><span class="line">		begin: label</span><br><span class="line">			statements</span><br><span class="line">		end</span><br><span class="line">		在for循环语句内，循环变量需要被初始化并且在每一次循环时都需要被修改。使用的这种循环变量被称为genvar变量。这种变量必须用genvar 声明语句来声明，并且只能够在generate 循环语句种使用。genvar 变量用于初始化语句和genvar 赋值语句中。</span><br><span class="line">		在模块 nbit_xor中，genvar 变量是gv_i 。</span><br><span class="line">		初始化时，将其赋值为0，然后每一次循环后加1。</span><br><span class="line">		generate 块需要标签， 这个标签用来表示 generate循环的实例名称 。在模块 nbit_xor 中，generate 块的标签是 sblka 。</span><br><span class="line">		实例uxor的层次路径是：</span><br><span class="line">			nbit_xor.sblka[0].uxor</span><br><span class="line">			nbit_xor.sblka[1].uxor</span><br><span class="line">			...</span><br><span class="line">			</span><br><span class="line">			在 generate 语句中还可以有局部声明。例，如果我们在块 sblka 中包括了如下声明：</span><br><span class="line">			</span><br><span class="line">			wire phy2;</span><br><span class="line">			那么将会出现线网变量phy2的16个实例 ，它们的层次引用名称为：</span><br><span class="line">			sblka[0].phy2</span><br><span class="line">			sblka[1].phy2</span><br><span class="line">			...</span><br><span class="line">			</span><br><span class="line">			在细化期间，for 循环语句被扩展，即对于每一次循环，重复一次 for 语句的实体。</span><br><span class="line">			如果在 generate 语句内有多个语句，所有的语句都将被重复。尽管上例中的 generate 语句中只有一个门级实例引用语句，但是 generate 语句还可以包含过程性语句。</span><br><span class="line">			下面是一个波纹计数器的示例。</span><br><span class="line">			module ripple_counter</span><br><span class="line">				#(parameter BITS = 8)</span><br><span class="line">				(</span><br><span class="line">					input count_clk,nreset,</span><br><span class="line">					output[BITS-1:0]q</span><br><span class="line">				);</span><br><span class="line">				</span><br><span class="line">				genvar gv_a;</span><br><span class="line">				</span><br><span class="line">				jk_ff u0jk_ff(</span><br><span class="line">					.J(1&#x27;b1),.K(1&#x27;b1),.NRESET(nreset),</span><br><span class="line">					.CK(cond_out),.Q(q[0]),.NQ());</span><br><span class="line">				</span><br><span class="line">				generate </span><br><span class="line">					for(gv_a = 1; gv_a &lt; BITS; gv_a = gv_a +1&#x27;b1)</span><br><span class="line">					begin : gblk_a</span><br><span class="line">						jk_ff u1jk_ff(</span><br><span class="line">							.J(1&#x27;b1),.K(1&#x27;b1),.NRESET(nreset),</span><br><span class="line">							.CK(q[gv_a -1]),.Q(q[gv_a]),.NQ());</span><br><span class="line">					end</span><br><span class="line">				endgenerate</span><br><span class="line">			endmodule</span><br><span class="line">			</span><br><span class="line">			genvar 变量是 gv_a 。在 generate 语句外部实例引用了一个名为 u0jk_ff 的模块实例。 在 generate 语句内部声明了另外的 BITS-1 个实例。</span><br><span class="line">			</span><br><span class="line">	generate - conditional 条件语句</span><br><span class="line">		generate 条件语句允许在细化期间对语句进行条件选择。generate 条件语句的常见格式如下：</span><br><span class="line">			if(condition)</span><br><span class="line">				statements</span><br><span class="line">			[else</span><br><span class="line">				statements]</span><br><span class="line">		</span><br><span class="line">		condition 必须是一个静态的条件，既在喜欢期间计算得出(这样一个条件表达式只能有常数和参数组成)。 statements可以是任何能够在模块出现的语句、 例如，always语句、模块实例引用语句和门级实例引用语句。</span><br><span class="line">		在细化期间，根据条件的值，选择相应的语句。注意：由于条件的值可能要取决于一个值从上层模块传递过来的参数，因此条件的值可能不能在细化期间被完全计算出来。</span><br><span class="line">		例是一个使用generate 循环语句和generate条件语句的移位寄存器。</span><br><span class="line">		module shift_register</span><br><span class="line">			#(parameter BITS = 8)</span><br><span class="line">			(input shift_in,clk,nreset,</span><br><span class="line">			output shift_out</span><br><span class="line">			);</span><br><span class="line">			</span><br><span class="line">			wire [BITS-1:0]tq;</span><br><span class="line">			genvar gv_k;</span><br><span class="line">			</span><br><span class="line">			generate</span><br><span class="line">				for(gv_k = 0 ; gv_k&lt;BITS ; gv_k = gv_k+1&#x27;B1)</span><br><span class="line">				begin: gblk_x</span><br><span class="line">					if(gblk_x == BITS-1)	begin</span><br><span class="line">						dflip_flop u0dff(</span><br><span class="line">							.d(shift_in),.nreset(nreset),.ck(clk),</span><br><span class="line">							.q(tq[gv_k])</span><br><span class="line">						);</span><br><span class="line">					end</span><br><span class="line">					else begin</span><br><span class="line">						if(gv_k == 0) begin</span><br><span class="line">							dflip_flop u1dff(</span><br><span class="line">								.d(tq[gv_k +1]),.nreset(nreset),.ck(clk),</span><br><span class="line">								.q(shift_out)</span><br><span class="line">							);</span><br><span class="line">						end</span><br><span class="line">						else begin</span><br><span class="line">							dflip_flop u2dff(</span><br><span class="line">								.d(tq[gv_k +1]),.nreset(nreset),.ck(clk),</span><br><span class="line">								.q(tq[gv_k])</span><br><span class="line">							);</span><br><span class="line">						end</span><br><span class="line">					end</span><br><span class="line">				end</span><br><span class="line">			endgenerate</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		在细化期间，for循环语句被扩展。如果 generate 语句的变量 gv_k 的值为 BITS-1,那么就完成了移位寄存器的第一个部分(串行输入进入了触发器的 d 输入端)。</span><br><span class="line">		如果 generate 语句的变量 gv_k 的值为 0 ， 那么就完成了移位寄存器的最后一个部分(触发器的输出端输出到 shift_out)。 </span><br><span class="line">		当 generate 语句的变量 gv_k 取其他的所有值时，则生成了移位寄存器的中间部分(触发器的d端连接到前一个触发器的q端)</span><br><span class="line">		在完成细化后(假设BITS的值为8)，可以得到：</span><br><span class="line">		dflip_flop gblk_x[7].u0dff(</span><br><span class="line">							.d(shift_in),.nreset(nreset),.ck(clk),</span><br><span class="line">							.q(tq[7])</span><br><span class="line">						);</span><br><span class="line">		</span><br><span class="line">		dflip_flop gblk_x[6].u2dff(</span><br><span class="line">								.d(tq[7]),.nreset(nreset),.ck(clk),</span><br><span class="line">								.q(tq[6])</span><br><span class="line">							);</span><br><span class="line">							</span><br><span class="line">		dflip_flop gblk_x[5].u2dff(</span><br><span class="line">								.d(tq[6]),.nreset(nreset),.ck(clk),</span><br><span class="line">								.q(tq[5])</span><br><span class="line">							);</span><br><span class="line">		</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		dflip_flop gblk_x[0].u1dff(</span><br><span class="line">								.d(tq[1]),.nreset(nreset),.ck(clk),</span><br><span class="line">								.q(shift_out)</span><br><span class="line">							);</span><br><span class="line">		</span><br><span class="line">		用 generate 条件形成得  generate 语句的例子</span><br><span class="line">		module adder</span><br><span class="line">			#(parameter SIZE = 4)</span><br><span class="line">			(input [SIZE-1 : 0]a,b,</span><br><span class="line">			output [SIZE-1 : 0]sum,</span><br><span class="line">			output carr_out</span><br><span class="line">			);</span><br><span class="line">			</span><br><span class="line">			wire [SIZE-1 : 0] carry;</span><br><span class="line">			genvar gv_k;</span><br><span class="line">			</span><br><span class="line">			generate </span><br><span class="line">				for(gv_k = 0; gv_k &lt; SIZE; gv_k = gv_k + 1)</span><br><span class="line">					begin : gen_blk_adder</span><br><span class="line">						if(gv_k == 0) begin</span><br><span class="line">							half_adder u_ha(</span><br><span class="line">								.a(a[gv_k]),.b(b[gv_k]),.sum(sum[gv_k]),</span><br><span class="line">								.carr_out(carry[gv_k])</span><br><span class="line">							);</span><br><span class="line">						end</span><br><span class="line">						else begin</span><br><span class="line">							full_adder u_fa(</span><br><span class="line">								.a(a[gv_k]),.b(b[gv_k]), </span><br><span class="line">								.carry_in(carry[gv_k - 1]),.sum(sum[gv_k]), </span><br><span class="line">								.carry_out(carry[gv_k]) </span><br><span class="line">							);</span><br><span class="line">						end</span><br><span class="line">					end</span><br><span class="line">			endgenerate</span><br><span class="line">		endmodule</span><br><span class="line">		</span><br><span class="line">		generate - case分支语句</span><br><span class="line">		generate 分支语句与 generate 条件语句类似，只不过 generate 分支语句是用分支语句来进行条件性选择。 generate 分支语句的常见格式如下：</span><br><span class="line">		语句根据参数IMPLEMENTA TION_LEVEL,的值选择相应的加法操作行为。</span><br><span class="line">		</span><br><span class="line">		module my_special_addr</span><br><span class="line">			#(parameter SIZE = 16,</span><br><span class="line">				parameter IMPLEMENTA TION_LEVEL = 0)</span><br><span class="line">			(input[SIZE-1:0] arg1,arg2,</span><br><span class="line">			output[SIZE-1:0]result</span><br><span class="line">			);</span><br><span class="line">			</span><br><span class="line">			generate</span><br><span class="line">				case()</span><br><span class="line">					0:assign result = argl + arg2; </span><br><span class="line">					</span><br><span class="line">					1:ripple_adder u_ra(.sum(result),.a(argl),.b(arg2));</span><br><span class="line">					2:cla u_cla(.sum(result),.a(arg1),.b(arg2));</span><br><span class="line">					3:fast_cla u_fcla(.sum(result),.a(argl),.b(arg2));</span><br><span class="line">				endcase</span><br><span class="line">			endgenerate</span><br><span class="line">		endmodule</span><br><span class="line">		default分支是可选的。若IMPLEMENTATION_LEVEL的值大于3，则这些分支选项中无论哪一条语句都不会被选中执行。</span><br><span class="line">		</span><br><span class="line">	配置</span><br><span class="line">	库的概念，库是存储编译配置、UDP和模块(可以统称位cell(单元))的地方。库可以是逻辑库、符号库，包含许多已编辑好的源代码。</span><br><span class="line">		使用库声明语句可以声明带具体内容的库</span><br><span class="line">		library library_name &quot;file_name(s)&quot;</span><br><span class="line">		这条声明语句能把指定名的文件编译进名为 library_name 的逻辑库中。</span><br><span class="line">		库映像文件( library Map File) 是由许多上述库声明语句组成的列表。用include 语句可以在一个映象文件中包含另一个库映像文件。</span><br><span class="line">		</span><br><span class="line">		include library_map_file;</span><br><span class="line">		下面举一个库映象文件的例子。</span><br><span class="line">		//文件：esoc_library:map</span><br><span class="line">		library lib_global	&quot;gbl/global_blocks.vg&quot;;</span><br><span class="line">		library lib_rtl		&quot;./*.vg&quot;;</span><br><span class="line">		library lib_work	&quot;/home/bond/IP/usb*.v&quot;;</span><br><span class="line">		include 			&quot;../../global_lib_definitions&quot;;</span><br><span class="line">		library	lib_gate	&quot;./syn/gate/*.vg&quot;;</span><br><span class="line">		</span><br><span class="line">		库映像文件 esoc_library.map 包含了4个库声明语句和1个include 语句 。声明的 4 个库分别是 lib_global 、lib_rtl、lib_work 和 lib_gate。 文件 gbl/global_blocks.vg 被编译进 lib_global 。在当前文件夹中所有扩展名为*.vg 的文件都被编译进库 lib_rtl， 以次类推，在文件名中指定的路径与库映像文件按所在位置有关.</span><br><span class="line">			</span><br><span class="line">		在剖析任何的源代码前,由Verilog HDL的剖析器读入库映像文件。可以拥有多个库映像文件，凡支持Verilog HDL的工具必须提供一种机制去支持读入多个多个库映象文件。</span><br><span class="line">		</span><br><span class="line">		当源文件被编译时，每个源文件中的单元都被保存到库映象文件指定的相应库中去。例如，当文件usb_host.v被编译时，这个文件中所有的单元都被保存在库lib_work中。</span><br><span class="line">		</span><br><span class="line">		现在回到配置这个话题,配置是指确定某实例与库中某个模块的绑定（Binding）关系</span><br><span class="line">		</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog HDL入门(3)</title>
    <url>/2022/12/12/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/FPGA/Verilog-HDL%E5%85%A5%E9%97%A8(3)/</url>
    <content><![CDATA[<blockquote>
<p>Verilog 基础语言3 </p>
</blockquote>
<span id="more"></span>

<h1 id="3-第三章内容"><a href="#3-第三章内容" class="headerlink" title="3.第三章内容"></a>3.第三章内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据流模型</span><br><span class="line">连续赋值语句常用来建立数据流的行为模型；过程性赋值语句用来为时序电路建立行为模型。组合逻辑电路行为模型的最好方法时使用连续赋值语句</span><br><span class="line"></span><br><span class="line">连续赋值语句</span><br><span class="line">连续赋值语句可以用来对线网进行赋值（不能用来对寄存器进行赋值），它的格式如下（简单格式）</span><br><span class="line">assign LHS_target = RHS_expression;</span><br><span class="line">举例</span><br><span class="line">//线网声明：</span><br><span class="line">wire [3:0]frm_rdy,coh_rdy,hrd_tag;</span><br><span class="line"></span><br><span class="line">//连续赋值语句</span><br><span class="line">assign hrd_tag = coh_rdy &amp; frm_rdy;</span><br><span class="line"></span><br><span class="line">连续赋值语句 被赋值目标是hrd_tag；coh_rdy &amp; frm_rdy，特别注意，连续赋值语句种一定由关键字assign</span><br><span class="line">连续赋值语句在什么时候执行,只要右侧表达式中的操作数有事件发生（既操作数值改变）时，就会计算右侧表达式；若新的结果值与原来的值不同，则把新的结果值赋给左侧的被赋值目标</span><br><span class="line"></span><br><span class="line">若coh_rdy 或 frm_rdy 发生了变化，就会计算右侧的表达式。若右侧表达式的值发生了变化，则把新计算出的值赋给线网 hrd_tag</span><br><span class="line">连续赋值的目标可以是类型: 标量线网、向量线网、矩阵中的一个元素（该矩阵可以是标量线网类型的，也可以是向量线网类型的）、向量线网的某一位、向量线网的部分位、上述各种类型的拼接体。</span><br><span class="line"></span><br><span class="line">标量线网 如：wire a,b;</span><br><span class="line">向量线网 如：wire [3:0] a,b;</span><br><span class="line"></span><br><span class="line">下面，被赋值的目标是一个标量线网和一个向量线网的拼接体</span><br><span class="line">wire carry_out,carry_in;</span><br><span class="line">wire [3:0] sum,a,b;</span><br><span class="line"></span><br><span class="line">assign &#123;carry_out,sum&#125; = a + b + carry_in;</span><br><span class="line">a和b的位宽是4位，所以加法运算能够产生最大为5位的结果。因此左侧表达式的宽度指定为5位(carry_out 1位，sum 4位),最终这个赋值语句将右侧表达式最右边(低)4位的值赋给sum,第五位（进位）的值赋值给carry_out。</span><br><span class="line"></span><br><span class="line">例子说明如何在一条连续赋值语句中进行多次赋值</span><br><span class="line">assign 	mux_out = (select == 0)?Input_a:&#x27;bz,	//&#x27;bz 表示32位位宽</span><br><span class="line">		mux_out = (select == 1)?Input_b:&#x27;bz,</span><br><span class="line">		mux_out = (select == 2)?Input_c:&#x27;bz,</span><br><span class="line">		mux_out = (select == 3)?Input_d:&#x27;bz;</span><br><span class="line"></span><br><span class="line">上面赋值语句是下面4条独立连续赋值语句的简化书写格式。</span><br><span class="line">assign	mux_out = (select == 0)?Input_a:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 1)?Input_b:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 2)?Input_c:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 3)?Input_d:&#x27;bz;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">wire dtag;</span><br><span class="line">parameter SIZE = 7;</span><br><span class="line">wire [SIZE:0]padded_dtag;</span><br><span class="line"></span><br><span class="line">assign padded_dtag = &#123;SIZE&#123;1&#x27;b0&#125;,dtag&#125;;</span><br><span class="line"></span><br><span class="line">若没有对连续赋值的目标类型进行声明，则将把它默认为标量线网。</span><br><span class="line">assign mc_noburst = dma_lock;	//没有对mc_noburst经行声明，mc_noburst被默认为1位的线网。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线网声明赋值</span><br><span class="line">连续赋值可以作为线网声明的一部分，这样赋值称为线网声明赋值。</span><br><span class="line">wire [3:0]qmv_wr = 4&#x27;b0;</span><br><span class="line">wire frm_wait = &#x27;b1;</span><br><span class="line"></span><br><span class="line">wire ictr_gt_qctr = ictr &gt; qctr,</span><br><span class="line">	qctr_gt_ictr = qctr &gt; ictr;</span><br><span class="line"></span><br><span class="line">wire [(8*12-1):0]dbg_dump_rpt = &quot;dbg_dump_rpt&quot;;</span><br><span class="line">线网声明赋值不但声明了线网，还对声明的线网进行连续赋值。</span><br><span class="line">线网声明赋值是 :声明线网，然后编写连续赋值语句的一种简便形式。</span><br><span class="line">wire wr_cycle;				等价于线网声明赋值语句		wire wr_cycle = &#x27;b1;</span><br><span class="line">assign wr_cycle = &#x27;b1;     	==========================&gt;</span><br><span class="line"></span><br><span class="line">不允许对同一线网进行多个线网声明赋值。若必须进行多个赋值，则必须使用连续赋值语句。</span><br><span class="line"></span><br><span class="line">赋值延迟()</span><br><span class="line">assign #6 dbg_data = int_data|| peg_cntxt;</span><br><span class="line">#6:上述赋值语句中指定的延时，指从右侧表达式中任一操作数的变化，到右侧表达式重新计算，再把计算结果赋给左侧的目标总共需要6个时间单位的延迟，若在时刻5，int_data值发生变化，则在时刻5重新计算赋值语句的右侧表达式，并在时刻11（=5+6）把计算出的新值赋给dbg_data</span><br><span class="line">以最后一次右边变化计算出的结果延时后，赋值给左边</span><br><span class="line"></span><br><span class="line">在右侧得值传递给左侧之前，右侧得值发生了变化，会怎么样？最后一次值得变化将起决定作用，</span><br><span class="line">assign #4 peg_free = xbid_par;</span><br><span class="line">延时期间右侧表达式发生得变化会被滤除</span><br><span class="line">（需要看书，才能理解此处）</span><br><span class="line">在把右式得变化传播到左式之前，右式必须至少能够在该延迟期间保持右式值不变；</span><br><span class="line">在延迟期满，若右式得值发生了变化，则前面得值就不能传播到输出。</span><br><span class="line"></span><br><span class="line">在每个延迟得声明中，总共有3个延迟值可以被指定</span><br><span class="line">上升延迟值、下降延迟值、截止延迟值</span><br><span class="line">格式：</span><br><span class="line">assign #(rise,fall,turn-off) LHS_target = RHS_expression;</span><br><span class="line"></span><br><span class="line">三个延迟值为0时，如何在连续赋值语句中指定这些延迟</span><br><span class="line">//一个延迟参数</span><br><span class="line">assign #4 biu_par = fe_par ||wsp_par;	//上升延迟、下降延迟、截止延迟(既变化到Z的延迟)和变化到x的延时相同，都为4</span><br><span class="line"></span><br><span class="line">//两个延迟参数</span><br><span class="line">assign #(4,8)biu_par = rd_trg;	//上升延迟4、下降延迟8、截止延迟和x的延迟相同，为4和8的最小值，4</span><br><span class="line"></span><br><span class="line">//三个延迟参数</span><br><span class="line">assign #(4,8,6)fe_arb = &amp;fe_dbus;	//上升延迟4、下降延迟8、截止延迟6 变化到x的延迟为4</span><br><span class="line"></span><br><span class="line">//没有延迟参数</span><br><span class="line">assign fe_dbus = rd_address[7:4];	//所有延迟为0</span><br><span class="line"></span><br><span class="line">右侧表达式的值从非0向量变化到0向量，则使用下降延迟；</span><br><span class="line">右侧表达式的值变化到z,则使用截止延迟，其余的情况都使用上升延迟</span><br><span class="line"></span><br><span class="line">线网延迟</span><br><span class="line">延迟可以在线网声明中定义，</span><br><span class="line">wire #5 mem_write;</span><br><span class="line">该延迟指的是mem_write驱动源的值发生改变到线网mem_write本身的值发生改变的延迟。</span><br><span class="line"></span><br><span class="line">assign #2 mem_write = chunk_valid &amp; flop_valid;</span><br><span class="line">假设flop_valid 变化导致重新计算右侧表达式，结果和以前不同，则在2个时间单位后，重新赋值个mem_write;</span><br><span class="line">但是mem_write的线网延迟，对线网mem_write的赋值发生在7个时间单位后，</span><br><span class="line"></span><br><span class="line">首先赋值延迟起作用，然后加上线网延迟产生的作用；</span><br><span class="line"></span><br><span class="line">线网声明赋值中， 指定了延迟，这个延迟不是线网延迟，是赋值延迟，</span><br><span class="line">nc_data进行的线网声明赋值， 2个时间单位指的是赋值延时，不是线网延迟（线网延迟，声明线网时不能有赋值）</span><br><span class="line">wire [3:0] #2 nc_data = si_data-mem_wdata;</span><br><span class="line"></span><br><span class="line">主/从触发器</span><br><span class="line">module msdff_dataflow(</span><br><span class="line">	input wire d, clk,</span><br><span class="line">	output wire q,q_bar</span><br><span class="line">);</span><br><span class="line">	wire not_clk, not_d,not_y,y,d1,d2,y_bar,y1,y2;</span><br><span class="line">	assign not_d =~d;</span><br><span class="line">	assign not_clk =~clk;</span><br><span class="line">	assign not_y = ~y;</span><br><span class="line"></span><br><span class="line">	assign d1 =~(d &amp; clk);</span><br><span class="line">	assign d2 = ~(clk &amp; not_d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">行为级建模</span><br><span class="line">过程性结构</span><br><span class="line">两种语句是对设计进行行为级建模的主要结构 initial 、always</span><br><span class="line">模块中可以包含任意个 initial always 语句 ，这些语句相互之间是并行执行，</span><br><span class="line">一条initial always 语句的执行会产生一个单独的控制流、所有的initial always 都是再0时刻开始并行的执行。</span><br><span class="line"></span><br><span class="line">initial 语句只执行一次，在仿真开始时（0时刻）执行</span><br><span class="line"></span><br><span class="line">parameter SIZE = 1024;</span><br><span class="line">reg [7:0] vld_ram[0:SIZE-1];</span><br><span class="line">reg speed_reg;</span><br><span class="line"></span><br><span class="line">initial</span><br><span class="line">	begin:	seq_blk_a</span><br><span class="line">		integer		index;</span><br><span class="line"></span><br><span class="line">		speed_reg = 0;</span><br><span class="line"></span><br><span class="line">		for(index = 0;index &lt; SIZE; index = index + 1&#x27;b1)</span><br><span class="line">			vld_ram[index] = 0;</span><br><span class="line"></span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">begin ... end 划定顺序块的界限，顺序块中的语句是顺序执行的</span><br><span class="line">seq_blk_a 顺序块的标签，若过程中没有出现局部声明语句，不需要标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">always语句</span><br><span class="line">always语句是反复执行的， 与initial语句类似地方都是从0时刻开始执行</span><br><span class="line"></span><br><span class="line">事件列表写成： @(a or b) @(a,b) @(*)</span><br><span class="line"></span><br><span class="line">时序控制</span><br><span class="line">延迟控制、事件控制</span><br><span class="line"></span><br><span class="line">延迟控制</span><br><span class="line">#2 tx_addr = rx_addr - 5;	//等待延迟，执行过程语句前等待2个单位延迟</span><br><span class="line"></span><br><span class="line">延迟控制的延迟可以是任意表达式，不必限制为一个常量，</span><br><span class="line"></span><br><span class="line">延迟表达式的值为0，则称为显式零延迟。</span><br><span class="line">#0;</span><br><span class="line">显示零延迟触发一个等待，等待所有其他在当前仿真时刻要被执行的事件执行完毕后，才将其恢复，仿真事件不会前进</span><br><span class="line"></span><br><span class="line">若延迟表达式的值为 x、z,等效与零延迟。</span><br><span class="line">若延迟表达式计算结果为负值，则将其二进制补码值作为延迟</span><br><span class="line"></span><br><span class="line">若延迟值包含空格字符、表达式，需要用括把延迟值括起来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事件控制</span><br><span class="line">事件控制中，语句的执行是基于事件的：跳变沿敏感事件控制、电平敏感事件控制</span><br><span class="line">跳变沿敏感事件控制 @(negedge rst_n) @(posedge clk)</span><br><span class="line">电平敏感事件控制 @cell_byte</span><br><span class="line">@cell_byte per_frame= cell_byte; //当cell_byte上有事件发生时，才会执行赋值操作</span><br><span class="line"></span><br><span class="line">负跳变			正跳变</span><br><span class="line">1 -&gt; x			0 -&gt; x</span><br><span class="line">1 -&gt; z			0 -&gt; z</span><br><span class="line">1 -&gt; 0			0 -&gt; 1</span><br><span class="line">x -&gt; 0			x -&gt; 1</span><br><span class="line">z -&gt; 0			z -&gt; 1</span><br><span class="line"></span><br><span class="line">通过一种方式可以隐含地把相应的过程性语句中所有的变量和线网都包含在敏感事件例表中。</span><br><span class="line">@*表明相应的过程性语句对于其内部的任何值的变化都会敏感</span><br><span class="line"></span><br><span class="line">always @ *</span><br><span class="line">	procedural_statement</span><br><span class="line"></span><br><span class="line">@* 把过程性语句内部所有的变量都看作是敏感事件列表的一部分</span><br><span class="line">always @* cpu_reg = master_rag + control_reg;</span><br><span class="line">//隐含地把 master_rag 、control_reg 包含在敏感事件列表中。实际上是下面always语句简写格式</span><br><span class="line">always</span><br><span class="line">	@(master_rag,control_reg)</span><br><span class="line">		cpu_reg = master_rag + control_reg;</span><br><span class="line"></span><br><span class="line">@* 代表在相应块中的任何语句中使用了的变量和线网，还包括在赋值语句中的等号左边的表达式中的序号变量</span><br><span class="line">always @* w[k] = ram&amp;chip;</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line">@(ram,chip,k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">电平敏感事件控制</span><br><span class="line">电平敏感事件控制中，知道条件变为正后，过程性语句才执行</span><br><span class="line">wait(condition)  //等到 condition 为真的时候，才执行下面的语句</span><br><span class="line">	procedural_statement</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语句块（begin  end）</span><br><span class="line">1.顺序语句块( begin   end) :语句块中的语句按照给定顺序执行</span><br><span class="line">2.并行语句块( fork  join)  : 语句并行执行</span><br><span class="line">语句块的表示符是可选的。</span><br><span class="line">	若有标识符，可以在语句块内部声明局部变量，还可以被应用</span><br><span class="line"></span><br><span class="line">顺序语句块</span><br><span class="line">	语句按顺序执行;定界符是begin end</span><br><span class="line">顺序块语法：</span><br><span class="line">	begin</span><br><span class="line">		[:block_id&#123;declarations&#125;]//&#123;块id[声明]&#125; 标识符</span><br><span class="line">		procedural_statement(s)		//过程型语句 执行部分</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	begin 	//还可以这么写顺序块</span><br><span class="line">		mem_r = sms|mem;</span><br><span class="line"></span><br><span class="line">		@(negedge clk_sms)</span><br><span class="line">			update = mem_rd;</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	begin: lbl_seq_blok	//lbl_seq_blok 标识符</span><br><span class="line">		reg[1:0] dmac;</span><br><span class="line">		dmac = 2&#x27;d1;</span><br><span class="line">	end</span><br><span class="line">	顺序块标记 lbl_seq_blok ;</span><br><span class="line"></span><br><span class="line">并行语句块</span><br><span class="line">	定界符是fork join ；并行语句块中的语句是并行执行的</span><br><span class="line">	在并行语句块内的每条语句中指定的延迟值都是相对于语句块开始执行的时刻的；</span><br><span class="line">	并行语句块中的最后一个行为（并不一定是最后一条语句）执行完成时，再继续执行这个并行块后面其他语句。</span><br><span class="line">	在执行跳出语句块前必须执行完并行语句块内的所有语句。</span><br><span class="line"></span><br><span class="line">	就是将并行语句块中所有的语句并行执行完成后，在执行并行块后面的语句</span><br><span class="line">	fork</span><br><span class="line">	[:block_id&#123;declarations&#125;]	//&#123;块id[声明]&#125; 标识符</span><br><span class="line">	procedural_statement(s)</span><br><span class="line">	join</span><br><span class="line"></span><br><span class="line">	顺序语句块和并行语句块可以混合使用，下面是两者不同之处</span><br><span class="line"></span><br><span class="line">	always</span><br><span class="line">		begin :blk_seq_a</span><br><span class="line">			#4 pm_write = 5;				//S1</span><br><span class="line"></span><br><span class="line">			fork:blk_par_a					//S2</span><br><span class="line">				#6 pm_select = 7;			//P1</span><br><span class="line"></span><br><span class="line">				begin :blk_seq_b			//P2</span><br><span class="line">					wdog_rst = pm_enable;	//S6</span><br><span class="line">					#5 wdog_intr = wdog_rst;//S7</span><br><span class="line">				end</span><br><span class="line"></span><br><span class="line">				#2 frc_sel = 3;				//P3</span><br><span class="line">				#4 pm_itcr = 2;				//P4</span><br><span class="line">				#8 itop = 4;				//P5</span><br><span class="line">			join</span><br><span class="line"></span><br><span class="line">			#8 pm_sel = 3;					//S3</span><br><span class="line">			#4 pcell_id = 52;				//S4</span><br><span class="line">			#6 $stop;						//S5</span><br><span class="line">		end</span><br><span class="line">	blk_seq_a 顺序语句块，并且块内所有语句（S1、S2、S3、S4、S5）都是按照顺序执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">过程性赋值</span><br><span class="line">	过程性赋值是在initial 、 always语句内进行的赋值 ，只能对变量类型赋值，</span><br><span class="line"></span><br><span class="line">语句内部延迟</span><br><span class="line">	语句内部延迟之前计算的右式，然后进入延迟等待，最后把重新计算的值赋给左式的目标</span><br><span class="line"></span><br><span class="line">	重复事件控制的时序控制 格式：</span><br><span class="line">	repeat(expression) @(event_expression)</span><br><span class="line">	这种控制格式是利用一个或多个事件发生次数来指定延迟</span><br><span class="line">	hresult = repeat(2) @(negedge tclk) hw_data + hr_data;</span><br><span class="line">	既hw_data + hr_data的值，然后等待时钟tclk上出现2个负跳变沿，再把右边值赋给hresult。</span><br><span class="line">	等价：</span><br><span class="line">	begin</span><br><span class="line">		temp = hw_data + hr_data;</span><br><span class="line">		@(negedge tclk);</span><br><span class="line">		@(negedge tclk);</span><br><span class="line">		hresult = temp;</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阻塞性过程赋值</span><br><span class="line">	赋值操作符是 = 的过程性赋值称为阻塞性过程赋值</span><br><span class="line">	a = 52;</span><br><span class="line">	阻塞性过程赋值语句，当前语句必须执行完成才能执行下一条赋值语句。</span><br><span class="line"></span><br><span class="line">非阻塞性过程赋值</span><br><span class="line">	非阻塞性过程赋值语句中，使用赋值符号 &lt;=</span><br><span class="line"></span><br><span class="line">	特殊例子</span><br><span class="line">	initial</span><br><span class="line">	begin</span><br><span class="line">		wdog_intr &lt;= 0;</span><br><span class="line">		wdog_intr &lt;= 1;</span><br><span class="line">	end</span><br><span class="line">	在initial语句执行后，wdog_intr的值为1；</span><br><span class="line">	verilog HDL标准规定了对同一个reg变量的非阻塞性赋值，按照赋值语句执行的顺序来执行；</span><br><span class="line">	wdog_intr先被赋值为0,然后被赋值为1</span><br><span class="line"></span><br><span class="line">	一个在always语句里读取一个变量（key_a）的值，又在另一条always语句里面对同一个变量进行赋值，并且两条always语句由同一个时钟沿来控制， 怎么才能确定读操作发生在写操作之前，</span><br><span class="line">	答案是：用非阻塞赋值可以确保读操作发生在写操作之前。</span><br><span class="line"></span><br><span class="line">	always @(negedge clock)</span><br><span class="line">		reg_a &lt;= data;			//在此处reg_a 被赋值</span><br><span class="line"></span><br><span class="line">	always @(negedge clock)</span><br><span class="line">		reg_b &lt;= reg_a;</span><br><span class="line"></span><br><span class="line">	何时使用哪种过程性赋值语句？（建议）</span><br><span class="line">		对always语句块外用到的变量进行赋值时，使用非阻塞性赋值(&lt;=)</span><br><span class="line">		计算中间结果的时候，用阻塞性赋值(=)</span><br><span class="line"></span><br><span class="line">		always @(posedge clk_piol) begin</span><br><span class="line">			bdir_data = ^spi_rdata;				//用阻塞性赋值计算中间结果</span><br><span class="line">			spi_wdata &lt;= bdir_data + rst_cnt;	//用非阻塞赋值对语句块外变量赋值</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">		always @(spi_wdata) begin</span><br><span class="line">			spi_pariy &lt;= ^ spi_wdata;</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">连续赋值(assign)与过程赋值的比较</span><br><span class="line"></span><br><span class="line">		过程赋值与连续赋值件的不同之处</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">		过程赋值							|			连续赋值</span><br><span class="line">	出现在initial、always语句中				|	出现在模块(module)中</span><br><span class="line">											|</span><br><span class="line">	过程赋值语句的执行与其周围的其他语句	|	与其他语句并行执行；在右侧操作数的值</span><br><span class="line">	是有关系的								|	发生变化时执行</span><br><span class="line">											|</span><br><span class="line">	驱动变量								|	驱动线网</span><br><span class="line">											|</span><br><span class="line">	使用 = 、&lt;=	 赋值符号					|	使用 = 赋值符号</span><br><span class="line">											|</span><br><span class="line">	无assign关键词							|	使用assign关键词</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">条件语句</span><br><span class="line">	if(condition_l) begin</span><br><span class="line">		procedural_statement_1</span><br><span class="line">	end</span><br><span class="line">	else if (condition_2) begin</span><br><span class="line">		procedural_statement_2</span><br><span class="line">	end</span><br><span class="line">	else begin</span><br><span class="line">		procedural_statement_3</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">case 语句</span><br><span class="line">	条件表达式和各分支项表达式都不必是常量表达式， 在case语句中，x、z值作为字符值进行比较。</span><br><span class="line"></span><br><span class="line">	case语句的条件表达式和分支表达式的长度不同会出现什么情况呢？</span><br><span class="line">		进行任何比较前，把case语句中所有的表达式的位宽都统一</span><br><span class="line">		为这些表达式中最长的一个的位宽。</span><br><span class="line"></span><br><span class="line">	case语句中的无关位</span><br><span class="line">		case语句的两种其他形式：casez、casex,这些形式对x、z值使用了不同的解释。语法与case语句相同，关键字不同</span><br><span class="line"></span><br><span class="line">		casez语句，在casez条件表达式和任意分支项表达式中的值为z的位都会被认为是无关位，既那个位被忽略（不进行比较）</span><br><span class="line">		casex语句，值为x或z的位都会被认为是无关位。</span><br><span class="line"></span><br><span class="line">		casez语句示例：</span><br><span class="line">		casez(intr_mask)</span><br><span class="line">			4&#x27;b1???:rtc_wdata[4] = 0;</span><br><span class="line">			4&#x27;b01??:rtc_wdata[3] = 0;</span><br><span class="line">			4&#x27;b001?:rtc_wdata[2] = 0;</span><br><span class="line">			4&#x27;b0001:rtc_wdata[1] = 0;</span><br><span class="line">		endcase</span><br><span class="line"></span><br><span class="line">	字符？可以用来代替字符Z,来表示无关位。</span><br><span class="line">	casez语句:若intr_mask的第1位是1(忽略intr_mask的其他位)，则rtc_wdata[4] = 0;</span><br><span class="line">	casez语句:若intr_mask的第1位是0，第2位是1(忽略intr_mask的其他位)，则rtc_wdata[3] = 0;</span><br><span class="line">	依次类推</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环语句</span><br><span class="line">	有4类循环语句 forever 、repeat、while、for循环</span><br><span class="line"></span><br><span class="line">	forever 循环语句</span><br><span class="line">		循环语句格式：</span><br><span class="line"></span><br><span class="line">		forever</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		此循环语句连续执行过程性语句。因此为了跳出这样的循环，可以在过程性语句内使用中止语句。同时，在过程语句中必须使用某些方式的时序控制,否则forever循环将在0延迟后永远循环下去。</span><br><span class="line">			forever循环语句的示例：</span><br><span class="line">				initial begin</span><br><span class="line">					clk1hz = 0;</span><br><span class="line">					#5 forever</span><br><span class="line">					#10 clk1hz = ~clk1hz;</span><br><span class="line">				end</span><br><span class="line">			上面代码生成一个时钟波形， clk1hz首先被初始化为0，并一直保持为0到第5个单位时刻。此后每隔10个时间单位，clk1hz反向一次。</span><br><span class="line"></span><br><span class="line">	repeat 循环语句 指定循环次数</span><br><span class="line">		语法格式</span><br><span class="line">			repeat (loop_count)	//循环次数</span><br><span class="line">				procedural_statement</span><br><span class="line"></span><br><span class="line">		按照指定的循环次数来执行过程性语句，循环计数表达式的值为 x、z,则循环的次数按照0处理</span><br><span class="line">		repeat(count)</span><br><span class="line">			sum = sum + 10;</span><br><span class="line"></span><br><span class="line">		循环语句与重复事件控制的不同</span><br><span class="line"></span><br><span class="line">		repeat(loop_count)			//循环语句</span><br><span class="line">			@(posedge clk_rtc) accum = accum + 1;</span><br><span class="line">		等待clk_rtc上出现正跳变沿,然后对accum进行加1，循环执行loop_count 次</span><br><span class="line"></span><br><span class="line">		accum = repeat(loop_count) @(posedge clk_rtc) accum + 1;	//重复事件控制</span><br><span class="line">		首先计算 accum + 1，随后等待在clk_rtc上出现 loop_count 次正跳变，最后赋值。</span><br><span class="line"></span><br><span class="line">		repeat(NUM_OF_TIMES) @(negedge zclk); //等待zclk上出现NUM_OF_TIMES下降沿，然后执行紧随在 repeat 语句之后的语句。</span><br><span class="line"></span><br><span class="line">	while 循环语句</span><br><span class="line">		格式：</span><br><span class="line">		while(condition)		// condition 状态状况</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		while 和C语言相似，若条件表达式位x、z。它也同样按照0(假)来处理。</span><br><span class="line">		while(shift_by &gt; 0) begin</span><br><span class="line">			acc = acc &lt;&lt; 1;</span><br><span class="line">			shift_by = shift_by - 1;</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">	for 循环语句</span><br><span class="line">		for(initial_assignment;condition;step_assignment)	//初始值 条件 步骤</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		for循环语句会重复执行过程性语句若干次。 与C语言相似</span><br><span class="line"></span><br><span class="line">		integer k;</span><br><span class="line"></span><br><span class="line">		for(k = 0; k &lt; MAX_RANGE ; k = k +1) begin</span><br><span class="line">			if(hold_data[k] == 0) begin</span><br><span class="line">				hold_data[k] = 1;</span><br><span class="line">			end</span><br><span class="line">			else if(hold_data[k] == 1) begin</span><br><span class="line">				hold_data[k] = 0;</span><br><span class="line">			end</span><br><span class="line">			else	begin</span><br><span class="line">				$display(&quot;hold_data[k] is an x or a z&quot;)</span><br><span class="line">			end</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">	过程性连续赋值</span><br><span class="line">		过程性连续赋值语句是一种能够在 always initial 语句块中出现的语句。</span><br><span class="line">		这种赋值方式可以改写（Override）所有其他语句对线网或者变量赋值。</span><br><span class="line">		它允许赋值语句中的表达式被连续地驱动进入到变量或线网当中去。</span><br><span class="line">		过程连续赋值语句与连续赋值语句是有区别的，连续赋值语句只能出现在initial always 语句之外</span><br><span class="line">			过程性连续赋值语句有两种类型(推测成对出现)</span><br><span class="line">			(1) assign deassign 过程性值语句:对变量进行赋值</span><br><span class="line">			(2) force release 过程性语句：虽然也可以用于对变量赋值，但主要用于对线网赋值。</span><br><span class="line">			assign force语句在某种意义上是 ”连续的“： 就是当assign force 语句生效时，右式中的操作数的任何变化都会引起赋值语句的重新执行。</span><br><span class="line">			过程性连续赋值的目标不能是变量的部分选择或位选择</span><br><span class="line"></span><br><span class="line">	assign deassign 语句</span><br><span class="line">		assign	过程性语句 可以改写所有的 过程性赋值语句 对变量进行的赋值。</span><br><span class="line">		deassign 过程性语句 用来结束对变量的连续赋值。</span><br><span class="line">		变量中的值一直保留到它被重新赋值为止。</span><br><span class="line"></span><br><span class="line">		module d_flip_flop(d,clear,clock,q);</span><br><span class="line">			input d,clear,clock;</span><br><span class="line">			output reg q;</span><br><span class="line"></span><br><span class="line">			always @(clear)</span><br><span class="line">				if(!clear)</span><br><span class="line">					assign q = 0;	//d对q无效</span><br><span class="line">				else</span><br><span class="line">					deassign q;</span><br><span class="line"></span><br><span class="line">			always @(negedge clock) q &lt;= d;</span><br><span class="line"></span><br><span class="line">		endmodule</span><br><span class="line"></span><br><span class="line">		若clear 变为0, assign过程性语句使q清零，而不考虑任何时钟沿时的情况，既clock中 d对q没有影响。</span><br><span class="line">		若clear变为1 ，deassign 语句被执行；这就使得连续性赋值被取消，以后clock就能够对q产生影响。</span><br><span class="line">		若assign语句应用于一个已经用assign进行赋值的变量，则先取消原来assign语句的赋值，然后再进行新的过程性连续赋值。3</span><br><span class="line"></span><br><span class="line">		reg[3:0]load_ctr;</span><br><span class="line">		...</span><br><span class="line">		load_ctr = 0;</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr = nibble^rtc_count;</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr = 2;	//先取消前面对load_ctr的assign 赋值，然后进行新的过程性连续赋值</span><br><span class="line"></span><br><span class="line">		...</span><br><span class="line">		deassign load_ctr;	//load_ctr 一直保持值为2</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr[2] = 1;/* 错误 ：reg变量的位选择不能够作为过程性连续赋值的目标*/</span><br><span class="line"></span><br><span class="line">		第2个assign 语句在进行下一次赋值前先使得前面的第一个assign语句无效。 在deassign语句执行后，load_ctr 的值将一直保持为2 ，直到出现另一个对该变量的过程性连续赋值。</span><br><span class="line"></span><br><span class="line">		assign 语句在某种意义上是 ”连续性“的；既在第1个assign 语句执行后到第2个 assign语句开始执行前， nibble 、rtc_count 上的任何变化将使得第1个assign 语句被重新计算。</span><br><span class="line"></span><br><span class="line">	force release 语句</span><br><span class="line">		force release 过程性语句与 assign deassign 语句非常相识，不同之处是force release 过程语句不仅能够应用于线网，还能够应用于变量。</span><br><span class="line"></span><br><span class="line">		当force语句应用于变量时，变量的当前值被force 语句中表达式的值覆盖；当release 语句应用于变量时，变量中的当前值保持不变，除非对它进行过程性连续赋值(在force语句被执行时)，这种情况下，连续赋值为变量确立一个新值。</span><br><span class="line"></span><br><span class="line">		当用force过程性语句对线网进行赋值时，该赋值语句将忽略线网所有的其他驱动源，直到对该线网执行release 语句。</span><br><span class="line"></span><br><span class="line">		wire test_reset;</span><br><span class="line">		...</span><br><span class="line">		or #1(test_reset,penable,rtc_intr);</span><br><span class="line"></span><br><span class="line">		initial begin</span><br><span class="line">			force test_reset = penable&amp;rtc_intr;</span><br><span class="line">			#5;</span><br><span class="line">			release test_reset;</span><br><span class="line"></span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">		force 语句的执行得 test_reset值(由penable &amp; rtc_intr求得) ，改写来自于或门基元（原语）的值，直到执行release 语句，才恢复由或门原语输出驱动 test_reset重新生效。</span><br><span class="line">		当force 语句有效的时候（前5个时间单位内），在penable 和rtc_intr上的任何变化都会使能赋值语句被重新执行。</span><br><span class="line"></span><br><span class="line">		例：</span><br><span class="line">		reg[2:0]pr_data;</span><br><span class="line">		...</span><br><span class="line">		pr_data = 2;</span><br><span class="line">		force pr_data = 1;</span><br><span class="line">		...</span><br><span class="line">		release pr_data;	//pr_data 保持值1</span><br><span class="line">		...</span><br><span class="line">		assign pr_data = 5;</span><br><span class="line">		...</span><br><span class="line">		force pr_data = 3;	//当用force过程性语句对线网进行赋值时，该赋值语句将忽略线网所有的其他驱动源</span><br><span class="line">		...</span><br><span class="line">		release pr_data ;	//pr_data 的值变为 5</span><br><span class="line">		...</span><br><span class="line">		force pr_data[1:0] = 3;	/* 错误：reg变量的部分选择不能被设置为过程性连续赋值的目标*/</span><br><span class="line">		</span><br><span class="line">		对pr_data的第1次release 使得pr_data的值保持为1。因为在force语句生效时刻没有别的过程性连续赋值语句对该变量进行赋值。</span><br><span class="line">		在执行后一个release语句后，由于对pr_data的过程性连续赋值语句又开始生效，pr_data被重新赋值为5。</span><br><span class="line">		</span><br><span class="line">		握手协议示例</span><br><span class="line">		always 语句可以用于描述交互进程的行为，如交互式有限状态机的行为。同一个模块内的语句可以通过所有always 语句都可见的变量来进行相互通信。不建议使用在 always 内部声明 reg 变量在always 语句之间传递信息。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog HDL入门(2)</title>
    <url>/2022/12/12/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/FPGA/Verilog-HDL%E5%85%A5%E9%97%A8(2)/</url>
    <content><![CDATA[<blockquote>
<p>Verilog 基础语言2 </p>
</blockquote>
<span id="more"></span>

<h1 id="2-第二章内容"><a href="#2-第二章内容" class="headerlink" title="2.第二章内容"></a>2.第二章内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">门级建模   内建基元（原语）门</span><br><span class="line">Verilog HDL提供下列内建基元门</span><br><span class="line">1:多输入门：与门(and)、与非门(nand)、或门(or)、或非门(nor)、异或门(xor)、同或门(xnor)</span><br><span class="line">2:多输出门：缓冲器（buf）、非门（not）</span><br><span class="line">3:三态门：bufif0、bufif1、notif0、notif1</span><br><span class="line">4:上拉、下拉门：pullup、pulldown</span><br><span class="line">5:MOS开关：cmos、nmos、pmos、rnmos、rpmos</span><br><span class="line">6:双向开关：tran、tranif0、tranif1、rtran、rtranif0、rtranif1</span><br><span class="line"></span><br><span class="line">设计中，可以用实例引用语句来描述具体的门。</span><br><span class="line">gate_type [instance_name] (term1,term2,...,termN);</span><br><span class="line">instance_name:可选的(实例名称)</span><br><span class="line">gate_type是上面列出的某种门</span><br><span class="line">term1,term2,...,termN：与名instance_name，类型gate_type门的输入/输出端口相连的线网或变量（模块引脚名称）</span><br><span class="line"></span><br><span class="line">同一类型门的多个实例能够在一条语句结构中定义</span><br><span class="line">gate_type</span><br><span class="line">	[instance_name1] (term1,term2,...,termN),</span><br><span class="line">	[instance_name2] (term1,term2,...,termN),</span><br><span class="line">	...,</span><br><span class="line">	[instance_name3] (term1,term2,...,termN),</span><br><span class="line">	</span><br><span class="line">多输入门</span><br><span class="line">内置的多输入门:与门(and)、与非门(nand)、或门(or)、或非门(nor)、异或门(xor)、同或门(xnor)</span><br><span class="line"></span><br><span class="line">这些逻辑门只有单个输出，1个或多个输入。多输入门实例引用句法：</span><br><span class="line">muliple_input_gate_type[instance_name](OutputA,Input1,Input2,...,InputN);</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">and uland(out1,in1,in2);	//定义名位uland的双输入与门，输出out1,两个输入</span><br><span class="line">and u2and(req,sw_data[15],sw_data[15],ack[2],ack[1]);</span><br><span class="line"></span><br><span class="line">xor </span><br><span class="line">	(qpr,byte_a,byte_b,byte_c),</span><br><span class="line">	(mlock,mprot[0],mprot[1]),</span><br><span class="line">	(xparity,intr_vec[2],intr_vec[1],intr_vec[0],intr_vec[3]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多输入门的真值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">多输出门：缓冲器（buf）、非门（not）</span><br><span class="line">这两种类型门只有一个输入，输出可以是一个或者几个，实例引用语法</span><br><span class="line">muliple_input_gate_type [instance_name](out1,out2,...,outN,InputA);</span><br><span class="line">最后的端口是输入端口，其余的端口全部为输出端口</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">buf u5buf(clk_tx,clk_rx,clk_io1,clk_spi,clk_core);	//缓冲门语句，</span><br><span class="line">clk_core 是u5buf缓冲门的输入，该缓冲门有四个输出clk_tx,clk_rx,clk_io1,clk_spi。</span><br><span class="line"></span><br><span class="line">not u8not(phase_a_rdy,phase_b_rdy,ready);</span><br><span class="line">ready是u8not非门唯一的输入端口。有两个输出phase_a_rdy,phase_b_rdy。</span><br><span class="line"></span><br><span class="line">多输出门真值</span><br><span class="line">buf门真值						not门真值</span><br><span class="line">--------------------|		|--------------------|</span><br><span class="line">buf	| 0	| 1	| x | z |		|not | 0 | 1 | x | z |</span><br><span class="line">输出| 0 | 1 | x | x |		|输出| 1 | 0 | x | x |</span><br><span class="line">--------------------|		|--------------------|</span><br><span class="line"></span><br><span class="line">三态门：bufif0、bufif1、notif0、notif1</span><br><span class="line">4种门均有一个输出、一个数据输入和一个控制输入，三态门基本语法：</span><br><span class="line">tristate_gate [instance_name](OutputA,InputB,ControlC);</span><br><span class="line">第一个端口OutputA是输入端口，第二端口InputB是数据输入，第三端口ControlC是控制输出</span><br><span class="line"></span><br><span class="line">控制输入，输出可被驱动到高阻态，即值Z.</span><br><span class="line">bufif0,控制端输入为1，输出为Z;否则数据从输入传输至输出；  bufif0 其中的0就是条件</span><br><span class="line">bufif1,控制端输入为0，输出为Z;否则数据从输入传输至输出；  bufif1 其中的1就是条件	</span><br><span class="line">notif0,控制端输入为1，输出为Z;否则输入数据的非传输至输出；notif0 其中的0就是条件</span><br><span class="line">notif1,控制端输入为0，输出为Z;否则输入数据的非传输至输出；notif1 其中的1就是条件</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">bufif1 u7bufif1(dbus,mem_data,strode);	//strode为0，名u7bufif1的三态门（bufif1）输出线dbus驱动到高阻态；否则mem_data的值被传输至dbus。</span><br><span class="line">bufif0 u3bufif0(paddr,abus,probe);//probe为1，paddr驱动到高阻态；否则abus的值被传输至paddr。</span><br><span class="line"></span><br><span class="line">高阻态（可能是高电压可能是低电压）</span><br><span class="line">bufif0的真值							bufif1的真值</span><br><span class="line">------------------------|			------------------------|</span><br><span class="line">bufif0 	| control       |           bufif1 	| control       |</span><br><span class="line">		| 0 | 1 | x | z |           		| 0 | 1 | x | z |</span><br><span class="line">----|---|---|---|---|---|           ----|---|---|---|---|---|</span><br><span class="line">DATA| 1	| 0	| z | x	| x |           DATA| 1	| z	| 1 | x	| x |</span><br><span class="line">	| 0	| 0 | z | x	| x |           	| 0	| z | 0 | x	| x |</span><br><span class="line">	| x	| x | z | x	| x |           	| x	| z | x | x	| x |</span><br><span class="line">	| z	| x | z | x	| x |           	| z	| z | x | x	| x |</span><br><span class="line">-------------------------           -------------------------</span><br><span class="line"></span><br><span class="line">notif0的真值							notif1的真值</span><br><span class="line">------------------------|			------------------------|</span><br><span class="line">notif0 	| control       |           notif1 	| control       |</span><br><span class="line">		| 0 | 1 | x | z |           		| 0 | 1 | x | z |</span><br><span class="line">----|---|---|---|---|---|           ----|---|---|---|---|---|</span><br><span class="line">DATA| 1	| 0	| z | x	| x |           DATA| 1	| z	| 0 | x	| x |</span><br><span class="line">	| 0	| 1 | z | x	| x |           	| 0	| z | 1 | x	| x |</span><br><span class="line">	| x	| x | z | x	| x |           	| x	| z | x | x	| x |</span><br><span class="line">	| z	| x | z | x	| x |           	| z	| z | x | x	| x |</span><br><span class="line">-------------------------           -------------------------</span><br><span class="line"></span><br><span class="line">上拉门和下拉门（电阻）：pullup、pulldown</span><br><span class="line">这两种门只有一个输出，没有输入，上拉门（电阻）将输出置1；下拉门（电阻）输出置0</span><br><span class="line">语法：</span><br><span class="line">pull_gate [instance_name](OutputA);</span><br><span class="line"></span><br><span class="line">该门的端口例表只包含1个输出，</span><br><span class="line">pullup u0pullup(core_pwr); //此上拉门（电阻）实例名为u0pullup,其输出core_pwr被连接到高电平1.</span><br><span class="line"></span><br><span class="line">MOS开关：cmos、nmos、pmos、rnmos、rpmos</span><br><span class="line">可以用来给单向开关建模，也就是说，通过设置控制输入的值（1/0）可以接通或者关闭从输入流向输出的数据流</span><br><span class="line">pmos(p类型MOS管)、nmos(n类型MOS管)、rnmos(r代表电阻)和rpmos开关有一个输出、一个输入和一个控制输入;</span><br><span class="line">示例引用这类门语法</span><br><span class="line">gate_type [instance_name] (OutputA,InputB,ControlC);</span><br><span class="line">第一个端口为输出，第二个端口为输入，最后一个端口是控制输入	。</span><br><span class="line">若nmos和rnmos开关的控制输入为0，pmos和rpmos开关的控制输入为1，则开关关闭。输出z;</span><br><span class="line">若nmos和rnmos开关的控制输入为1，pmos和rpmos开关的控制输入为0，则开关打开。输入数据传输致输出;</span><br><span class="line">	</span><br><span class="line">rnmos和rpmos在输入引线和输出引线之间存在比较搞得阻抗（电阻）。当数据从输入传输至输出时，由于开关阻抗的存在，数据型号的强度会出现衰减。</span><br><span class="line">实例：</span><br><span class="line">pmos  u9pmos(iol_bus,read_data,gate_ctrl); //实例名u9pmos的pmos开关，输入read_data，输出iol_bus，控制信号gate_ctrl.</span><br><span class="line">rnmos u2rnmos(control_bit,ready_bit,hold);</span><br><span class="line"></span><br><span class="line">	MOS开关的真值</span><br><span class="line">pmos和rpmos的真值				nmos和rnmos的真值</span><br><span class="line">--------|---------------|		--------|---------------|</span><br><span class="line">pmos	|	control		|       nmos	|	control		|</span><br><span class="line">rpmos   | 0 | 1 | x | z |       rnmos   | 0 | 1 | x | z |</span><br><span class="line">----|---|---------------|       ----|---|---------------|</span><br><span class="line">	| 0 | 0 | z | x | x |       	| 0 | z | 0 | x | x |</span><br><span class="line">Data| 1 | 1 | z | x | x |       Data| 1 | z | 1 | x | x |</span><br><span class="line">	| x | x | z | x | x |       	| x | z | x | x | x |</span><br><span class="line">	| z | z | z | z | z |       	| z | z | z | z | z |</span><br><span class="line">------------------------|       ------------------------|</span><br><span class="line"></span><br><span class="line">cmos(是互补型MOS)和rcmos(电阻型MOS)开关具有一数据输出，一个数据输入和两个控制信号输入，语法</span><br><span class="line">(r)cmos [instance_name](OutputA,InputB,NControlC,PControlD);</span><br><span class="line">第一端口输出，第二端口输入，第三个端口为N沟道控制输入，第四个端口P沟道控制输入，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">双向开关：tran、rtran、tranif0、tranif1、rtranif0、rtranif1</span><br><span class="line">双向开关，数据可以双向流动，并且数据通过开关传播时没有延时。</span><br><span class="line">后四个开关设置合适得控制信号而关闭，但tran和rtran这两种开关不能关闭：</span><br><span class="line">语法(r是有电阻得开关)</span><br><span class="line">(r)tran [instance_name](SignalA,SignalB);	//端口只有两个端口，并且无条件得双向流动，</span><br><span class="line"></span><br><span class="line">其他双向开关实例：</span><br><span class="line">gate_type [instance_name](SignalA,SignalB,ControlC); //第三个端口是控制端口</span><br><span class="line"></span><br><span class="line">tranif0、rtranif0 设置ControlC为1，双向数据禁止流动，为0，则流动</span><br><span class="line">tranif1、rtranif1 设置ControlC为0，双向数据禁止流动，为1，则流动</span><br><span class="line"></span><br><span class="line">rtran、rtranif0、rtranif1 这三种阻抗双向开关，信号经过时，信号强度会出现衰减</span><br><span class="line"></span><br><span class="line">门延迟（在测试文件使用 tb）</span><br><span class="line">信号从任何门得输入到其输出传输延迟可以用门延迟来定义，在门实例引用语句种可以指定门延迟。实例引用带延迟参数得门语句如下：</span><br><span class="line">gate_type [delay][instance_name](terminal_list);</span><br><span class="line">delay 门延迟，输入到输出延迟，没有指定，则为0</span><br><span class="line">门延迟最多由3类延迟值组成:上升延迟、下降延迟、截至延迟</span><br><span class="line">门延迟可指定包含0、1、2、3个延迟值,下表列出了指定不同延迟值个数是，delay的4种表示方式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">实例数组</span><br><span class="line">需要多次实例引用时，门实例应用语句种可以指定一个范围，生成多个实例</span><br><span class="line">gate_type [delay] instance_name [leftbound:rightbound](list_of_terminal_names);</span><br><span class="line">leftbound:rightbound 是任意常数表达式，(可以为负数，)</span><br><span class="line"></span><br><span class="line">wire[3:0] irq,ctrl,sense;</span><br><span class="line">//线网数组irq[0] irq[1] irq[2] irq[3] </span><br><span class="line">//ctrl[0] ctrl[1] ctrl[2] ctrl[3]</span><br><span class="line">//sense[0] sense[1] sense[2] sense[3]</span><br><span class="line">nand u8nand(irq,ctrl,sense);</span><br><span class="line"></span><br><span class="line">语句等价于</span><br><span class="line">nand </span><br><span class="line">	u8nand3 (irq[3],ctrl[3],sense[3]);</span><br><span class="line">	u8nand2 (irq[2],ctrl[2],sense[2]);</span><br><span class="line">	u8nand1 (irq[1],ctrl[1],sense[1]);</span><br><span class="line">	u8nand0 (irq[0],ctrl[0],sense[0]);</span><br><span class="line">	</span><br><span class="line">注意：当指定实例数组时，必须明确得定义实例名</span><br><span class="line"></span><br><span class="line">隐含线网</span><br><span class="line">没有特别声明的线网被默认为1位线网，但是用户可以用`default_nettype编译指令设置默认（缺省）的线网类型。编译指令格式：</span><br><span class="line">`default_nettype net_type </span><br><span class="line">说明：</span><br><span class="line">`default_nettype wand</span><br><span class="line">有了这条编译指令，所有后续未声明的线网全部由被定义wand类型</span><br><span class="line">`default_nettype 编译指令必须出现在模块定义的外面，并且在遇到下一个同样的编译指令或遇到`resetall编译指令之前一直保持有效</span><br><span class="line">`default_nettype编译指令后面跟着一个 none 值， 就可以把已默认的线网定义取消掉， 这种情况下，编译器若发现没有声明类型的任何线网都将报告出错</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">module mux4x1(y,d0,d1,d2,d3,s0,s1)</span><br><span class="line"></span><br><span class="line"> output y;</span><br><span class="line"> input d0,d1,d2,d3,s0,s1;</span><br><span class="line"> wire t3,t2,t1,t0;</span><br><span class="line"> wire s0bar,s1bar;</span><br><span class="line"> </span><br><span class="line"> and</span><br><span class="line">	(t0,s0bar,s1bar,d0),</span><br><span class="line">	(t1,s0,s1bar,d1),</span><br><span class="line">	(t2,s0bar,s1,d2),</span><br><span class="line">	(t3,s0,s1,d3);</span><br><span class="line">	</span><br><span class="line"> not</span><br><span class="line">	(s0bar,s0),</span><br><span class="line">	(s1bar,s1);</span><br><span class="line"> </span><br><span class="line"> or(y,t1,t2,t3,t4);</span><br><span class="line"> </span><br><span class="line">endmodule </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2-4编码器举例（译码器电路）</span><br><span class="line">module dec2x4(a,b,enable,y);</span><br><span class="line"></span><br><span class="line">	input a,b,enable;</span><br><span class="line">	output [0:3]y;</span><br><span class="line">	wire abar,bbar;</span><br><span class="line">	</span><br><span class="line">	not</span><br><span class="line">		(abar,a),</span><br><span class="line">		(bbar,b);</span><br><span class="line">	</span><br><span class="line">	nand </span><br><span class="line">		(y[0],enable,abar,bbar),</span><br><span class="line">		(y[1],enable,abar,b),</span><br><span class="line">		(y[2],enable,a,bbar),</span><br><span class="line">		(y[3],enable,a,b);</span><br><span class="line"></span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line">主从触发器</span><br><span class="line">module ms_dflip_flop(d,c,q,qbar);</span><br><span class="line"></span><br><span class="line">	input d,c;</span><br><span class="line">	output q,qbar;</span><br><span class="line">	wire notd,notc,d1,d2,ybar,y,y1,y2;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	not</span><br><span class="line">		u9nt(notd,d),</span><br><span class="line">		u10nt(notc,d),</span><br><span class="line">		u11nt(noty,y);</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	nand</span><br><span class="line">		u1nd(d1,d,c),</span><br><span class="line">		u2nd(d2,notd,c),</span><br><span class="line">		u3nd(y,d1,ybar),</span><br><span class="line">		u4nd(ybar,y,d2),</span><br><span class="line">		u5nd(y1,y,notc),</span><br><span class="line">		u6nd(y2,notc,noty),</span><br><span class="line">		u7nd(q,y1,qbar),</span><br><span class="line">		u8nd(qbar,q,y2);</span><br><span class="line">		</span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line">奇偶校验电路 9位奇偶校验</span><br><span class="line">module parity_9_bit(d,even,odd);</span><br><span class="line"></span><br><span class="line">	input [0:8]d;	/* 数据位 */</span><br><span class="line">	output even,odd;</span><br><span class="line">	wire e0,e1,e2,e3,f0,f1,f2,h0;</span><br><span class="line">	</span><br><span class="line">	xor</span><br><span class="line">		u0xor(e0,d[0],d[1]),</span><br><span class="line">		u1xor(e1,d[2],d[3]),</span><br><span class="line">		u2xor(e2,d[4],d[5]),</span><br><span class="line">		u3xor(e3,d[6],d[7]),</span><br><span class="line">		u3xor(f0,e1,e2),</span><br><span class="line">		u4xor(f1,e2,e3),</span><br><span class="line">		u6xor(h0,f1,f2),</span><br><span class="line">		u7xor(even,h0,d[8]);</span><br><span class="line">	</span><br><span class="line">	not</span><br><span class="line">		u8not(odd,even);</span><br><span class="line"></span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户定义的原语（基元UDP）</span><br><span class="line">UDP的实例语句与基本门的实例语句完全相同，既UDP实例语句的语法与基本门的实例语句语法一致。</span><br><span class="line"></span><br><span class="line">UDP的定义</span><br><span class="line">UDP可以使用具有如下语法的UDP语句来定义：</span><br><span class="line">primitive UDP_name(OutputName,List_of_inputs);</span><br><span class="line">Output_declarations				//输出声明  	这里类似于模块</span><br><span class="line">List_of_input_declarations		//输入声明列表	这里类似于模块</span><br><span class="line">[Reg_declaration]				//寄存器说明</span><br><span class="line">[Initial_statement]				//初始化语句</span><br><span class="line"></span><br><span class="line">table</span><br><span class="line">	List_of_table_entries		//表格条目列表</span><br><span class="line">endtable</span><br><span class="line">endprimitive </span><br><span class="line"></span><br><span class="line">可以使用如下形式的语句来定义：</span><br><span class="line">primitive UDP_name(Output_declarations,List_of_input_declarations);</span><br><span class="line">[Reg_declaration]				//寄存器说明</span><br><span class="line">[Initial_statement]				//初始化语句</span><br><span class="line"></span><br><span class="line">table</span><br><span class="line">	List_of_table_entries		//表格条目列表</span><br><span class="line">endtable</span><br><span class="line">endprimitive </span><br><span class="line"></span><br><span class="line">UDP的定义不依赖于模块定义,因此出现在模块定义以外。也可以在单独的文本文件中定义UDP</span><br><span class="line">UDP只能有一个输出和一个或多个输入。第一个端口必须是输出端口。此外，输出取值0、1、x(不允许z值)，输入中出现z以x处理，UDP的行为以表的形式描述</span><br><span class="line">UDP中可以描述下面两类行为：</span><br><span class="line">（1）组合电路</span><br><span class="line">（2）时序电路（沿触发和电平触发）</span><br><span class="line"></span><br><span class="line">组合逻辑的UDP</span><br><span class="line">表规定了不同的输入组合和相对应的输出值。没有指定的任意组合输出为x。 多路选择器为例说明</span><br><span class="line">primitive mux_2by1(y,a,b,select);</span><br><span class="line">output y;</span><br><span class="line">input a,b,select;</span><br><span class="line"></span><br><span class="line">table</span><br><span class="line">//注:下一行仅作为注释</span><br><span class="line">//a		b		select		:	y</span><br><span class="line">  0		?			1		:	0;</span><br><span class="line">  1		?			1		:	1;</span><br><span class="line">  ?		0			0		:	0;</span><br><span class="line">  ?		1			0		:	1;</span><br><span class="line">  0		0			x		:	0;</span><br><span class="line">endtable</span><br><span class="line">endprimitive</span><br><span class="line"></span><br><span class="line">字符？代表不必关心相应变量的具体值，可以是0、1、x。 输入端口的次序必须与表中各项的次序匹配，既表中的第一列对应于原语端口队列的第一个输入（例子中为a），第二列是b,第三列是select。在该多路选择器的表中没有一项的输入组合为01x(还缺少其他一些组合项)；这种情况，输出的缺省植为x(对其他未定义的输入组合项也是如此)。</span><br><span class="line"></span><br><span class="line">module mux_4by1(y,a,b,c,d,select);</span><br><span class="line">input a,b,c,d;</span><br><span class="line">input [2:1] select;</span><br><span class="line">output y;</span><br><span class="line">parameter tRISE = 2, tFALL = 3;</span><br><span class="line"></span><br><span class="line">mux_2by1 #(tRISE,tFALL)	//实例名是可选的，此处引用多路选择器时，没有指定实例名</span><br><span class="line">(temp1,a,b,select[1]),</span><br><span class="line">(temp2,c,d,select[1]),</span><br><span class="line">(y,temp1,temp2,select[1])</span><br><span class="line">endmodule</span><br><span class="line">在UDP实例中，总共可以指定2个延迟，这是由于UDP的输出可以取值0、1、x(无截止延迟)</span><br><span class="line"></span><br><span class="line">时序逻辑UDP</span><br><span class="line">时序逻辑UDP中，使用1位寄存器描述内部状态。该寄存器的值是时序电路UDP的输出值</span><br><span class="line">共有两种不同类型的时序UDP；一种时序UDP是电平敏感行为的模型；另一种是跳变沿触发行为模型。</span><br><span class="line">时序电路UDP使用寄存器当前值和输入值决定寄存器的下一状态（何后继的输出）</span><br><span class="line"></span><br><span class="line">状态变量的初始化</span><br><span class="line">使用一条过程性复制语句对时序逻辑UDP的状态进行初始化</span><br><span class="line">initial reg_name = 0,1,or x;</span><br><span class="line">初始化语句在UDP定义中出现</span><br><span class="line"></span><br><span class="line">电平触发的时序逻辑UDP</span><br><span class="line">下面是D锁存器建模的电平触发的时序逻辑的UDP举例，只要时钟为低电平0，数据就从输入传递到输出；否则输出值被锁存。</span><br><span class="line">primitive latch(q,clk,d);</span><br><span class="line">output q;</span><br><span class="line">input clk,d;</span><br><span class="line">reg q;		//-&gt; output reg q;</span><br><span class="line"></span><br><span class="line">table</span><br><span class="line">	//	clk			d		q(state)	q(next)</span><br><span class="line">		0			1		:?			:1;</span><br><span class="line">		0			1		:?			:0;</span><br><span class="line">		1			?		:?			:-;</span><br><span class="line">endtable</span><br><span class="line">endprimitive</span><br><span class="line">-字符表示值&quot;无变化&quot;。注意UDP的状态存储在变量q中</span><br><span class="line"></span><br><span class="line">沿触发的时序逻辑UDP</span><br><span class="line">用跳变沿触发的时序逻辑UDP为D型沿触发的触发器建模。一条初始化语句用于初始化该触发器的状态。</span><br><span class="line">primitive d_edge_flip_flop(q,clk,data);</span><br><span class="line">output q;</span><br><span class="line">input clk,data;</span><br><span class="line">reg q;</span><br><span class="line">initial q = 0;</span><br><span class="line">table</span><br><span class="line">//clk	data		q(state)		q(next)</span><br><span class="line">  (01)	 0	:			?	:			0;</span><br><span class="line">  (01)	 1	:			?	:			1;</span><br><span class="line">  (0x)	 1	:			1	:			1;</span><br><span class="line">  (0x)	 0	:			0	:			0;</span><br><span class="line">//忽略时钟负边沿；</span><br><span class="line">  (?0)	 ?	:			?	:			-;</span><br><span class="line">//忽略在稳定时钟上的数据变化</span><br><span class="line">   ?	 (??):			?	:			-;</span><br><span class="line"></span><br><span class="line">endtable</span><br><span class="line">endprimitive</span><br><span class="line">表项（01）表示0转换到1,表项（0x）表示从0转换到x,表项（?0）表示从任意值（0、1、x）转换到0，表项（??）表示任意切换，对任意未定义的转换，输出缺省为x。</span><br><span class="line">假定上面的UDP定义了d_edge_flip_flop,现在就能够在模块中像基元门那样，实例引用该原语（基元）</span><br><span class="line">module register4(clk,data_in,data_out);</span><br><span class="line">input clk;</span><br><span class="line">input [0:3]data_in;</span><br><span class="line">output [0:3]data_out;</span><br><span class="line">d_edge_flip_flop</span><br><span class="line">	u0_d_edge_flip_flop(data_out[0],clk,data_in[0]),</span><br><span class="line">	u1_d_edge_flip_flop(data_out[1],clk,data_in[1]),</span><br><span class="line">	u2_d_edge_flip_flop(data_out[2],clk,data_in[2]),</span><br><span class="line">	u3_d_edge_flip_flop(data_out[3],clk,data_in[3]);</span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line">沿触发的和电平敏感的混合行为</span><br><span class="line">在同一个表中能够混合电平触发和沿触发项。这种情况下，边沿变化在电平触发之前处理，既电平触发项覆盖边沿触发项。</span><br><span class="line">primitive d_async_ff(q,clk,clear,data);</span><br><span class="line">output q;</span><br><span class="line">input clk,clear,data;</span><br><span class="line">reg q;</span><br><span class="line">table</span><br><span class="line">//clk	clear	data	q(state)	q(next)</span><br><span class="line">  (01)	 0		 0		: ?			:	0;</span><br><span class="line">  (01)	 0		 1		: ?			:	1;</span><br><span class="line">  (0x)	 0		 1		: 1			:	1;</span><br><span class="line">  (0x)	 0		 0		: 0			:	0;</span><br><span class="line">//忽略时钟负边沿：</span><br><span class="line">  (?0)	 0		 ?		: ?			:	-;</span><br><span class="line">  (??)	 1		 ?		: ?			:	0;</span><br><span class="line">   ?	 1		 ?		: ?			:	0;</span><br><span class="line">endtable</span><br><span class="line">endprimitive</span><br><span class="line"></span><br><span class="line">表项的总结</span><br><span class="line">所有可以用于UDP原语表项中的值</span><br><span class="line">-----------------</span><br><span class="line">符号	|	意义</span><br><span class="line">0		|	逻辑0</span><br><span class="line">1		|	逻辑1</span><br><span class="line">x		|	未知值</span><br><span class="line">?		|	0、1、x中的任一个</span><br><span class="line">b		|	0或1中任选一个</span><br><span class="line">-		|	不变</span><br><span class="line">(AB)	|	值由A变到B</span><br><span class="line">*		|	与(??)相同 任意值变换到任一值</span><br><span class="line">r		|	上跳变沿，与(01)相同</span><br><span class="line">f		|	下跳变沿，与(10)相同</span><br><span class="line">p		|	(01)、(0x)和(x1)的任一种</span><br><span class="line">n		|	(10)、(1x)和(x0)的任一种</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">negedge 下降沿  posedge 上升沿</span><br></pre></td></tr></table></figure>
<h1 id="3-第三章内容"><a href="#3-第三章内容" class="headerlink" title="3.第三章内容"></a>3.第三章内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据流模型</span><br><span class="line">连续赋值语句常用来建立数据流的行为模型；过程性赋值语句用来为时序电路建立行为模型。组合逻辑电路行为模型的最好方法时使用连续赋值语句</span><br><span class="line"></span><br><span class="line">连续赋值语句</span><br><span class="line">连续赋值语句可以用来对线网进行赋值（不能用来对寄存器进行赋值），它的格式如下（简单格式）</span><br><span class="line">assign LHS_target = RHS_expression;</span><br><span class="line">举例</span><br><span class="line">//线网声明：</span><br><span class="line">wire [3:0]frm_rdy,coh_rdy,hrd_tag;</span><br><span class="line"></span><br><span class="line">//连续赋值语句</span><br><span class="line">assign hrd_tag = coh_rdy &amp; frm_rdy;</span><br><span class="line"></span><br><span class="line">连续赋值语句 被赋值目标是hrd_tag；coh_rdy &amp; frm_rdy，特别注意，连续赋值语句种一定由关键字assign</span><br><span class="line">连续赋值语句在什么时候执行,只要右侧表达式中的操作数有事件发生（既操作数值改变）时，就会计算右侧表达式；若新的结果值与原来的值不同，则把新的结果值赋给左侧的被赋值目标</span><br><span class="line"></span><br><span class="line">若coh_rdy 或 frm_rdy 发生了变化，就会计算右侧的表达式。若右侧表达式的值发生了变化，则把新计算出的值赋给线网 hrd_tag</span><br><span class="line">连续赋值的目标可以是类型: 标量线网、向量线网、矩阵中的一个元素（该矩阵可以是标量线网类型的，也可以是向量线网类型的）、向量线网的某一位、向量线网的部分位、上述各种类型的拼接体。</span><br><span class="line"></span><br><span class="line">标量线网 如：wire a,b;</span><br><span class="line">向量线网 如：wire [3:0] a,b;</span><br><span class="line"></span><br><span class="line">下面，被赋值的目标是一个标量线网和一个向量线网的拼接体</span><br><span class="line">wire carry_out,carry_in;</span><br><span class="line">wire [3:0] sum,a,b;</span><br><span class="line"></span><br><span class="line">assign &#123;carry_out,sum&#125; = a + b + carry_in;</span><br><span class="line">a和b的位宽是4位，所以加法运算能够产生最大为5位的结果。因此左侧表达式的宽度指定为5位(carry_out 1位，sum 4位),最终这个赋值语句将右侧表达式最右边(低)4位的值赋给sum,第五位（进位）的值赋值给carry_out。</span><br><span class="line"></span><br><span class="line">例子说明如何在一条连续赋值语句中进行多次赋值</span><br><span class="line">assign 	mux_out = (select == 0)?Input_a:&#x27;bz,	//&#x27;bz 表示32位位宽</span><br><span class="line">		mux_out = (select == 1)?Input_b:&#x27;bz,</span><br><span class="line">		mux_out = (select == 2)?Input_c:&#x27;bz,</span><br><span class="line">		mux_out = (select == 3)?Input_d:&#x27;bz;</span><br><span class="line"></span><br><span class="line">上面赋值语句是下面4条独立连续赋值语句的简化书写格式。</span><br><span class="line">assign	mux_out = (select == 0)?Input_a:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 1)?Input_b:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 2)?Input_c:&#x27;bz;</span><br><span class="line">assign	mux_out = (select == 3)?Input_d:&#x27;bz;</span><br><span class="line"></span><br><span class="line">例子：</span><br><span class="line">wire dtag;</span><br><span class="line">parameter SIZE = 7;</span><br><span class="line">wire [SIZE:0]padded_dtag;</span><br><span class="line"></span><br><span class="line">assign padded_dtag = &#123;SIZE&#123;1&#x27;b0&#125;,dtag&#125;;</span><br><span class="line"></span><br><span class="line">若没有对连续赋值的目标类型进行声明，则将把它默认为标量线网。</span><br><span class="line">assign mc_noburst = dma_lock;	//没有对mc_noburst经行声明，mc_noburst被默认为1位的线网。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">线网声明赋值</span><br><span class="line">连续赋值可以作为线网声明的一部分，这样赋值称为线网声明赋值。</span><br><span class="line">wire [3:0]qmv_wr = 4&#x27;b0;</span><br><span class="line">wire frm_wait = &#x27;b1;</span><br><span class="line"></span><br><span class="line">wire ictr_gt_qctr = ictr &gt; qctr,</span><br><span class="line">	qctr_gt_ictr = qctr &gt; ictr;</span><br><span class="line"></span><br><span class="line">wire [(8*12-1):0]dbg_dump_rpt = &quot;dbg_dump_rpt&quot;;</span><br><span class="line">线网声明赋值不但声明了线网，还对声明的线网进行连续赋值。</span><br><span class="line">线网声明赋值是 :声明线网，然后编写连续赋值语句的一种简便形式。</span><br><span class="line">wire wr_cycle;				等价于线网声明赋值语句		wire wr_cycle = &#x27;b1;</span><br><span class="line">assign wr_cycle = &#x27;b1;     	==========================&gt;</span><br><span class="line"></span><br><span class="line">不允许对同一线网进行多个线网声明赋值。若必须进行多个赋值，则必须使用连续赋值语句。</span><br><span class="line"></span><br><span class="line">赋值延迟()</span><br><span class="line">assign #6 dbg_data = int_data|| peg_cntxt;</span><br><span class="line">#6:上述赋值语句中指定的延时，指从右侧表达式中任一操作数的变化，到右侧表达式重新计算，再把计算结果赋给左侧的目标总共需要6个时间单位的延迟，若在时刻5，int_data值发生变化，则在时刻5重新计算赋值语句的右侧表达式，并在时刻11（=5+6）把计算出的新值赋给dbg_data</span><br><span class="line">以最后一次右边变化计算出的结果延时后，赋值给左边</span><br><span class="line"></span><br><span class="line">在右侧得值传递给左侧之前，右侧得值发生了变化，会怎么样？最后一次值得变化将起决定作用，</span><br><span class="line">assign #4 peg_free = xbid_par;</span><br><span class="line">延时期间右侧表达式发生得变化会被滤除</span><br><span class="line">（需要看书，才能理解此处）</span><br><span class="line">在把右式得变化传播到左式之前，右式必须至少能够在该延迟期间保持右式值不变；</span><br><span class="line">在延迟期满，若右式得值发生了变化，则前面得值就不能传播到输出。</span><br><span class="line"></span><br><span class="line">在每个延迟得声明中，总共有3个延迟值可以被指定</span><br><span class="line">上升延迟值、下降延迟值、截止延迟值</span><br><span class="line">格式：</span><br><span class="line">assign #(rise,fall,turn-off) LHS_target = RHS_expression;</span><br><span class="line"></span><br><span class="line">三个延迟值为0时，如何在连续赋值语句中指定这些延迟</span><br><span class="line">//一个延迟参数</span><br><span class="line">assign #4 biu_par = fe_par ||wsp_par;	//上升延迟、下降延迟、截止延迟(既变化到Z的延迟)和变化到x的延时相同，都为4</span><br><span class="line"></span><br><span class="line">//两个延迟参数</span><br><span class="line">assign #(4,8)biu_par = rd_trg;	//上升延迟4、下降延迟8、截止延迟和x的延迟相同，为4和8的最小值，4</span><br><span class="line"></span><br><span class="line">//三个延迟参数</span><br><span class="line">assign #(4,8,6)fe_arb = &amp;fe_dbus;	//上升延迟4、下降延迟8、截止延迟6 变化到x的延迟为4</span><br><span class="line"></span><br><span class="line">//没有延迟参数</span><br><span class="line">assign fe_dbus = rd_address[7:4];	//所有延迟为0</span><br><span class="line"></span><br><span class="line">右侧表达式的值从非0向量变化到0向量，则使用下降延迟；</span><br><span class="line">右侧表达式的值变化到z,则使用截止延迟，其余的情况都使用上升延迟</span><br><span class="line"></span><br><span class="line">线网延迟</span><br><span class="line">延迟可以在线网声明中定义，</span><br><span class="line">wire #5 mem_write;</span><br><span class="line">该延迟指的是mem_write驱动源的值发生改变到线网mem_write本身的值发生改变的延迟。</span><br><span class="line"></span><br><span class="line">assign #2 mem_write = chunk_valid &amp; flop_valid;</span><br><span class="line">假设flop_valid 变化导致重新计算右侧表达式，结果和以前不同，则在2个时间单位后，重新赋值个mem_write;</span><br><span class="line">但是mem_write的线网延迟，对线网mem_write的赋值发生在7个时间单位后，</span><br><span class="line"></span><br><span class="line">首先赋值延迟起作用，然后加上线网延迟产生的作用；</span><br><span class="line"></span><br><span class="line">线网声明赋值中， 指定了延迟，这个延迟不是线网延迟，是赋值延迟，</span><br><span class="line">nc_data进行的线网声明赋值， 2个时间单位指的是赋值延时，不是线网延迟（线网延迟，声明线网时不能有赋值）</span><br><span class="line">wire [3:0] #2 nc_data = si_data-mem_wdata;</span><br><span class="line"></span><br><span class="line">主/从触发器</span><br><span class="line">module msdff_dataflow(</span><br><span class="line">	input wire d, clk,</span><br><span class="line">	output wire q,q_bar</span><br><span class="line">);</span><br><span class="line">	wire not_clk, not_d,not_y,y,d1,d2,y_bar,y1,y2;</span><br><span class="line">	assign not_d =~d;</span><br><span class="line">	assign not_clk =~clk;</span><br><span class="line">	assign not_y = ~y;</span><br><span class="line"></span><br><span class="line">	assign d1 =~(d &amp; clk);</span><br><span class="line">	assign d2 = ~(clk &amp; not_d);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">endmodule</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">行为级建模</span><br><span class="line">过程性结构</span><br><span class="line">两种语句是对设计进行行为级建模的主要结构 initial 、always</span><br><span class="line">模块中可以包含任意个 initial always 语句 ，这些语句相互之间是并行执行，</span><br><span class="line">一条initial always 语句的执行会产生一个单独的控制流、所有的initial always 都是再0时刻开始并行的执行。</span><br><span class="line"></span><br><span class="line">initial 语句只执行一次，在仿真开始时（0时刻）执行</span><br><span class="line"></span><br><span class="line">parameter SIZE = 1024;</span><br><span class="line">reg [7:0] vld_ram[0:SIZE-1];</span><br><span class="line">reg speed_reg;</span><br><span class="line"></span><br><span class="line">initial</span><br><span class="line">	begin:	seq_blk_a</span><br><span class="line">		integer		index;</span><br><span class="line"></span><br><span class="line">		speed_reg = 0;</span><br><span class="line"></span><br><span class="line">		for(index = 0;index &lt; SIZE; index = index + 1&#x27;b1)</span><br><span class="line">			vld_ram[index] = 0;</span><br><span class="line"></span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">begin ... end 划定顺序块的界限，顺序块中的语句是顺序执行的</span><br><span class="line">seq_blk_a 顺序块的标签，若过程中没有出现局部声明语句，不需要标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">always语句</span><br><span class="line">always语句是反复执行的， 与initial语句类似地方都是从0时刻开始执行</span><br><span class="line"></span><br><span class="line">事件列表写成： @(a or b) @(a,b) @(*)</span><br><span class="line"></span><br><span class="line">时序控制</span><br><span class="line">延迟控制、事件控制</span><br><span class="line"></span><br><span class="line">延迟控制</span><br><span class="line">#2 tx_addr = rx_addr - 5;	//等待延迟，执行过程语句前等待2个单位延迟</span><br><span class="line"></span><br><span class="line">延迟控制的延迟可以是任意表达式，不必限制为一个常量，</span><br><span class="line"></span><br><span class="line">延迟表达式的值为0，则称为显式零延迟。</span><br><span class="line">#0;</span><br><span class="line">显示零延迟触发一个等待，等待所有其他在当前仿真时刻要被执行的事件执行完毕后，才将其恢复，仿真事件不会前进</span><br><span class="line"></span><br><span class="line">若延迟表达式的值为 x、z,等效与零延迟。</span><br><span class="line">若延迟表达式计算结果为负值，则将其二进制补码值作为延迟</span><br><span class="line"></span><br><span class="line">若延迟值包含空格字符、表达式，需要用括把延迟值括起来</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">事件控制</span><br><span class="line">事件控制中，语句的执行是基于事件的：跳变沿敏感事件控制、电平敏感事件控制</span><br><span class="line">跳变沿敏感事件控制 @(negedge rst_n) @(posedge clk)</span><br><span class="line">电平敏感事件控制 @cell_byte</span><br><span class="line">@cell_byte per_frame= cell_byte; //当cell_byte上有事件发生时，才会执行赋值操作</span><br><span class="line"></span><br><span class="line">负跳变			正跳变</span><br><span class="line">1 -&gt; x			0 -&gt; x</span><br><span class="line">1 -&gt; z			0 -&gt; z</span><br><span class="line">1 -&gt; 0			0 -&gt; 1</span><br><span class="line">x -&gt; 0			x -&gt; 1</span><br><span class="line">z -&gt; 0			z -&gt; 1</span><br><span class="line"></span><br><span class="line">通过一种方式可以隐含地把相应的过程性语句中所有的变量和线网都包含在敏感事件例表中。</span><br><span class="line">@*表明相应的过程性语句对于其内部的任何值的变化都会敏感</span><br><span class="line"></span><br><span class="line">always @ *</span><br><span class="line">	procedural_statement</span><br><span class="line"></span><br><span class="line">@* 把过程性语句内部所有的变量都看作是敏感事件列表的一部分</span><br><span class="line">always @* cpu_reg = master_rag + control_reg;</span><br><span class="line">//隐含地把 master_rag 、control_reg 包含在敏感事件列表中。实际上是下面always语句简写格式</span><br><span class="line">always</span><br><span class="line">	@(master_rag,control_reg)</span><br><span class="line">		cpu_reg = master_rag + control_reg;</span><br><span class="line"></span><br><span class="line">@* 代表在相应块中的任何语句中使用了的变量和线网，还包括在赋值语句中的等号左边的表达式中的序号变量</span><br><span class="line">always @* w[k] = ram&amp;chip;</span><br><span class="line"></span><br><span class="line">等价于</span><br><span class="line">@(ram,chip,k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">电平敏感事件控制</span><br><span class="line">电平敏感事件控制中，知道条件变为正后，过程性语句才执行</span><br><span class="line">wait(condition)  //等到 condition 为真的时候，才执行下面的语句</span><br><span class="line">	procedural_statement</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语句块（begin  end）</span><br><span class="line">1.顺序语句块( begin   end) :语句块中的语句按照给定顺序执行</span><br><span class="line">2.并行语句块( fork  join)  : 语句并行执行</span><br><span class="line">语句块的表示符是可选的。</span><br><span class="line">	若有标识符，可以在语句块内部声明局部变量，还可以被应用</span><br><span class="line"></span><br><span class="line">顺序语句块</span><br><span class="line">	语句按顺序执行;定界符是begin end</span><br><span class="line">顺序块语法：</span><br><span class="line">	begin</span><br><span class="line">		[:block_id&#123;declarations&#125;]//&#123;块id[声明]&#125; 标识符</span><br><span class="line">		procedural_statement(s)		//过程型语句 执行部分</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	begin 	//还可以这么写顺序块</span><br><span class="line">		mem_r = sms|mem;</span><br><span class="line"></span><br><span class="line">		@(negedge clk_sms)</span><br><span class="line">			update = mem_rd;</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">	begin: lbl_seq_blok	//lbl_seq_blok 标识符</span><br><span class="line">		reg[1:0] dmac;</span><br><span class="line">		dmac = 2&#x27;d1;</span><br><span class="line">	end</span><br><span class="line">	顺序块标记 lbl_seq_blok ;</span><br><span class="line"></span><br><span class="line">并行语句块</span><br><span class="line">	定界符是fork join ；并行语句块中的语句是并行执行的</span><br><span class="line">	在并行语句块内的每条语句中指定的延迟值都是相对于语句块开始执行的时刻的；</span><br><span class="line">	并行语句块中的最后一个行为（并不一定是最后一条语句）执行完成时，再继续执行这个并行块后面其他语句。</span><br><span class="line">	在执行跳出语句块前必须执行完并行语句块内的所有语句。</span><br><span class="line"></span><br><span class="line">	就是将并行语句块中所有的语句并行执行完成后，在执行并行块后面的语句</span><br><span class="line">	fork</span><br><span class="line">	[:block_id&#123;declarations&#125;]	//&#123;块id[声明]&#125; 标识符</span><br><span class="line">	procedural_statement(s)</span><br><span class="line">	join</span><br><span class="line"></span><br><span class="line">	顺序语句块和并行语句块可以混合使用，下面是两者不同之处</span><br><span class="line"></span><br><span class="line">	always</span><br><span class="line">		begin :blk_seq_a</span><br><span class="line">			#4 pm_write = 5;				//S1</span><br><span class="line"></span><br><span class="line">			fork:blk_par_a					//S2</span><br><span class="line">				#6 pm_select = 7;			//P1</span><br><span class="line"></span><br><span class="line">				begin :blk_seq_b			//P2</span><br><span class="line">					wdog_rst = pm_enable;	//S6</span><br><span class="line">					#5 wdog_intr = wdog_rst;//S7</span><br><span class="line">				end</span><br><span class="line"></span><br><span class="line">				#2 frc_sel = 3;				//P3</span><br><span class="line">				#4 pm_itcr = 2;				//P4</span><br><span class="line">				#8 itop = 4;				//P5</span><br><span class="line">			join</span><br><span class="line"></span><br><span class="line">			#8 pm_sel = 3;					//S3</span><br><span class="line">			#4 pcell_id = 52;				//S4</span><br><span class="line">			#6 $stop;						//S5</span><br><span class="line">		end</span><br><span class="line">	blk_seq_a 顺序语句块，并且块内所有语句（S1、S2、S3、S4、S5）都是按照顺序执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">过程性赋值</span><br><span class="line">	过程性赋值是在initial 、 always语句内进行的赋值 ，只能对变量类型赋值，</span><br><span class="line"></span><br><span class="line">语句内部延迟</span><br><span class="line">	语句内部延迟之前计算的右式，然后进入延迟等待，最后把重新计算的值赋给左式的目标</span><br><span class="line"></span><br><span class="line">	重复事件控制的时序控制 格式：</span><br><span class="line">	repeat(expression) @(event_expression)</span><br><span class="line">	这种控制格式是利用一个或多个事件发生次数来指定延迟</span><br><span class="line">	hresult = repeat(2) @(negedge tclk) hw_data + hr_data;</span><br><span class="line">	既hw_data + hr_data的值，然后等待时钟tclk上出现2个负跳变沿，再把右边值赋给hresult。</span><br><span class="line">	等价：</span><br><span class="line">	begin</span><br><span class="line">		temp = hw_data + hr_data;</span><br><span class="line">		@(negedge tclk);</span><br><span class="line">		@(negedge tclk);</span><br><span class="line">		hresult = temp;</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">阻塞性过程赋值</span><br><span class="line">	赋值操作符是 = 的过程性赋值称为阻塞性过程赋值</span><br><span class="line">	a = 52;</span><br><span class="line">	阻塞性过程赋值语句，当前语句必须执行完成才能执行下一条赋值语句。</span><br><span class="line"></span><br><span class="line">非阻塞性过程赋值</span><br><span class="line">	非阻塞性过程赋值语句中，使用赋值符号 &lt;=</span><br><span class="line"></span><br><span class="line">	特殊例子</span><br><span class="line">	initial</span><br><span class="line">	begin</span><br><span class="line">		wdog_intr &lt;= 0;</span><br><span class="line">		wdog_intr &lt;= 1;</span><br><span class="line">	end</span><br><span class="line">	在initial语句执行后，wdog_intr的值为1；</span><br><span class="line">	verilog HDL标准规定了对同一个reg变量的非阻塞性赋值，按照赋值语句执行的顺序来执行；</span><br><span class="line">	wdog_intr先被赋值为0,然后被赋值为1</span><br><span class="line"></span><br><span class="line">	一个在always语句里读取一个变量（key_a）的值，又在另一条always语句里面对同一个变量进行赋值，并且两条always语句由同一个时钟沿来控制， 怎么才能确定读操作发生在写操作之前，</span><br><span class="line">	答案是：用非阻塞赋值可以确保读操作发生在写操作之前。</span><br><span class="line"></span><br><span class="line">	always @(negedge clock)</span><br><span class="line">		reg_a &lt;= data;			//在此处reg_a 被赋值</span><br><span class="line"></span><br><span class="line">	always @(negedge clock)</span><br><span class="line">		reg_b &lt;= reg_a;</span><br><span class="line"></span><br><span class="line">	何时使用哪种过程性赋值语句？（建议）</span><br><span class="line">		对always语句块外用到的变量进行赋值时，使用非阻塞性赋值(&lt;=)</span><br><span class="line">		计算中间结果的时候，用阻塞性赋值(=)</span><br><span class="line"></span><br><span class="line">		always @(posedge clk_piol) begin</span><br><span class="line">			bdir_data = ^spi_rdata;				//用阻塞性赋值计算中间结果</span><br><span class="line">			spi_wdata &lt;= bdir_data + rst_cnt;	//用非阻塞赋值对语句块外变量赋值</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">		always @(spi_wdata) begin</span><br><span class="line">			spi_pariy &lt;= ^ spi_wdata;</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">连续赋值(assign)与过程赋值的比较</span><br><span class="line"></span><br><span class="line">		过程赋值与连续赋值件的不同之处</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line">		过程赋值							|			连续赋值</span><br><span class="line">	出现在initial、always语句中				|	出现在模块(module)中</span><br><span class="line">											|</span><br><span class="line">	过程赋值语句的执行与其周围的其他语句	|	与其他语句并行执行；在右侧操作数的值</span><br><span class="line">	是有关系的								|	发生变化时执行</span><br><span class="line">											|</span><br><span class="line">	驱动变量								|	驱动线网</span><br><span class="line">											|</span><br><span class="line">	使用 = 、&lt;=	 赋值符号					|	使用 = 赋值符号</span><br><span class="line">											|</span><br><span class="line">	无assign关键词							|	使用assign关键词</span><br><span class="line">------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">条件语句</span><br><span class="line">	if(condition_l) begin</span><br><span class="line">		procedural_statement_1</span><br><span class="line">	end</span><br><span class="line">	else if (condition_2) begin</span><br><span class="line">		procedural_statement_2</span><br><span class="line">	end</span><br><span class="line">	else begin</span><br><span class="line">		procedural_statement_3</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">case 语句</span><br><span class="line">	条件表达式和各分支项表达式都不必是常量表达式， 在case语句中，x、z值作为字符值进行比较。</span><br><span class="line"></span><br><span class="line">	case语句的条件表达式和分支表达式的长度不同会出现什么情况呢？</span><br><span class="line">		进行任何比较前，把case语句中所有的表达式的位宽都统一</span><br><span class="line">		为这些表达式中最长的一个的位宽。</span><br><span class="line"></span><br><span class="line">	case语句中的无关位</span><br><span class="line">		case语句的两种其他形式：casez、casex,这些形式对x、z值使用了不同的解释。语法与case语句相同，关键字不同</span><br><span class="line"></span><br><span class="line">		casez语句，在casez条件表达式和任意分支项表达式中的值为z的位都会被认为是无关位，既那个位被忽略（不进行比较）</span><br><span class="line">		casex语句，值为x或z的位都会被认为是无关位。</span><br><span class="line"></span><br><span class="line">		casez语句示例：</span><br><span class="line">		casez(intr_mask)</span><br><span class="line">			4&#x27;b1???:rtc_wdata[4] = 0;</span><br><span class="line">			4&#x27;b01??:rtc_wdata[3] = 0;</span><br><span class="line">			4&#x27;b001?:rtc_wdata[2] = 0;</span><br><span class="line">			4&#x27;b0001:rtc_wdata[1] = 0;</span><br><span class="line">		endcase</span><br><span class="line"></span><br><span class="line">	字符？可以用来代替字符Z,来表示无关位。</span><br><span class="line">	casez语句:若intr_mask的第1位是1(忽略intr_mask的其他位)，则rtc_wdata[4] = 0;</span><br><span class="line">	casez语句:若intr_mask的第1位是0，第2位是1(忽略intr_mask的其他位)，则rtc_wdata[3] = 0;</span><br><span class="line">	依次类推</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">循环语句</span><br><span class="line">	有4类循环语句 forever 、repeat、while、for循环</span><br><span class="line"></span><br><span class="line">	forever 循环语句</span><br><span class="line">		循环语句格式：</span><br><span class="line"></span><br><span class="line">		forever</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		此循环语句连续执行过程性语句。因此为了跳出这样的循环，可以在过程性语句内使用中止语句。同时，在过程语句中必须使用某些方式的时序控制,否则forever循环将在0延迟后永远循环下去。</span><br><span class="line">			forever循环语句的示例：</span><br><span class="line">				initial begin</span><br><span class="line">					clk1hz = 0;</span><br><span class="line">					#5 forever</span><br><span class="line">					#10 clk1hz = ~clk1hz;</span><br><span class="line">				end</span><br><span class="line">			上面代码生成一个时钟波形， clk1hz首先被初始化为0，并一直保持为0到第5个单位时刻。此后每隔10个时间单位，clk1hz反向一次。</span><br><span class="line"></span><br><span class="line">	repeat 循环语句 指定循环次数</span><br><span class="line">		语法格式</span><br><span class="line">			repeat (loop_count)	//循环次数</span><br><span class="line">				procedural_statement</span><br><span class="line"></span><br><span class="line">		按照指定的循环次数来执行过程性语句，循环计数表达式的值为 x、z,则循环的次数按照0处理</span><br><span class="line">		repeat(count)</span><br><span class="line">			sum = sum + 10;</span><br><span class="line"></span><br><span class="line">		循环语句与重复事件控制的不同</span><br><span class="line"></span><br><span class="line">		repeat(loop_count)			//循环语句</span><br><span class="line">			@(posedge clk_rtc) accum = accum + 1;</span><br><span class="line">		等待clk_rtc上出现正跳变沿,然后对accum进行加1，循环执行loop_count 次</span><br><span class="line"></span><br><span class="line">		accum = repeat(loop_count) @(posedge clk_rtc) accum + 1;	//重复事件控制</span><br><span class="line">		首先计算 accum + 1，随后等待在clk_rtc上出现 loop_count 次正跳变，最后赋值。</span><br><span class="line"></span><br><span class="line">		repeat(NUM_OF_TIMES) @(negedge zclk); //等待zclk上出现NUM_OF_TIMES下降沿，然后执行紧随在 repeat 语句之后的语句。</span><br><span class="line"></span><br><span class="line">	while 循环语句</span><br><span class="line">		格式：</span><br><span class="line">		while(condition)		// condition 状态状况</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		while 和C语言相似，若条件表达式位x、z。它也同样按照0(假)来处理。</span><br><span class="line">		while(shift_by &gt; 0) begin</span><br><span class="line">			acc = acc &lt;&lt; 1;</span><br><span class="line">			shift_by = shift_by - 1;</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">	for 循环语句</span><br><span class="line">		for(initial_assignment;condition;step_assignment)	//初始值 条件 步骤</span><br><span class="line">			procedural_statement</span><br><span class="line"></span><br><span class="line">		for循环语句会重复执行过程性语句若干次。 与C语言相似</span><br><span class="line"></span><br><span class="line">		integer k;</span><br><span class="line"></span><br><span class="line">		for(k = 0; k &lt; MAX_RANGE ; k = k +1) begin</span><br><span class="line">			if(hold_data[k] == 0) begin</span><br><span class="line">				hold_data[k] = 1;</span><br><span class="line">			end</span><br><span class="line">			else if(hold_data[k] == 1) begin</span><br><span class="line">				hold_data[k] = 0;</span><br><span class="line">			end</span><br><span class="line">			else	begin</span><br><span class="line">				$display(&quot;hold_data[k] is an x or a z&quot;)</span><br><span class="line">			end</span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">	过程性连续赋值</span><br><span class="line">		过程性连续赋值语句是一种能够在 always initial 语句块中出现的语句。</span><br><span class="line">		这种赋值方式可以改写（Override）所有其他语句对线网或者变量赋值。</span><br><span class="line">		它允许赋值语句中的表达式被连续地驱动进入到变量或线网当中去。</span><br><span class="line">		过程连续赋值语句与连续赋值语句是有区别的，连续赋值语句只能出现在initial always 语句之外</span><br><span class="line">			过程性连续赋值语句有两种类型(推测成对出现)</span><br><span class="line">			(1) assign deassign 过程性值语句:对变量进行赋值</span><br><span class="line">			(2) force release 过程性语句：虽然也可以用于对变量赋值，但主要用于对线网赋值。</span><br><span class="line">			assign force语句在某种意义上是 ”连续的“： 就是当assign force 语句生效时，右式中的操作数的任何变化都会引起赋值语句的重新执行。</span><br><span class="line">			过程性连续赋值的目标不能是变量的部分选择或位选择</span><br><span class="line"></span><br><span class="line">	assign deassign 语句</span><br><span class="line">		assign	过程性语句 可以改写所有的 过程性赋值语句 对变量进行的赋值。</span><br><span class="line">		deassign 过程性语句 用来结束对变量的连续赋值。</span><br><span class="line">		变量中的值一直保留到它被重新赋值为止。</span><br><span class="line"></span><br><span class="line">		module d_flip_flop(d,clear,clock,q);</span><br><span class="line">			input d,clear,clock;</span><br><span class="line">			output reg q;</span><br><span class="line"></span><br><span class="line">			always @(clear)</span><br><span class="line">				if(!clear)</span><br><span class="line">					assign q = 0;	//d对q无效</span><br><span class="line">				else</span><br><span class="line">					deassign q;</span><br><span class="line"></span><br><span class="line">			always @(negedge clock) q &lt;= d;</span><br><span class="line"></span><br><span class="line">		endmodule</span><br><span class="line"></span><br><span class="line">		若clear 变为0, assign过程性语句使q清零，而不考虑任何时钟沿时的情况，既clock中 d对q没有影响。</span><br><span class="line">		若clear变为1 ，deassign 语句被执行；这就使得连续性赋值被取消，以后clock就能够对q产生影响。</span><br><span class="line">		若assign语句应用于一个已经用assign进行赋值的变量，则先取消原来assign语句的赋值，然后再进行新的过程性连续赋值。3</span><br><span class="line"></span><br><span class="line">		reg[3:0]load_ctr;</span><br><span class="line">		...</span><br><span class="line">		load_ctr = 0;</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr = nibble^rtc_count;</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr = 2;	//先取消前面对load_ctr的assign 赋值，然后进行新的过程性连续赋值</span><br><span class="line"></span><br><span class="line">		...</span><br><span class="line">		deassign load_ctr;	//load_ctr 一直保持值为2</span><br><span class="line">		...</span><br><span class="line">		assign load_ctr[2] = 1;/* 错误 ：reg变量的位选择不能够作为过程性连续赋值的目标*/</span><br><span class="line"></span><br><span class="line">		第2个assign 语句在进行下一次赋值前先使得前面的第一个assign语句无效。 在deassign语句执行后，load_ctr 的值将一直保持为2 ，直到出现另一个对该变量的过程性连续赋值。</span><br><span class="line"></span><br><span class="line">		assign 语句在某种意义上是 ”连续性“的；既在第1个assign 语句执行后到第2个 assign语句开始执行前， nibble 、rtc_count 上的任何变化将使得第1个assign 语句被重新计算。</span><br><span class="line"></span><br><span class="line">	force release 语句</span><br><span class="line">		force release 过程性语句与 assign deassign 语句非常相识，不同之处是force release 过程语句不仅能够应用于线网，还能够应用于变量。</span><br><span class="line"></span><br><span class="line">		当force语句应用于变量时，变量的当前值被force 语句中表达式的值覆盖；当release 语句应用于变量时，变量中的当前值保持不变，除非对它进行过程性连续赋值(在force语句被执行时)，这种情况下，连续赋值为变量确立一个新值。</span><br><span class="line"></span><br><span class="line">		当用force过程性语句对线网进行赋值时，该赋值语句将忽略线网所有的其他驱动源，直到对该线网执行release 语句。</span><br><span class="line"></span><br><span class="line">		wire test_reset;</span><br><span class="line">		...</span><br><span class="line">		or #1(test_reset,penable,rtc_intr);</span><br><span class="line"></span><br><span class="line">		initial begin</span><br><span class="line">			force test_reset = penable&amp;rtc_intr;</span><br><span class="line">			#5;</span><br><span class="line">			release test_reset;</span><br><span class="line"></span><br><span class="line">		end</span><br><span class="line"></span><br><span class="line">		force 语句的执行得 test_reset值(由penable &amp; rtc_intr求得) ，改写来自于或门基元（原语）的值，直到执行release 语句，才恢复由或门原语输出驱动 test_reset重新生效。</span><br><span class="line">		当force 语句有效的时候（前5个时间单位内），在penable 和rtc_intr上的任何变化都会使能赋值语句被重新执行。</span><br><span class="line"></span><br><span class="line">		例：</span><br><span class="line">		reg[2:0]pr_data;</span><br><span class="line">		...</span><br><span class="line">		pr_data = 2;</span><br><span class="line">		force pr_data = 1;</span><br><span class="line">		...</span><br><span class="line">		release pr_data;	//pr_data 保持值1</span><br><span class="line">		...</span><br><span class="line">		assign pr_data = 5;</span><br><span class="line">		...</span><br><span class="line">		force pr_data = 3;	//当用force过程性语句对线网进行赋值时，该赋值语句将忽略线网所有的其他驱动源</span><br><span class="line">		...</span><br><span class="line">		release pr_data ;	//pr_data 的值变为 5</span><br><span class="line">		...</span><br><span class="line">		force pr_data[1:0] = 3;	/* 错误：reg变量的部分选择不能被设置为过程性连续赋值的目标*/</span><br><span class="line">		</span><br><span class="line">		对pr_data的第1次release 使得pr_data的值保持为1。因为在force语句生效时刻没有别的过程性连续赋值语句对该变量进行赋值。</span><br><span class="line">		在执行后一个release语句后，由于对pr_data的过程性连续赋值语句又开始生效，pr_data被重新赋值为5。</span><br><span class="line">		</span><br><span class="line">		握手协议示例</span><br><span class="line">		always 语句可以用于描述交互进程的行为，如交互式有限状态机的行为。同一个模块内的语句可以通过所有always 语句都可见的变量来进行相互通信。不建议使用在 always 内部声明 reg 变量在always 语句之间传递信息。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>Verilog HDL入门(1)</title>
    <url>/2022/12/12/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/FPGA/Verilog%20HDL%E5%85%A5%E9%97%A8(1)/</url>
    <content><![CDATA[<blockquote>
<p>Verilog 基础语言1 </p>
</blockquote>
<span id="more"></span>

<h1 id="1-第一章内容"><a href="#1-第一章内容" class="headerlink" title="1.第一章内容"></a>1.第一章内容</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">编译器指令:</span><br><span class="line"></span><br><span class="line">`define ,`undef  </span><br><span class="line">指令与C类似，可以在多个文件中使用，但是</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">`ifdef ,`ifndef,`else,`elseif,`endif</span><br><span class="line"></span><br><span class="line">`default_nettype</span><br><span class="line">该指令用于为隐式线网指定线网类型，就是为那些没有被声明类型的线网定义类型</span><br><span class="line">`default_nettype wand</span><br><span class="line"></span><br><span class="line">`include </span><br><span class="line">类似于C语言，在代码红肿包含任何其他文件的内容。包含的文件，可以使用相对路径和绝对路径</span><br><span class="line">`include &quot;../../primitives.v&quot;  </span><br><span class="line">编译时，这一行由文件 &quot;../../primitives.v&quot;的内容替换 </span><br><span class="line"></span><br><span class="line">`resetall</span><br><span class="line">将所有的编译指令重新设置为缺省值</span><br><span class="line"></span><br><span class="line">`timescale  </span><br><span class="line">这个是用在测试文件中的，该值是设置时间单位和时间精度</span><br><span class="line">`timescale  1ns/100ps  这里时间延时是1ns  精度是100ps</span><br><span class="line">测试文件使用方法 #100  即延时100纳秒</span><br><span class="line"></span><br><span class="line">`unconnected_drive , `nounconnected_drive</span><br><span class="line"></span><br><span class="line">`unconnected_drive pull1</span><br><span class="line">/* 位于这两个编译器指令之间的所有未连接的输入端口 设置上拉（既连接到1）关键字（pull1） */</span><br><span class="line">`nounconnected_drive</span><br><span class="line"></span><br><span class="line">`unconnected_drive pull0</span><br><span class="line">/* 位于这两个编译器指令之间的所有未连接的输入端口 设置下拉（既连接到0）关键字（pull0） */</span><br><span class="line">`nounconnected_drive</span><br><span class="line"></span><br><span class="line">`celldefine,`endcelldefine	(未使用过)</span><br><span class="line">编译器指令用于把模块标记为单元（Cell）模块。它们一般包含模块的定义</span><br><span class="line"></span><br><span class="line">`line</span><br><span class="line"></span><br><span class="line">整型数</span><br><span class="line">两种格式：简单十进制  基数格式</span><br><span class="line">基数格式 	指定位数 指定进制 数值</span><br><span class="line">例: 5&#x27;D25	</span><br><span class="line"></span><br><span class="line">实数（浮点数） 会采用四舍五入的方法隐式的转换成整数</span><br><span class="line"></span><br><span class="line">字符串 字符串不能分多行书写，其他和C语言相同</span><br><span class="line">&quot;INTER REACHED-&gt;HERE&quot;</span><br><span class="line">存储字符串</span><br><span class="line">reg [1:8*4] message = &quot;abcd&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据类型 ： 线网类型 变量类型</span><br><span class="line">线网类型 实际的物理连线 线网类型没有被驱动，那么就处于高阻态</span><br><span class="line">变量类型 与C语言类似</span><br><span class="line"></span><br><span class="line">线网数据类型</span><br><span class="line">wire		trior		trireg</span><br><span class="line">tri			wand		tri1</span><br><span class="line">wor			triand		tri0</span><br><span class="line">supply0		supply1</span><br><span class="line"></span><br><span class="line">注释：有tri的都是三态，既 0 1 x</span><br><span class="line">声明线网的简单语法</span><br><span class="line">net_kind [signed] [[msb:lsb]] net1, net2... netN;</span><br><span class="line"></span><br><span class="line">net_kind: 是一种线网数据类型</span><br><span class="line">signed：是一个关键字，声明具有符号值的线网 ；在声明线网类型时，缺省该值，线网时没有符号值的</span><br><span class="line">msb、lsb：是用于指定线网位宽，当没有指定时，位宽为1</span><br><span class="line"></span><br><span class="line">wire signed [7:0] pwdata;	线网类型 8根有符号 其数的形式为2的补码</span><br><span class="line">wire  [7:0] prdata;	线网类型 无符号 其数的形式为原码</span><br><span class="line"></span><br><span class="line">wire 和 tri （语法语义完全相同）</span><br><span class="line">用于连接电路原件；tri类型线网可用于描述多个信号源驱动的线网；</span><br><span class="line">若wire类型（或者tri类型）的线网由多个源驱动，则线网的有效值如下表</span><br><span class="line">--------------------------------------------------</span><br><span class="line">|	wire (tri)	|	0	|	1	|	x	|	z	|</span><br><span class="line">|		0		|	0	|	x	|	x	|	0	|</span><br><span class="line">|       1       |	x   |	1   |	x   |	1   |</span><br><span class="line">|       x       |	x   |	x   |	x   |	x   |</span><br><span class="line">|       z       |	0   |	z   |	x   |	z   |</span><br><span class="line">--------------------------------------------------</span><br><span class="line">例如：</span><br><span class="line">wire [2:0] mode_endable,clk_enable,clk_mode;	假设 clk_enable 的值 01x; clk_mode的值 11z</span><br><span class="line">assign mode_endable = clk_enable &amp; clk_mode;	=&gt; 01x</span><br><span class="line">assign mode_endable = clk_enable | clk_mode;	=&gt; 11x</span><br><span class="line">则 mode_endable 的有效值时 x1x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wor和trior线网 与或逻辑相似</span><br><span class="line">线或，线或（wor）和三态线或（trior）在语法和功能上一致</span><br><span class="line">若多个驱动源驱动该线网，则线网的有效值由下表决定</span><br><span class="line">--------------------------------------------------</span><br><span class="line">|	wor (trior)	|	0	|	1	|	x	|	z	|</span><br><span class="line">|		0		|	0	|	1	|	x	|	0	|</span><br><span class="line">|       1       |	1   |	1   |	1   |	1   |</span><br><span class="line">|       x       |	x   |	1   |	x   |	x   |</span><br><span class="line">|       z       |	0   |	1   |	x   |	z   |</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">wand和triand线网 与与逻辑相似</span><br><span class="line">线与（wand）和三态线与（triand） 在语法和功能上一致</span><br><span class="line">若多个驱动源驱动该线网，则线网的有效值由下表决定</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|	wand (triand)	|	0	|	1	|	x	|	z	|</span><br><span class="line">|		0			|	0	|	0	|	0	|	0	|</span><br><span class="line">|       1       	|	0   |	1   |	x   |	1   |</span><br><span class="line">|       x       	|	0   |	x   |	x   |	x   |</span><br><span class="line">|       z       	|	0   |	1   |	x   |	z   |</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"></span><br><span class="line">trireg 线网		&#123;建模只能用于测试平台&#125;</span><br><span class="line">该类线网类型能储存数值（类似于变量）（可用于电容节点的建模（没理解））</span><br><span class="line">当三态变量的驱动源都属于z时，三态变量类型的线网保存该线网上的最后一个值；三态变量线网的缺省初始化为x(未知)</span><br><span class="line"></span><br><span class="line">tri0和tri1线网</span><br><span class="line">可以用于线逻辑线网的建模，可以多个源驱动线网，tri0(tri1)特征无驱动则其值为0(1)</span><br><span class="line">若多个驱动源驱动该线网，tri0或tri1类型线网的有效值</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">|	tri0 (tri1)		|	0	|	1	|	x	|	z	|</span><br><span class="line">|		0			|	0	|	x	|	x	|	0	|</span><br><span class="line">|       1       	|	x   |	1   |	x   |	1   |</span><br><span class="line">|       x       	|	x   |	x   |	x   |	x   |</span><br><span class="line">|       z       	|	0   |	1   |	x   |	0(1)|</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"></span><br><span class="line">supply0和supply1线网</span><br><span class="line">supply0线网用于对地建模，低电平；supply1线网用于对电源线网建模，高电平</span><br><span class="line"></span><br><span class="line">未声明的线网</span><br><span class="line"></span><br><span class="line">向量线网和标量线网</span><br><span class="line">定义向量线网时可选用关键词 scalared(标量) 或 vectored(向量)</span><br><span class="line">vectored定义线网，不允许选择该向量的某位或部分位赋值，必须整体赋值；若没有指定关键字，则缺省值是 scalared</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">变量类型</span><br><span class="line">reg		integer		time</span><br><span class="line">real	realtime</span><br><span class="line"></span><br><span class="line">reg变量</span><br><span class="line">reg [signed][msb:lsb] reg1;</span><br><span class="line">msb:lsb 指定了范围，且均是常数表达值，范围是可选的；若没有定义范围，则缺省值是1位的reg变量</span><br><span class="line">reg变量的值通常被解释无符号数；除非用关键字signed,则是有符号和C语言类似</span><br><span class="line">未初始化的reg变量的缺省值为x</span><br><span class="line"></span><br><span class="line">存储器(memories)</span><br><span class="line">由reg变量组成的数组，如下形式声明</span><br><span class="line">reg [msb:lsb] memory1[upper1:lower1];</span><br><span class="line">举例</span><br><span class="line">reg[0:3]ebi_mem[0:63];	/* ebi_mem 由64个4位reg变量组成的数组 */</span><br><span class="line"></span><br><span class="line">将一个存储器内容复制到另一个存储器,可用循环语句每次复制一条</span><br><span class="line">举例：</span><br><span class="line">parameter WORD_LENTH = 8, NUM_WORDS = 64;</span><br><span class="line">reg [WORD_LENTH-1:0]</span><br><span class="line">	mem_a[NUM_WORDS-1:0],</span><br><span class="line">	mem_b[NUM_WORDS-1:0];</span><br><span class="line">	integer i;</span><br><span class="line">	for(i = 0 ;i &lt; NUM_WORDS; i = i + 1) begin</span><br><span class="line">		mem_a[i] = mem_b[i];</span><br><span class="line">	end</span><br><span class="line"></span><br><span class="line">整数型（integer）变量	&#123;建模使用，只能用在测试文件中&#125;</span><br><span class="line">可以作普通变量使用 一个整形数至少32位，可以存储有符号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">时间变量（time） </span><br><span class="line">用于存储时间和处理时间值；</span><br><span class="line">time time_idn[msb:lsb];</span><br><span class="line">若定义位宽，为指定位宽，未定义位宽，则每个标识存储至少64位。</span><br><span class="line">时间变量只能存储无符号值。</span><br><span class="line">[msb:lsb]是指数组</span><br><span class="line"></span><br><span class="line">实型（real）和实型时间（realtime）变量</span><br><span class="line">这两个定义变量完全相同</span><br><span class="line">real swing_margin;</span><br><span class="line">realtime curr_time_in_real;</span><br><span class="line">实型（real）变量缺省值0，声明中不允许对位宽或字界做任何指定。</span><br><span class="line">若将x、z赋予实型变量，则这些值将被当作0处理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数组</span><br><span class="line"></span><br><span class="line">reg与tri的不同点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">参数（parameter）</span><br><span class="line">是常量，通常用于指定延时和变量的位宽，用参数声明语句，只能对参数赋一次值，</span><br><span class="line">参数值可以在编译时被改变，参数值的改变可以使用 defparam(既重新定义参数)语句实现；</span><br><span class="line">参数声明可以选择指定一种类型，有(integer real realtime time),不允许参数指定范围和使用 signed关键字</span><br><span class="line"></span><br><span class="line">parameter 与 define 不同之处 （作用范围不同）</span><br><span class="line">参数是局部的，只在其定义的模块内部起作用；</span><br><span class="line">而宏定义对同时编译的多个文件起作用，既使在某一模块内指定的宏定义，在编译过程中仍旧对多个文件起作用，直到遇到重新定义为止。</span><br><span class="line">建议：`define严格用于全局变量和全局文本替换；而将参数用于某个模块内部所需要的常数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">局部参数（localparam） （模块内部参数）</span><br><span class="line">在模块例化（引用）时不能通过 参数传递或重新定义参数值（defparam）语句对局部参数进行修改；不同于parameter；</span><br><span class="line">局部参数与普通参数声明语句完全相同。</span><br><span class="line">若局部参数是用其他非局部参数定义的，则外部赋值使得参数值发生变化时，局部参数值间接地发生改变，例：</span><br><span class="line"></span><br><span class="line">parameter BYTE = 8;	//(非局部参数)</span><br><span class="line">localparam NIBBLE = 2 * BYTE;//局部参数</span><br><span class="line"></span><br><span class="line">在编译期间，参数BYTE发生改变，则局部参数NIBBLE也将随之发生改变</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表达式</span><br><span class="line"></span><br><span class="line">操作数可以是以下类型</span><br><span class="line">常数				参数</span><br><span class="line">线网				变量</span><br><span class="line">位选（Bit-select）	部分位选（Part-select）</span><br><span class="line">存储器和数组元素	函数调用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常数</span><br><span class="line">12			有符号数</span><br><span class="line">5&#x27;b01100	无符号数</span><br><span class="line"></span><br><span class="line">-44和-6&#x27;o54 存储形式相同，但是处理方式不同，例如：</span><br><span class="line">reg1 = -44/4 	=&gt; -11			//作为有符号数处理</span><br><span class="line">reg2 = -6&#x27;o54/4 =&gt; 1073741813	//作为无符号数处理 即当作32位数据处理</span><br><span class="line"></span><br><span class="line">线网</span><br><span class="line">标量现网（1位） 向量线网（多位）</span><br><span class="line">assign gpio_prot = -3; //gpio_prot被赋予向量 1011 ，即十进制数13</span><br><span class="line">assign gpio_prot = 4&#x27;hA;//gpio_prot被赋予向量 1010 ，即十进制数A</span><br><span class="line"></span><br><span class="line">变量 （标量变量 向量变量）</span><br><span class="line">整型变量的值被解释为有符号二进制数；</span><br><span class="line">若reg声明语句中有signed,则变量中的值被解释为有符号数；否则无符号数</span><br><span class="line"></span><br><span class="line">位选（Bit-select）（单个位就是位选，多个位就是部分位选）</span><br><span class="line">从一个向量中抽取特定的位，语法</span><br><span class="line">net_or_reg_vextor[bit_select_expr]</span><br><span class="line">表达式中如何进行位选</span><br><span class="line">mis_state[1] &amp;&amp; mis_state[4]		//变量的位选</span><br><span class="line">gpio_prot[0] | intr					//线网位选</span><br><span class="line">LIMIT[5]							//参数位选</span><br><span class="line"></span><br><span class="line">部分位选（Part-select）</span><br><span class="line">在向量中选取相邻的若干位，部分位选语法格式：</span><br><span class="line">net_or_reg_vextor[msb_const_expr:lsb_const_expr]</span><br><span class="line">msb_const_expr:lsb_const_expr：范围必须是常数表达式</span><br><span class="line"></span><br><span class="line">用索引的部分位选的格式</span><br><span class="line">net_or_reg_vextor[base_expr+:const_width_expr]</span><br><span class="line">net_or_reg_vextor[base_expr+:const_width_expr]</span><br><span class="line"></span><br><span class="line">base_expr不必是常数， 但宽度必须是常熟</span><br><span class="line">位选的范围是由基表达式加上或减去宽度（const_width_expr）所表示的位的个数。</span><br><span class="line">+：表示部分位选以基表达式作为起点增加若干位。</span><br><span class="line">-：表示部分位选以基表达式作为起点减小若干位</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">reg [0:15]mark;</span><br><span class="line">reg [0:15]inst_code;</span><br><span class="line">wire [0:31]gpio_data;</span><br><span class="line"></span><br><span class="line">inst_code[mark+,2]		//选择mark、mark+1位</span><br><span class="line">gpio_data[mark-:4]		//选择mark、mark-1、mark-2、mark-3位</span><br><span class="line">若索引越界或计算时遇到x或z,则值为x</span><br><span class="line"></span><br><span class="line">存储器和数组元素</span><br><span class="line">格式：  memory[word_address]</span><br><span class="line">存储器和数组元素 部分位选 或 位选是允许的。</span><br><span class="line">hdlc_ram[20][2]		//第20个元素第2位的值 第2位就是位选</span><br><span class="line">hdlc_ram[20][2:4]	//第20个元素部分位选在[2:4]位范围内</span><br><span class="line">hdlc_ram[0:2]		//非法</span><br><span class="line">按照格式，在数组中，下标在前，位选 在后</span><br><span class="line"></span><br><span class="line">符号</span><br><span class="line">表达式中所有操作数都是有符号，则结果也是有符号，否则无符号数</span><br><span class="line">8&#x27;d2+8sb0101			//结果无符号，因为8&#x27;d2是一个无符号</span><br><span class="line">4&#x27;sb0110-4&#x27;sd1			//结果有符号，所有操作数都是有符号</span><br><span class="line"></span><br><span class="line">操作符 （Verilog HDL中操作符有9类）</span><br><span class="line">算术操作符			关系操作符</span><br><span class="line">相等操作符			逻辑操作符</span><br><span class="line">按位操作符			缩减操作符</span><br><span class="line">移位操作符			条件操作符</span><br><span class="line">拼接和复制操作</span><br><span class="line"></span><br><span class="line">------------|---------------|	|-------------------------------|</span><br><span class="line">操作符		|	名称     	| 	|	操作符		|	名称      	|</span><br><span class="line">+           |	一元加(正	| 	|	&lt;			|	小于      	|</span><br><span class="line">-           |	一元减(负	| 	|	&lt;=          |	小于等于  	|</span><br><span class="line">！          |	一元逻辑非	|  	|	&gt;           |	大于      	|</span><br><span class="line">~           |	一元按位取	|  	|	&gt;=          |	大于等于  	|</span><br><span class="line">&amp;           |	缩减与   	| 	|	==          |	逻辑相等  	|</span><br><span class="line">~&amp;          |	缩减与非 	| 	|	!=          |	逻辑不等  	|</span><br><span class="line">^           |	缩减异或 	| 	|	===         |	全等      	|</span><br><span class="line">^~或~^      |	缩减同或 	| 	|	!==         |	非全等    	|</span><br><span class="line">|			|	缩减或   	| 	|	&amp;           |	按位与    	|</span><br><span class="line">~|          |	缩减或非 	| 	|	^           |	按位异或  	|</span><br><span class="line">**          |	指数幂   	| 	|	^~　~^      |	按位同或  	|</span><br><span class="line">*           |	乘       	| 	|	｜          |	按位或    	|</span><br><span class="line">/           |	除       	| 	|	&amp;&amp;          |	逻辑与    	|</span><br><span class="line">%           |	求模     	| 	|	||          |	逻辑或    	|</span><br><span class="line">+           |	二元加   	| 	|	?:          |	条件判断  	|</span><br><span class="line">-           |	二元减   	| 	|	&#123;&#125;          |	拼接      	|</span><br><span class="line">&lt;&lt;&lt;         |	算术左移 	| 	|	&#123;&#123;&#125;&#125;        |	重复      	|</span><br><span class="line">&gt;&gt;&gt;         |	算术右移 	| 	|-------------------------------|</span><br><span class="line">&lt;&lt;          |	逻辑左移 	|</span><br><span class="line">&gt;&gt;          |	逻辑右移 	|</span><br><span class="line">------------|---------------|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">条件操作符是从右向左处理，其他都是从左至有处理</span><br><span class="line">a?b:c?d:f == &gt; a?b:(c?d:f) </span><br><span class="line"></span><br><span class="line">算术操作符(其余操作与C语言类似，除去幂运算)</span><br><span class="line">+(一元加和二元加)				-(一元减和二元减)</span><br><span class="line">*(乘)							/(除)</span><br><span class="line">％(取模)						**(幂运算)</span><br><span class="line"></span><br><span class="line">整数除法截断任何小数部分，例如：7/4的运算结果为1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**是求幂运算符：a**b表示a的b次方，即a表示底数，b表示指数；</span><br><span class="line">%是取模运算符：a % b 按照a 和 b中的长度长的补齐。</span><br><span class="line">除法只能取整数；</span><br><span class="line"></span><br><span class="line">算数操作符中任意操作数中只要有一位为x 或 z ,则整个结果为x 。例如：4’b10x1+5&#x27;b01111 结果为不确定数 5&#x27;bxxxxx</span><br><span class="line"></span><br><span class="line">算术运算结果的位宽</span><br><span class="line">算术运算结果的位宽由最大操作数的位宽决定。赋值语句下，算术运算结果的位宽也由赋值等号左边目标变量的位宽决定</span><br><span class="line">reg [0B:3] mask_intr,test_ctrl,raw_intr;	//位宽为四，0B的代表，二进制标识，0位</span><br><span class="line">reg [0:5] int_req;</span><br><span class="line"></span><br><span class="line">mask_intr = test_ctrl+raw_intr;	//结果位宽由 mask_intr test_ctrl raw_intr 位宽决定 ，加法操作的溢出部分被丢弃</span><br><span class="line">int_req = test_ctrl+raw_intr;	//结果位宽由 int_req test_ctrl raw_intr 位宽决定，位宽为6，任何一处的位将被存储在结果位int_req[5]中</span><br><span class="line"></span><br><span class="line">较大表达式中，运算中间结果的位宽确定的规则：表达中的所有中间结果应取最大操作数的位宽(在赋值时，此规则也包括赋值等号左端的目标变量)</span><br><span class="line">wire [4:1]intra_ena,test_reg;</span><br><span class="line">wire [1:5]next_iev;</span><br><span class="line">wire [1:6]peg_intr;</span><br><span class="line">wire [1:8]adt_sense;</span><br><span class="line"></span><br><span class="line">assign adt_sense = (intra_ena+next_iev)+(test_reg + peg_intr);</span><br><span class="line">//赋值等号右边表达式最大位宽6 ，包含左边时。最大变量位宽8.所以加法运算使用8位进行</span><br><span class="line"></span><br><span class="line">有符号和无符号数</span><br><span class="line">执行算术和赋值时，哪些操作当无符号操作，哪些操作当有符号操作非常重要</span><br><span class="line"></span><br><span class="line">无符号数值存储：线网中、reg(寄存器)变量中、用普通(没有有符号标记s)的基数格式表示的整型中</span><br><span class="line"></span><br><span class="line">有符号数值存储：用s(有符号)标记的基数格式表示的整型中、十进制形式的整数中、有符号的reg变量中、有符号线网中</span><br><span class="line"></span><br><span class="line">reg[0:5]burst_data;</span><br><span class="line">integer mtx_addr;</span><br><span class="line"></span><br><span class="line">burst_data = -4&#x27;d12;		//reg变量burst_data的十进制数为52 既向量 110100 	(有符号赋值到无符号)</span><br><span class="line">mtx_addr = -4&#x27;d12;			//整型数mtx_addr的十进制数为-12，二进制表示110100	(有符号赋值到有符号)</span><br><span class="line">-4&#x27;d12/4					//结果是1073741821  （-4&#x27;d12转换成32位数，以无符号显示 取最大的位宽进行运算）</span><br><span class="line">-12/4						//结果为 -3 都是有符号数据</span><br><span class="line"></span><br><span class="line">burst_data 是无符号寄存器，右边表达式值为 6’d110100(-12二进制补码)，因此赋值后，burst_data存储的是十进制52。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关系运算符 (&gt; &lt; &gt;= &lt;=) </span><br><span class="line">若操作数中有一位为x或z,则结果为x</span><br><span class="line">52&lt;16&#x27;hxFF //结果为x,</span><br><span class="line"></span><br><span class="line">操作数位宽不同，所有操作数都是无符号 ，则位宽较小的操作数高位补0对齐</span><br><span class="line">&#x27;b1000 &gt;= &#x27;b01100 ==》 &#x27;b01000 &gt;= &#x27;b01100 </span><br><span class="line">若两个操作数都是有符号数，则用符号位将位数较小的操作数的位数补齐</span><br><span class="line">4&#x27;sb1011 &lt;=8&#x27;sh1A ==&gt; 8&#x27;sb11111011 &lt;= 8&#x27;sb00011010 结果为真</span><br><span class="line">若表达式中一个操作数是无符号，则该表达式的其余操作数均被当作无符号数处理</span><br><span class="line">(8&#x27;sb9*4&#x27;d2) &lt; 4   ==&gt; 假（18 &lt; 4）</span><br><span class="line">(4&#x27;sd9*2)&lt;4  ==&gt;		真(-14&lt;4)</span><br><span class="line"></span><br><span class="line">相等操作符号（结果假为0 结果真为1）</span><br><span class="line">==（逻辑相等）				！=（逻辑不等）</span><br><span class="line">===（全等，case equality）	!===(非全等，)	</span><br><span class="line">全等比较中，把x和z当作数值（而不考虑其物理含义）严格地按字符值进行比较，结果不是1就是0	，不会出现其他地值。</span><br><span class="line">逻辑比较中,值x和z具有物理含义(物理含义：有大小区别)，结果可能出现不确定值（==）参与比较的两个操作数必须逐位相对，其结果才为1，如果某些值是不定态X或高阻态Z，那么得到的结果是不定值X；</span><br><span class="line">例：</span><br><span class="line">sw_data = &#x27;b11x0;	//没有指定位数，默认32位数据比较</span><br><span class="line">sw_addr = &#x27;b11x0;</span><br><span class="line">sw_data == sw_addr; //结果为x，按照规定，</span><br><span class="line">sw_data === sw_addr; //结果为1，按照规定，</span><br><span class="line"></span><br><span class="line">&#x27;b010x != &#x27;b11x0</span><br><span class="line">上式中的两个操作数中都有x,但比较结果为真，是因为第一位不同</span><br><span class="line">若操作数的位宽不相等，位宽较小的操作数在左侧以0补齐，例：</span><br><span class="line">2’b10 == 4&#x27;b0010 ==&gt; 4&#x27;b0010 == 4&#x27;b0010 ==&gt;结果为真</span><br><span class="line"></span><br><span class="line">若操作数位宽不同，两个操作数都是有符号数，较小的操作数用符号位扩位补齐，例</span><br><span class="line">`define WIDTH	8</span><br><span class="line">wire [WIDTH:0] mux_bus,byte_a,byte_b,byte_c,byte_d;</span><br><span class="line">wire [1:0] select;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg [4:0] a = 5&#x27;b11x01;</span><br><span class="line">reg [4:0] b = 5&#x27;b11x01;</span><br><span class="line">a == b 返回的结果是X; a===b 的返回结果为 1</span><br><span class="line">（!=）和（!==）的用法类似；</span><br><span class="line"></span><br><span class="line">归约运算符：归约与（&amp;）    归约与非（~&amp;）     归约或（|）     归约或非（~|）    归约异或（~^）</span><br><span class="line">注意：归约运算符的操作数只有一个，并只产生一位结果：举例a=0101，则&amp;a=0（a中的所有位进行与操作）； |a=1（a中的所有位进行或操作）；</span><br><span class="line"></span><br><span class="line">逻辑操作符	（逻辑与 或 非）</span><br><span class="line">&amp;&amp;		</span><br><span class="line">||</span><br><span class="line">！</span><br><span class="line">对逻辑值0或1进行操作，逻辑操作产生的结果为0或1</span><br><span class="line">mlock = &#x27;b0</span><br><span class="line">mport = &#x27;b1</span><br><span class="line">mlock &amp;&amp; mport ==&gt;结果为0（假）</span><br><span class="line">mlock || mport ==&gt;结果为1（真）</span><br><span class="line">!mport 		   ==&gt;结果为0（假）</span><br><span class="line"></span><br><span class="line">对向量操作数而言，非0向量被当作1处理</span><br><span class="line">rdy_bus = &#x27;b0110;</span><br><span class="line">intr_bus = &#x27;b0100;</span><br><span class="line"></span><br><span class="line">rdy_bus || intr_bus 的结果为1</span><br><span class="line">rdy_bus &amp;&amp; intr_bus 的结果为1</span><br><span class="line">并且!rdy_bus !intr_bus的结果相同，均为0</span><br><span class="line"></span><br><span class="line">操作数内某一位为x 或 z,若逻辑操作的结果是未定的，则运算的结果为x</span><br><span class="line">1&#x27;b1&amp; 1&#x27;bx		结果 x</span><br><span class="line">&#x27;b1 || &#x27;bx		结果1</span><br><span class="line">&#x27;b0 &amp;&amp; &#x27;bZ		结果0</span><br><span class="line">!x  			的结果x</span><br><span class="line"></span><br><span class="line">按位操作符 （5种）</span><br><span class="line">~		(一元非)</span><br><span class="line">&amp;		(二元与)</span><br><span class="line">|		(二元或)</span><br><span class="line">^		(二元异或)</span><br><span class="line">~^,^~	(二元同或)</span><br><span class="line">这些操作符对输入的操作数进行逐位操作，逐位操作就对应位进行操作，产生一个向量的结果</span><br><span class="line">	与 逐位操作结果				或 逐位操作结果</span><br><span class="line">-------------------			---------------------</span><br><span class="line">&amp; | 0 | 1 | x | z |         | | | 0 | 1 | x | z |</span><br><span class="line">0 | 0 | 0 | 0 | 0 |         | 0 | 0 | 1 | x | x |</span><br><span class="line">1 | 0 | 1 | x | x |         | 1 | 1 | 1 | 1 | 1 |</span><br><span class="line">x | 0 | x | x | x |         | x | x | 1 | x | x |</span><br><span class="line">z | 0 | x | x | x |         | z | x | 1 | x | x |</span><br><span class="line">-------------------         ---------------------</span><br><span class="line"></span><br><span class="line">异或 逐位操作结果			同或 逐位操作结果</span><br><span class="line">-------------------			---------------------</span><br><span class="line">^ | 0 | 1 | x | z |         | ^~| 0 | 1 | x | z |</span><br><span class="line">0 | 0 | 1 | x | x |         | 0 | 1 | 0 | x | x |</span><br><span class="line">1 | 1 | 0 | x | x |         | 1 | 0 | 1 | x | x |</span><br><span class="line">x | x | x | x | x |         | x | x | x | x | x |</span><br><span class="line">z | x | x | x | x |         | z | x | x | x | x |</span><br><span class="line">-------------------         ---------------------</span><br><span class="line"></span><br><span class="line">取反逐位操作结果</span><br><span class="line">------------------</span><br><span class="line">~| 0 | 1 | x | z |</span><br><span class="line"> | 1 | 0 | x | x |</span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line">按位运算中，两个操作数的位宽不等，且其中一个操作数是无符号操作数，则位宽较小的操作数高位补0对齐；（最终奥义就是不改变值的大小）</span><br><span class="line">若两个操作数为有符号数，则位宽小的操作数用符号位在高位进行补齐，然后再操作</span><br><span class="line">&#x27;b0110^&#x27;b10000 ==&gt; &#x27;b00110^&#x27;b10000 =&gt;&#x27;b10110</span><br><span class="line"></span><br><span class="line">4&#x27;sb1010 &amp; 8&#x27;sb 01100010 ==&gt; 8&#x27;b11111010 &amp; 8&#x27;b01100010 =&gt; 8&#x27;b01100010</span><br><span class="line"></span><br><span class="line">缩减操作符（对单个操作数进行操作）</span><br><span class="line">对单一操作数上的所有位进行操作，产生1位的操作结果，缩减操作符有6种。</span><br><span class="line">1）&amp;（缩减与）操作数只要有任意一位的值为0，则结果为0，操作数中只要有任意一位为x或z,则结果为x;否则操作结果为0；</span><br><span class="line"></span><br><span class="line">2）~&amp;（缩减与非） 缩减与操作结果取反</span><br><span class="line"></span><br><span class="line">3）|(缩减或)操作数中只要有任意一位的值为1，则该操作的结果便为1，操作数中只要有任意一位为x或z,则结果为x;否则操作结果为1；</span><br><span class="line"></span><br><span class="line">4）~|(缩减或非)缩减或操作结果取反</span><br><span class="line"> </span><br><span class="line">5）^(缩减异或) 操作数中只要有任意一位为x或z,则结果为x; 若操作数中有偶数个1，则结果为0 ，否则结果为1</span><br><span class="line"></span><br><span class="line">6）~^(缩减同或)缩减异或操作结果取反</span><br><span class="line"></span><br><span class="line">a= &#x27;b0110;</span><br><span class="line">b =&#x27;b0100;</span><br><span class="line"></span><br><span class="line">|b //结果1</span><br><span class="line">&amp;b //结果0</span><br><span class="line">~^a //结果1</span><br><span class="line"></span><br><span class="line">缩减异或操作符可以用来确定向量中是否存在值x得位</span><br><span class="line">addr_port = 4&#x27;b01x0;  //对addr_port异或结果为x</span><br><span class="line">对上述功能，可以使用如下的if语句进行检查；</span><br><span class="line">if(addr_port === 1&#x27;bx) begin</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">移位操作符</span><br><span class="line">&lt;&lt;	(逻辑左移)</span><br><span class="line">&gt;&gt;	(逻辑右移)</span><br><span class="line">&lt;&lt;&lt;	(算术左移)</span><br><span class="line">&gt;&gt;&gt;	(算术右移)</span><br><span class="line">移位操作符右侧操作数是一个无符号数，若右侧操作数值为x或z,则移位操作结果为x。</span><br><span class="line">逻辑移位，移动的位置总是填0；算术移位，左移空出位置填0，右移位，若操作数为无符号数，空出来位填0，若操作数为有符号数，则空出来的位总是填写符号位。</span><br><span class="line"></span><br><span class="line">reg[7:0] qreg = 8&#x27;h17;  //0001 0111</span><br><span class="line">reg signed [3:0] pmaster = 4&#x27;b1011;</span><br><span class="line"></span><br><span class="line">qreg &gt;&gt; 2 结果为 0000 0101</span><br><span class="line">qreg &lt;&lt; 2 结果01011100</span><br><span class="line">qreg &lt;&lt;&lt;4 结果 0111 0000</span><br><span class="line">qreg &lt;&lt;-2 //因为右操作数总是一个无符号数，因此向左移位了2**31-2 2的31次方数-2</span><br><span class="line"></span><br><span class="line">qreg &gt;&gt; 4 结果 0000 0001</span><br><span class="line">qreg &gt;&gt;&gt;2 结果 0000 0101</span><br><span class="line">pmaster &gt;&gt;&gt;2 结果 1110</span><br><span class="line"></span><br><span class="line">移位操作符可以用来完成指数（幂运算）；</span><br><span class="line">例如，若计算2的 num_bits 幂，</span><br><span class="line">32&#x27;b1&lt;&lt; num_bits	//num_bits必须小于32</span><br><span class="line">//指数（幂）操作符也可以用 2** num_bits</span><br><span class="line"></span><br><span class="line">也可以用移位操作符为2-4译码器建立verilog模型</span><br><span class="line">wire [3:0]decode_out = 4&#x27;b1 &lt;&lt; address[1:0];</span><br><span class="line">address分别可取值 0			1		2		3</span><br><span class="line">decode_out对应值  4&#x27;d0001	4&#x27;d0010	4&#x27;d0100	4&#x27;d1000</span><br><span class="line"></span><br><span class="line">算术右移是有符号的除2运算，分数部分被移位到下一个最低位的整型中。</span><br><span class="line">qreg&gt;&gt;&gt;2		//运算结果5（23/4）</span><br><span class="line">pmaster&gt;&gt;&gt;2		//结果是-2（-5/2）</span><br><span class="line"></span><br><span class="line">算术移位操作符场合，存在一种特殊情况，操作数是有符号，移位却是0，</span><br><span class="line">这是一个操作符有符号，一个无符号，按无符号数处理</span><br><span class="line">reg signed [3:0]xfer_port;</span><br><span class="line">3&#x27;d4+xfer_port&gt;&gt;&gt;1 //因为xfer_port当作无符号处理，所以移位空出位补0</span><br><span class="line"></span><br><span class="line">条件操作符</span><br><span class="line">cond_expr?expr1:expr2;</span><br><span class="line">和C语言类似，不同处若cond_expr为x或z,则操作结果按以下逻辑执行 expr1与expr2按位操作；0与0得到结果0，1与1得到结果1，其余情况下的结果为x；</span><br><span class="line">例：</span><br><span class="line">wire [2:0] student = (marks&gt;18)?grade_a:grade_c;</span><br><span class="line">计算(marks&gt;18) 为真则赋值grade_a ，若 marks &lt;= 18 则赋值grade_c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">拼接和复制操作符</span><br><span class="line">拼接（concatenation）是将小表达式中的位拼接起来形成一个由多个位组成的大表达式的操作,语法：</span><br><span class="line">&#123;expr1,expr2,...,exprn&#125;</span><br><span class="line">例：</span><br><span class="line">wire [7:0]dbus;</span><br><span class="line">wire [11:0]abus;</span><br><span class="line"></span><br><span class="line">assign dbus[7:4] = &#123;dbus[0],dbus[1],dbus[2],dbus[3]&#125;; //dbus的第四位值以颠倒的顺序，赋值给其高四位</span><br><span class="line">assign abus[7:0] = &#123;dbus[3:0],dbus[7:4]&#125;;//dbus的高4位与低4位交换后赋值给abus[7:0]</span><br><span class="line"></span><br><span class="line">未指定位宽的常数其位数是未知的，拼接不允许出现未指定位宽的常数。</span><br><span class="line">&#123;dbus,5&#125;	//不允许在拼接操作中出现5,这样未指定位宽的常数</span><br><span class="line">拼接是非法的。</span><br><span class="line"></span><br><span class="line">abus = &#123;3&#123;4&#x27;b1011&#125;&#125;;	//位向量12‘b101110111011 就是3个4位数拼接</span><br><span class="line">abus = &#123;&#123;4&#123;dbus[7]&#125;&#125;,dbus&#125;	/*符号扩展*/</span><br><span class="line"></span><br><span class="line">&#123;3&#123;1&#x27;b1&#125;&#125;	//结果为111</span><br><span class="line">&#123;3&#123;ack&#125;&#125;	//结果与&#123;ack,ack,ack&#125;等效</span><br><span class="line"></span><br><span class="line">重复操作也可以被参数化，</span><br><span class="line">parameter LENGTH = 8;</span><br><span class="line">&#123;LENGTH&#123;1&#x27;b0&#125;&#125;	//一个由8个0组成的字符串</span><br><span class="line"></span><br><span class="line">拼接操作计算2的幂指数、符号的扩展以及0的扩展</span><br><span class="line">parameter POWER_OF = 4, PAD_BY = 5;</span><br><span class="line">wire[7:0]cgr_reg;</span><br><span class="line"></span><br><span class="line">wire [31:0] power_of_two = &#123;1&#x27;b1,&#123;POWER_OF&#123;1&#x27;b0&#125;&#125;&#125;;				//二次幂</span><br><span class="line">wire [12:0] sign_extension = &#123;&#123;PAD_BY&#123;cgr_reg[7]&#125;&#125;,cgr_reg&#125;;	//标志扩展</span><br><span class="line">wire [11:0] zero_extension = &#123;&#123;4&#123;1&#x27;b0&#125;&#125;,cgr_reg&#125;;				//符号扩展</span><br><span class="line"></span><br><span class="line">表达式的类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">操作符对操作数进行逐位操作，</span><br><span class="line">()[https://www.runoob.com/w3cnote/verilog-expression.html]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">缩减操作符</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>晶振学习笔记</title>
    <url>/2022/12/07/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%99%B6%E6%8C%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>晶振包括：压控晶体振荡器(VCXO)、普通晶体振荡器(SPXO)、高性能温补晶振（TCXO)、恒温晶振（OCXO）</p>
</blockquote>
<span id="more"></span>

<h1 id="1-晶振的工艺"><a href="#1-晶振的工艺" class="headerlink" title="1. 晶振的工艺"></a>1. 晶振的工艺</h1><h1 id="2-晶振频率偏差-PPM-x2F-PPB"><a href="#2-晶振频率偏差-PPM-x2F-PPB" class="headerlink" title="2. 晶振频率偏差 PPM&#x2F;PPB"></a>2. 晶振频率偏差 PPM&#x2F;PPB</h1><p>晶振的PPM&#x2F;PPB是什么? PPM&#x2F;PPB是如何确定的呢?</p>
<p>晶振的PPM代表精度，PPB则是代表十亿分之几的振子，PPM&#x2F;PPB的频率偏移对标称频率的比值。他们常用的单位在制造行业描绘石英晶体振荡器的频率变化范围。</p>
<p>例子:<br>晶振标称频率&#x3D; 13.000000 MHz<br>晶振实际频率&#x3D; 12.999974 MHz<br>&#x3D; &gt;(A.F- N.F.)&#x2F; N.F. &#x3D;(12.999974 -13.000000)&#x2F; 12.999974<br>&#x3D; - 0.000002<br>&#x3D; - 2 x 10-6(百万分之)<br>&#x3D; - 2 PPM</p>
<p>标称频率&#x3D; 20.000000000 MHz<br>实际频率&#x3D; 20.00000002 MHz<br>&#x3D; &gt;(A.F- N.F.)&#x2F; N.F. &#x3D;(20.00000002-20.000000000)&#x2F; 20.00000002<br>&#x3D; + 0.000000001<br>&#x3D; + 1x 10-9(十亿分之几)<br>&#x3D; + 1PPB<br><a href="http://www.hwitek.com/3662.html">参考网站</a></p>
<h1 id="3-晶振"><a href="#3-晶振" class="headerlink" title="3.晶振"></a>3.晶振</h1>]]></content>
      <categories>
        <category>硬件开发</category>
        <category>晶振学习笔记1</category>
      </categories>
      <tags>
        <tag>晶振</tag>
      </tags>
  </entry>
  <entry>
    <title>MOS管学习笔记</title>
    <url>/2022/12/05/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/MOS%E7%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>MOS管学习笔记</p>
</blockquote>
<span id="more"></span>

<p>MOS 的基础知识这里就不多说。书上可以直接的学习到MOS的基础性质，在这里只简单地对MOS的一些应用做一下记录。大多都是看了网上大部分的博客积累下来。（以NMOS 为讨论对象）</p>
<ol>
<li><p>首先需要注意的是MOS 的内部 G D S 两两间均存在结间电容，所以我认为对于MOS 的导通截止， 是在对GS间的电容充电放电，所以为了让MOS 更快地导通截止，可以从这个结间电容来考虑，让其更快地充放电。下面以开关电源的MOS 管来做一下记录。<br><img data-src="https://s2.loli.net/2022/12/05/JPY1GMa3Wv6CZe5.jpg" alt="MOS1"></p>
</li>
<li><p>电源IC直接驱动是我们最常用的驱动方式，同时也是最简单的驱动方式，使用这种驱动方式，应该注意几个参数以及这些参数的影响。第一，查看一下电源IC手册，其最大驱动峰值电流，因为不同芯片，驱动能力很多时候是不一样的。第二，了解一下MOSFET的寄生电容，如图 1中C1、C2的值。如果C1、C2的值比较大，MOS管导通的需要的能量就比较大，如果电源IC没有比较大的驱动峰值电流，那么管子导通的速度就比较慢。如果驱动能力不足，上升沿可能出现高频振荡，即使把图 1中Rg减小，也不能解决问题! IC驱动能力、MOS寄生电容大小、MOS管开关速度等因素，都影响驱动电阻阻值的选择，所以Rg并不能无限减小。当然，当IC驱动能力不足时，可以采取图腾柱驱动电路来驱动MOS 。<br><img data-src="https://s2.loli.net/2022/12/05/pQ5VB94LZOjraWE.jpg" alt="MOS2"><br><img data-src="https://s2.loli.net/2022/12/05/gEy2SpOA5cLTJjs.jpg" alt="MOS3"></p>
</li>
<li><p>关断瞬间驱动电路能提供一个尽可能低阻抗的通路供MOSFET栅源极间电容电压快速泄放，保证开关管能快速关断。为使栅源极间电容电压的快速泄放，常在驱动电阻上并联一个电阻和一个二极管，如图 3所示，其中D1常用的是快恢复二极管。这使关断时间减小，同时减小关断时的损耗。Rg2是防止关断的时电流过大，把电源IC给烧掉。在第二点介绍的图腾柱电路也有加快关断作用。当电源IC的驱动能力足够时，对图 2中电路改进可以加速MOS管关断时间，得到如图 4所示电路。用三极管来泄放栅源极间电容电压是比较常见的。如果Q1的发射极没有电阻，当PNP三极管导通时，栅源极间电容短接，达到最短时间内把电荷放完，最大限度减小关断时的交叉损耗。与图 3拓扑相比较，还有一个好处，就是栅源极间电容上的电荷泄放时电流不经过电源IC，提高了可靠性<br><img data-src="https://s2.loli.net/2022/12/05/aEbWuzMIPURJ8q9.jpg" alt="MOS4"></p>
</li>
<li><p>为了满足高端MOS管的驱动，经常会采用变压器驱动，有时为了满足安全隔离也使用变压器驱动。其中R1目的是抑制PCB板上寄生的电感与C1形成LC振荡，C1的目的是隔开直流，通过交流，同时也能防止磁芯饱和。<br><img data-src="https://s2.loli.net/2022/12/05/yVKtp5JLfOie31d.png" alt="MOS5"></p>
</li>
<li><p>MOS 在电源的同步整流上也有不错的应用，只要还是因为其内阻小 可替代变压器副边二极管 降低电源损耗，也可以减小电源死区电压。主要应用在大电流电源上。</p>
</li>
<li><p>MOS的防反接作用及其锂电池充电</p>
<ol>
<li>PMOS 在电源输入端<br><img data-src="https://s2.loli.net/2022/12/05/o5p1b26WVAHkYsj.jpg" alt="MOS6"></li>
<li>NMOS 在地端<br><img data-src="https://s2.loli.net/2022/12/05/r3UtEb5JnhOfa6Z.jpg" alt="MOS7"></li>
<li>锂电池的充放电<br><img data-src="https://s2.loli.net/2022/12/05/r5CmRVHgT8OfIJa.png" alt="MOS8"></li>
</ol>
</li>
<li><p>MOS管子的选型。</p>
<ol>
<li>选用N沟道还是P沟道<br> 考虑MOS是高端驱动还是低端驱动，高端的话选用PMOS，低端采用NMOS.</li>
<li>确定额定电流<br> 确保MOS 可以通过电路最大额定电流，并且可计算MSO的导通损耗，此时需要注意MOS的导通内阻。</li>
<li>确定热要求<br> 散热工艺</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>硬件开发</category>
        <category>MOS管学习笔记1</category>
      </categories>
      <tags>
        <tag>MOS</tag>
      </tags>
  </entry>
  <entry>
    <title>verilog语言</title>
    <url>/2022/09/21/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/FPGA/verilog%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="f9922cfa22d2d9605c1cdc37ca5df5c166078dbb487ec6b5dca8ee63cf3a33e6">7d7c49590b25188c886bb639c7b672149292aa92bfc98d89f36d3bdd481a2dc536f0d58f7ab5279365200c8ab11b459ac31255c52d60a1deae79b37179312f212cb2ec677d6a2e13e466be63a0b75423a87211f937952498e2ee52300d8d9ed5cb62104edde712c7f85f21bfcd4b2ef0d5a677daffc1860ddc71f757de86f18beb1506e472fd45b03ad5595bb90193683c43ceb2013697ccba25da042f72fb52d210b345e94cd337608f65152363295bc9869cbe915463c0d1ba1ea724d6db035eac1b005cbae77e2bb9a9d9b913d247e493a51e92b1d0e5aa6db13c4685a4ac4ff171226bee0abdcdfb975d1df650ce49443c729e0c40a53882a01d0928c418604a4a28bc1cb1cdc37f3cf6ea3d1b0a0fb0064007a939b820bd006b190a9f15c3e49ade8121c0e334b1341839e05c1e229102ce08a118dd241ab66d374055a0128222318cb72d7e1981c6283f5bb8fdbe33add9b8c97cfacd555934197e8c8f8c4cb9e0a734772f867d63a85e9203f3382a0fa2af9567c24af6abb27666389779dbcc4da3b57fe5550bda5fa438d6b34a5e362c0f3f61b563602edf03328dd70ab723930aca3fa7e2516bc42498882291b684ca62395d9a9064f9f8295b38670bbf7a8d20f6f9625755b5294c34aa845c12f7853e89a68edfe5ca2791d2ba734da786d312114e0688014d2303c0727db4e9a1137d9e9c37e92e25aeb6d6e1852ba8ca298cdce283e7b78d0e93f3e68a0f4acb81a9e1cd9d9a8da866f74966f880f8dab2c889029eae7b88b51901b1ad</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>FPGA</category>
      </categories>
      <tags>
        <tag>FPGA</tag>
      </tags>
  </entry>
  <entry>
    <title>单片机普通IO口输出最高频率表</title>
    <url>/2022/09/11/%E5%8D%95%E7%89%87%E6%9C%BA%E6%99%AE%E9%80%9AIO%E5%8F%A3%E8%BE%93%E5%87%BA%E6%9C%80%E9%AB%98%E9%A2%91%E7%8E%87%E8%A1%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>示波器的使用</title>
    <url>/2022/09/10/%E4%BB%AA%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/%E7%A4%BA%E6%B3%A2%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>示波器的使用  DS1202</p>
<span id="more"></span>
<ol>
<li>关于示波器探头的使用</li>
</ol>
]]></content>
      <categories>
        <category>DS1202示波器</category>
      </categories>
      <tags>
        <tag>仪器的使用</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 USB开发配置</title>
    <url>/2022/08/13/STM32/STM32-USB%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac5052d84edffeea3bcbafa7d6f0777016d0e196be6ecf81c87d76ad4aebbf4b">ff5ff63191ee71b2c16b5a1a887a808ee3791a697e528d63e1db1baa13f419d3284b3d312e12f473a4419bf2da064e1bb5d0748556a3aa32a8a823a5a658b496e625a618beb012d77e4dc637191c86a3665124a7d3256108832b1e2cda7d61836d7af876e8e04701fe79d5108817ae2a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>USB</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>关于翻译pdf文档</title>
    <url>/2022/07/09/pdf%E8%AE%BE%E7%BD%AE/%E5%85%B3%E4%BA%8E%E7%BF%BB%E8%AF%91pdf%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<blockquote>
<p>翻译pdf文档</p>
</blockquote>
<span id="more"></span>

<p>url </p>
]]></content>
      <categories>
        <category>翻译pdf文档</category>
      </categories>
      <tags>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>IEEE官网下载文档</title>
    <url>/2022/07/01/%E4%B8%8B%E8%BD%BD%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/IEEE%E5%AE%98%E7%BD%91%E4%B8%8B%E8%BD%BD%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="9bc2fdca15d2b44a1333bb3944544cd5298d6a029ddeb528a6c80a1655257a06">afcdb3620860c3a0683a221e215fc71132669467eb4b18a94e282e8dc37ed5c4c4084ac6b5f21e9ef391bf7fa4a5dd07e4d298b1cad3ecb753cacd3c5b8246e3e527b93eeefda9da6d095c5b2caa274bff3f673c06ae9fc0e1c6251ef086b1d7b03bcfda2f80a6144a06e7806a43bcd2cb282c5c87bba2dea16bf1df003897c00ab0dbdddb351f943052763463003d6e1bf469f6f8d53a0acb9c90b40c305af867fad21d63ba6ad06502a875cb0f06d5583a57c1205dbe0e00b970dc4150f27c49ff0f12db00d4ae32f364122d9f14f17fdc219497106207ae21e3904afd04e2aebb540f1cbcbef9f51aab66001bcba70a8509d5aa1455324580dd1eec469ac0f10f123bf38d89af6a3c45d9f256bb618bb2493c1143142449e04a19af7642e97eccdaa008f9e2356c189619619141036ce5f2e44e0b1a1975299a2062cf15aa0f9dd1a69cb1a7d60c360927a9d110a43ea50981d1f1eac2924065daf81b02f48dbf9cd3163111bb54491cf524b455f8ace5f3c1b40ae2ae84c15b1efd3ef333e6c97e45279f04adb71e33e84e236691a1424e96e64777db38140c8eb610b477b4324b26a0b49c824312f3d1805fae99b7c1ce1e6fbe8f09e681aea67197cf1f46c897a9373efda9debfb58d0481b67fd6e3399c568a7c1eb145c46b46635e3f08be71c499729de33f89ce28fd7931dcdf81fd472bd438d19fa9ee08b58089434cd07fce24f777ac1094114b8e925f5fea8fc811a8007b31d9218dbb84b05882980f59e33872624e0fe21f17eff7c5919aa9ba7cfc375b0f01c0d07372eae5d0f2d534a19ece2cd5d5c816ef58cd74a0f1b2a9b1a8fb9debbe24c2531f178be7668b338961c9bbe706c6735233487b7e5a368ff3e3f60b584bdb2be126179423d4a55237636793625031fdd5303d5744ddde0034f72e8ec0f4299c3e3e3e3859fb99038ba2ef92095c3d7615b156ccb7f54e7d7a7cbddf5ace64a4c9c6466297507e92a4e11bc05938a89948bd2f6cfc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>IEEE</category>
      </categories>
      <tags>
        <tag>IEEE</tag>
      </tags>
  </entry>
  <entry>
    <title>JTAG协议文档</title>
    <url>/2022/06/16/%E7%83%A7%E5%BD%95%E5%99%A8/JTAG%E5%8D%8F%E8%AE%AE%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Cortex-m中MPU</title>
    <url>/2022/06/14/ARM%E5%86%85%E6%A0%B8/Cortex-m%E4%B8%ADMPU/</url>
    <content><![CDATA[<blockquote>
<p>MPU寄存器函数与设置</p>
</blockquote>
<span id="more"></span>
<h1 id="1-内存保护单元（MPU）"><a href="#1-内存保护单元（MPU）" class="headerlink" title="1. 内存保护单元（MPU）"></a>1. 内存保护单元（MPU）</h1><p>本节介绍在某些 STM32 微控制器中实现的内存保护单元 (MPU)。 请参阅相应的器件数据手册，查看您使用的 STM32 类型中是否存在 MPU。<br>MPU将内存映射划分为若干个区域，并定义了每个区域的位置、大小、访问权限和内存属性。 它支持：<br>• 每个区域的独立属性设置<br>• 重叠区域<br>• 将内存属性导出到系统。<br>内存属性影响对区域的内存访问行为。 Cortex-M4 MPU 定义：<br>• 8 个独立的内存区域，0-7<br>• 背景区域。<br>当内存区域重叠时，内存访问会受到编号最大的区域属性的影响。例如，区域 7 的属性优先于与区域 7 重叠的任何区域的属性。<br>背景区域具有与默认内存映射相同的内存访问属性，但只能从特权软件访问。<br>Cortex-M4 MPU 内存映射是统一的。这意味着指令访问和数据访问具有相同的区域设置。<br>如果程序访问 MPU 禁止的内存位置，则处理器会产生内存管理故障。这会导致故障异常，并可能导致操作系统环境中的进程终止。<br>在 OS 环境中，内核可以根据要执行的进程动态更新 MPU 区域设置。通常，嵌入式操作系统使用 MPU 作为内存保护。<br>MPU 区域的配置基于内存类型，请参阅第 28 页的第 2.2.1 节：内存区域、类型和属性。<br>表 38 显示了可能的 MPU 区域属性。</p>
<h2 id="1-1-MPU访问权限属性"><a href="#1-1-MPU访问权限属性" class="headerlink" title="1.1 MPU访问权限属性"></a>1.1 MPU访问权限属性</h2><p>本节介绍主控板访问权限属性。 MPU_RASR 寄存器的访问许可位 TEX、C、B、S、AP 和 XN 控制对相应内存区域的访问。 如果在没有所需权限的情况下访问内存区域，则 MPU 会生成权限错误。<br>表 39 显示了 TEX、C、B 和 S 访问权限位的编码。</p>
]]></content>
      <categories>
        <category>ARM</category>
        <category>Cortex-M</category>
      </categories>
      <tags>
        <tag>ARM内核</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32数据手册下载地址</title>
    <url>/2022/06/13/STM32/stm32%E6%95%B0%E6%8D%AE%E6%89%8B%E5%86%8C%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<blockquote>
<p>stm32数据手册下载地址、杂记</p>
</blockquote>
<span id="more"></span>
<p><a href="https://www.st.com/en/embedded-software/stm32-standard-peripheral-libraries.html">标准库扩展包下载地址</a></p>
]]></content>
      <categories>
        <category>ST</category>
        <category>32H745ZIT6</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>ARM汇编指令</title>
    <url>/2022/06/11/ARM%E5%86%85%E6%A0%B8/ARM%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>使用Cortex-M3-M4-M7故障异常2</title>
    <url>/2022/06/05/ARM%E5%86%85%E6%A0%B8/%E4%BD%BF%E7%94%A8Cortex-M3-M4-M7%E6%95%85%E9%9A%9C%E5%BC%82%E5%B8%B82/</url>
    <content><![CDATA[<blockquote>
<p>使用Cortex-M3&#x2F;M4&#x2F;M7故障异常2、项目不足、文档说明不足的地方或者有问题地方，可以通过邮件联系本人；</p>
</blockquote>
<span id="more"></span>

<ol>
<li>故障定位代码在：<a href="https://gitee.com/xgm-embedded-os/cortex-m-fault-location">请点击此处</a></li>
</ol>
<h1 id="一-文件系统移植说明"><a href="#一-文件系统移植说明" class="headerlink" title="一. 文件系统移植说明"></a>一. 文件系统移植说明</h1><h2 id="1-文件系统移植"><a href="#1-文件系统移植" class="headerlink" title="1. 文件系统移植"></a>1. 文件系统移植</h2><ol>
<li><p>工程下载后，会有如下目录的文件。</p>
<img data-src="https://s2.loli.net/2022/06/12/6lku7KnCDqmvdUL.png"/>
</li>
<li><p>需要移植的文件夹主要是<code>fault_location</code>，将此文件移植到自己的工程中去;<code>fault_location</code>目录下有如下文件夹</p>
<img data-src="https://s2.loli.net/2022/06/13/CPAxdKvB1EoGWRa.png"/>
</li>
<li><p>工程中需要包含该目录下<code>inc</code>的文件路径</p>
<img data-src="https://s2.loli.net/2022/06/13/x4luY3ta78dwRFp.png"/></li>
</ol>
<h2 id="2-配置说明"><a href="#2-配置说明" class="headerlink" title="2. 配置说明"></a>2. 配置说明</h2><ol>
<li><p>主要的配置项分布在这两个文件中<code>FaultLocation_config.h</code>、<code>FaultLocation.h</code>;<code>FaultLocation_config.h</code>主要是<code>faultLocation</code>代码的全局设置,而<code>FaultLocation.h</code>只是<code>FaultLocation.c</code>文件中部分的配置项目。</p>
</li>
<li><p><code>FaultLocation.h</code>文件配置的项目只有<code>CCR_REGISTER</code>、<code>SHCSR_REGISTER</code>; </p>
</li>
<li><p>如果需要修改<code>CCR_REGISTER</code>参数，<code>CCR_REGISTER</code>只能配置这两个选项<code>CCR_DIV_0_TRP</code>、<code>CCR_UNALIGN_TRP</code>;</p>
</li>
<li><p>如果需要修改<code>SHCSR_REGISTER</code>参数，<code>SHCSR_REGISTER</code>只能配置这三个选项<code>SHCSR_MEMFAULTENA</code>、<code>SHCSR_BUSFAULTENA</code>、<code>SHCSR_USGFAULTENA</code>;<br>当不明白<code>CCR_REGISTER</code>、<code>SHCSR_REGISTER</code>为何只能配置这些时候，可以通过下面的<strong>三.状态寄存器说明</strong> <em><strong>2.配置和控制寄存器CCR</strong></em>、<em><strong>3.系统处理程序控制和状态寄存器 SHCSR</strong></em> 理解；</p>
</li>
<li><p>关于<code>FaultLocation_config.h</code>的配置，通过文件查看，有相关的提示</p>
</li>
<li><p>处理故障完成后，如果用户需要调用其他的处理函数，可以将函数写入到<code>FaultLoca_Hook.c</code>文件中的<code>FaultHook</code>函数内部;</p>
</li>
</ol>
<h2 id="3-编译报错问题"><a href="#3-编译报错问题" class="headerlink" title="3. 编译报错问题"></a>3. 编译报错问题</h2><ol>
<li><p>工程添加到项目后，可能会出现编译出错，如下图所示：</p>
<img data-src="https://s2.loli.net/2022/06/13/K1OnwEfzD7XNZRv.png"/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..\OBJ\UART.axf: Error: L6200E: Symbol BusFault_Handler multiply defined (by fualtloca.o and stm32f4xx_it.o).</span><br><span class="line">..\OBJ\UART.axf: Error: L6200E: Symbol HardFault_Handler multiply defined (by fualtloca.o and stm32f4xx_it.o).</span><br><span class="line">..\OBJ\UART.axf: Error: L6200E: Symbol MemManage_Handler multiply defined (by fualtloca.o and stm32f4xx_it.o).</span><br><span class="line">..\OBJ\UART.axf: Error: L6200E: Symbol UsageFault_Handler multiply defined (by fualtloca.o and stm32f4xx_it.o).</span><br><span class="line">Not enough information to list image symbols.</span><br><span class="line">Not enough information to list load addresses in the image map.</span><br><span class="line">Finished: 2 information, 0 warning and 4 error messages.</span><br><span class="line">&quot;..\OBJ\UART.axf&quot; - 4 Error(s), 2 Warning(s).</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方案,我们直接打开<code>stm32f4xx_it.c</code>文件，注释如下函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void UsageFault_Handler(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">void BusFault_Handler(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">void MemManage_Handler(void)</span><br><span class="line">&#123;&#125;</span><br><span class="line">void HardFault_Handler(void)</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>如果用户在这些故障函数里面有需要执行的代码，可以添加到<code>FaultLoca_Hook.c</code>文件中的<code>FaultHook</code>函数内部;</p>
</li>
</ol>
<h2 id="4-移植成功说明"><a href="#4-移植成功说明" class="headerlink" title="4. 移植成功说明"></a>4. 移植成功说明</h2><p>当程序移植成功后，如果代码中配置了串口程序，那么会打印<code>Fault Location Vx.x</code>，<code>x</code>代表版本。</p>
<h1 id="二-标识符说明"><a href="#二-标识符说明" class="headerlink" title="二. 标识符说明"></a>二. 标识符说明</h1><body link="#0563C1" vlink="#954F72">

<table border=0 cellpadding=0 cellspacing=0 width=578 style='border-collapse:
 collapse;table-layout:fixed;width:434pt'>
 <col width=116 style='mso-width-source:userset;mso-width-alt:3712;width:87pt'>
 <col width=462 style='mso-width-source:userset;mso-width-alt:14784;width:347pt'>
 <tr height=45 style='mso-height-source:userset;height:33.75pt'>
  <td colspan=2 height=45 class=xl68 width=578 style='height:33.75pt;
  width:434pt'>标志说明</td>
 </tr>
 <tr height=61 style='mso-height-source:userset;height:45.75pt'>
  <td height=61 class=xl65 style='height:45.75pt;border-top:none'>F</td>
  <td class=xl66 style='border-top:none;border-left:none'>表示故障信息寄存器名字</td>
 </tr>
 <tr height=53 style='mso-height-source:userset;height:39.75pt'>
  <td height=53 class=xl65 style='height:39.75pt;border-top:none'>E</td>
  <td class=xl66 style='border-top:none;border-left:none'>表示故障信息寄存器中故障位</td>
 </tr>
 <tr height=49 style='mso-height-source:userset;height:36.75pt'>
  <td height=49 class=xl65 style='height:36.75pt;border-top:none'>A</td>
  <td class=xl66 style='border-top:none;border-left:none'>
  表示故障准确信息地址<br>
  1.开启MPU，如果是MPU保护引起的，那么会显示MPU保护地址
  </td>
 </tr>
 <tr height=45 style='mso-height-source:userset;height:33.75pt'>
  <td height=45 class=xl65 style='height:33.75pt;border-top:none'>IT</td>
  <td class=xl66 style='border-top:none;border-left:none'>表示读取中断向量表时候出错</td>
 </tr>
 <tr height=135 style='height:101.25pt'>
  <td height=135 class=xl65 style='height:101.25pt;border-top:none'>G</td>
  <td class=xl67 width=462 style='border-top:none;border-left:none;width:347pt'>表示故障没有准确故障地址，这个地址是推测<br>
    1.如果遇到的地址是个函数，那么可以搜索该函数调用处，并且结合LR(R14)寄存器查看<br>
    2.如果遇到函数内部代码，那么查看该程序地址和向上一至两条程序。</td>
 </tr>
 <![if supportMisalignedColumns]>
 <tr height=0 style='display:none'>
  <td width=116 style='width:87pt'></td>
  <td width=462 style='width:347pt'></td>
 </tr>
 <![endif]>
</table>

</body>

<p>示例一：代码运行在cortex-m4内核，并开启了MPU功能，MPU管理地址是0x20002000，设置该区域只能读取，不能写入。如下图<br><img data-src="https://s2.loli.net/2022/06/15/6sxthH4Iq8TXnpD.png"/><br>在0x20002000创建一个数组，然后写入数据，就会报错：<br><img data-src="https://s2.loli.net/2022/06/15/yMjrJqlzO3RTNmd.png"/></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fault Location V0.1 -------&gt;这是版本信息</span><br><span class="line">F:MMFSR(故障寄存器) E:DACCVIOL(这是MMFSR故障位)   G:0x8001da0(猜测程序有故障地址)</span><br><span class="line">E:MMARVALID(这是MMFSR故障位) A:0x20002000(手册上描述这是有效故障地址，可以通过手册查询)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果需要查看具体故障位置，可以进入调试模式，然后停止程序运行，将 G:中<code>0x8001da0</code>复制到PC寄存器中，然后就可以看到如下图，不精确的故障地址了：<br><img data-src="https://s2.loli.net/2022/06/15/PNF5kXWR29SvAaY.png"/></p>
<p>说明 当G:后面跟着两个或多个地址，那么都可以尝试去查看;如果A输出的地址很符合程序运行的地址，那么也可以尝试把A的地址复制到PC寄存器中。</p>
<h1 id="三-状态寄存器说明"><a href="#三-状态寄存器说明" class="headerlink" title="三. 状态寄存器说明"></a>三. 状态寄存器说明</h1><h2 id="1-故障类型"><a href="#1-故障类型" class="headerlink" title="1. 故障类型"></a>1. 故障类型</h2><p>下表显示了故障类型、故障处理程序、故障状态寄存器以及指示发生了哪个故障的寄存器位名称。 位名称与 μVision 调试故障报告对话框中显示的字段相关。 详细信息在寄存器描述部分进一步描述。</p>
<table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <col class="col2">
        <col class="col3">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s">Fault type <br />
<span style="font-weight:bold; color:#000000; font-family:'微软雅黑'; font-size:10pt">故障类型</span></td>
            <td class="column1 style1 s">Handler <br />
<span style="font-weight:bold; color:#000000; font-family:'微软雅黑'; font-size:10pt">处理程序</span></td>
            <td class="column2 style1 s">Status Register <br />
<span style="font-weight:bold; color:#000000; font-family:'微软雅黑'; font-size:10pt">状态寄存器</span></td>
            <td class="column3 style1 s">Bit Name <br />
<span style="font-weight:bold; color:#000000; font-family:'微软雅黑'; font-size:10pt">位名称</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style2 s">Bus error on a vector read error <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">矢量读取错误上的总线错误</span></td>
            <td class="column1 style3 s style3" rowspan="3">HardFault <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">硬故障</span></td>
            <td class="column2 style3 s style3" rowspan="3">HFSR <br />
</td>
            <td class="column3 style2 s">VECTTBL <br />
</td>
          </tr>
          <tr class="row2">
            <td class="column0 style2 s">Fault that is escalated to a hard fault <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">升级为硬故障的故障</span></td>
            <td class="column3 style2 s">FORCED <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">强制</span></td>
          </tr>
          <tr class="row3">
            <td class="column0 style2 s">Fault on breakpoint escalation <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">断点升级故障</span></td>
            <td class="column3 style2 s">DEBUGEVT <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">调试</span></td>
          </tr>
          <tr class="row4">
            <td class="column0 style2 s">Fault on instruction access <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">指令访问故障</span></td>
            <td class="column1 style3 s style3" rowspan="5">MemManage <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">内存管理</span></td>
            <td class="column2 style3 s style3" rowspan="5">MMFSR <br />
</td>
            <td class="column3 style2 s">IACCVIOL <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">艾克维奥尔</span></td>
          </tr>
          <tr class="row5">
            <td class="column0 style2 s">Fault on direct data access <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">直接数据访问故障</span></td>
            <td class="column3 style2 s">DACCVIOL <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">达克维尔</span></td>
          </tr>
          <tr class="row6">
            <td class="column0 style2 s">Context stacking, because of an MPU access violation <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">上下文堆叠，因为</span><span style="color:#000000; font-family:'Calibri'; font-size:11pt"> MPU </span><span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">访问冲突</span></td>
            <td class="column3 style2 s">MSTKERR <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">默克尔</span></td>
          </tr>
          <tr class="row7">
            <td class="column0 style2 s">Context unstacking, because of an MPU access violation <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">由于</span><span style="color:#000000; font-family:'Calibri'; font-size:11pt"> MPU </span><span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">访问冲突，上下文取消堆叠</span></td>
            <td class="column3 style2 s">MUNSTKERR <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">蒙斯特克尔</span></td>
          </tr>
          <tr class="row8">
            <td class="column0 style2 s">During lazy floating-point state preservation <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">在惰性浮点状态保存期间</span></td>
            <td class="column3 style2 s">MLSPERR <br />
</td>
          </tr>
          <tr class="row9">
            <td class="column0 style2 s">During exception stacking <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">在异常堆栈期间</span></td>
            <td class="column1 style3 s style3" rowspan="6">BusFault <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">总线故障</span></td>
            <td class="column2 style3 s style3" rowspan="6">BFSR </td>
            <td class="column3 style2 s">STKERR <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">斯特克尔</span></td>
          </tr>
          <tr class="row10">
            <td class="column0 style2 s">During exception unstacking <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">在异常取消堆栈期间</span></td>
            <td class="column3 style2 s">UNSTKERR<br />
</td>
          </tr>
          <tr class="row11">
            <td class="column0 style2 s">During instruction prefetching, precise<br />
&nbsp;<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">在指令预取期间，精确</span></td>
            <td class="column3 style2 s">IBUSERR<br />
</td>
          </tr>
          <tr class="row12">
            <td class="column0 style2 s">During lazy floating-point state preservation <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">在惰性浮点状态保存期间</span></td>
            <td class="column3 style2 s">LSPERR<br />
</td>
          </tr>
          <tr class="row13">
            <td class="column0 style2 s">Precise data access error, precise <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">精确的数据访问错误，精确</span></td>
            <td class="column3 style2 s">PRECISERR<br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">更精密</span></td>
          </tr>
          <tr class="row14">
            <td class="column0 style2 s">Imprecise data access error, imprecise <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">不精确的数据访问错误，不精确</span></td>
            <td class="column3 style2 s">IMPRECISERR<br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">不精确</span></td>
          </tr>
          <tr class="row15">
            <td class="column0 style2 s">Undefined instruction <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">未定义指令</span></td>
            <td class="column1 style3 s style3" rowspan="7">UsageFault <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">使用故障</span></td>
            <td class="column2 style3 s style3" rowspan="7">UFSR <br />
</td>
            <td class="column3 style2 s">UNDEFINSTR <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">未定义</span></td>
          </tr>
          <tr class="row16">
            <td class="column0 style2 s">Attempt to enter an invalid instruction set state <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">尝试进入无效指令集状态</span></td>
            <td class="column3 style2 s">INVSTATE<br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">投资状态</span></td>
          </tr>
          <tr class="row17">
            <td class="column0 style2 s">Failed integrity check on exception return <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">异常返回时完整性检查失败</span></td>
            <td class="column3 style2 s">INVPC<br />
</td>
          </tr>
          <tr class="row18">
            <td class="column0 style2 s">Attempt to access a non-existing coprocessor <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">尝试访问不存在的协处理器</span></td>
            <td class="column3 style2 s">NOCPC<br />
</td>
          </tr>
          <tr class="row19">
            <td class="column0 style2 s">Illegal unaligned load or store <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">非法未对齐加载或存储</span></td>
            <td class="column3 style2 s">UNALIGNED<br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">未对齐</span></td>
          </tr>
          <tr class="row20">
            <td class="column0 style2 s">Stack overflow <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">堆栈溢出</span></td>
            <td class="column3 style2 s">STKOF<br />
</td>
          </tr>
          <tr class="row21">
            <td class="column0 style2 s">Divide By 0 <br />
<span style="color:#000000; font-family:'微软雅黑'; font-size:11pt">除以</span><span style="color:#000000; font-family:'Calibri'; font-size:14pt"> 0</span></td>
            <td class="column3 style2 s">DIVBYZERO<br />
</td>
          </tr>
        </tbody>
</table>

<h2 id="2-配置和控制寄存器CCR"><a href="#2-配置和控制寄存器CCR" class="headerlink" title="2. 配置和控制寄存器CCR"></a>2. 配置和控制寄存器CCR</h2><p><img data-src="https://s2.loli.net/2022/05/19/rfxLHWveBPbFotC.jpg" alt="图 1 SCB-&gt;CCR 寄存器的位分配"></p>
<body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
    <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s style1" colspan="2">CCR <span style="color:#000000; font-family:'宋体'; font-size:11pt">寄存器的以下位控制使用故障的行为：</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style2 s">DIV_0_TRP<span style="color:#000000; font-family:'宋体'; font-size:11pt">：</span></td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">当处理器执行除数为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> SDIV </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">或</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UDIV </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">指令时启用</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UsageFault</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">不陷阱除以</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">；</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">除以</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">返回商</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">陷阱除以</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。</span></td>
          </tr>
          <tr class="row2">
            <td class="column0 style2 s">UNALIGN_TRP:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">对未对齐地址执行内存访问时启用</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UsageFault</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">不捕获未对齐的半字和字访问<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">捕获未对齐的半字和字访问；</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">未对齐的访问会生成</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UsageFault</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">  </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">请注意，即使</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UNALIGN_TRP </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">，使用</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> LDM</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">、</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">STM</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">、</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">LDRD </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">和</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> STRD </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">指令的未对齐访问也始终会生成</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UsageFault</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。</span></td>
          </tr>
        </tbody>
    </table>
  </body>

<h2 id="3-系统处理程序控制和状态寄存器-SHCSR"><a href="#3-系统处理程序控制和状态寄存器-SHCSR" class="headerlink" title="3. 系统处理程序控制和状态寄存器 SHCSR"></a>3. 系统处理程序控制和状态寄存器 SHCSR</h2><p><img data-src="https://s2.loli.net/2022/05/19/VaYBt4ZnLp2Fy9U.jpg" alt="图 2 SCB-&gt;SHCSR 寄存器的位分配"></p>
<body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
    <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s style1" colspan="2">SHCSR <span style="color:#000000; font-family:'宋体'; font-size:12pt">寄存器的以下位属于故障异常：</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style2 s">MEMFAULTACT<span style="color:#000000; font-family:'宋体'; font-size:12pt">：</span></td>
            <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">内存管理故障异常激活位，如果异常激活则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row2">
            <td class="column0 style2 s">BUSFAULTACT:</td>
            <td class="column1 style2 s">BusFault <span style="color:#000000; font-family:'宋体'; font-size:12pt">异常激活位，如果异常激活则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row3">
            <td class="column0 style2 s">USGFAULTACT:</td>
            <td class="column1 style2 s">UsageFault <span style="color:#000000; font-family:'宋体'; font-size:12pt">异常激活位，如果异常激活则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row4">
            <td class="column0 style2 s">USGFAULTPENDED:</td>
            <td class="column1 style2 s">UsageFault <span style="color:#000000; font-family:'宋体'; font-size:12pt">异常挂起位，如果异常挂起，则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row5">
            <td class="column0 style2 s">MEMFAULTPENDED:</td>
            <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">内存管理故障异常挂起位，如果异常挂起，则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row6">
            <td class="column0 style2 s">BUSFAULTPENDED:</td>
            <td class="column1 style2 s">BusFault <span style="color:#000000; font-family:'宋体'; font-size:12pt">异常挂起位，如果异常挂起，则读为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
          </tr>
          <tr class="row7">
            <td class="column0 style2 s">MEMFAULTENA:</td>
            <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">内存管理故障异常使能位，置</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">使能；</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">以禁用。</span></td>
          </tr>
          <tr class="row8">
            <td class="column0 style2 s">BUSFAULTENA:</td>
            <td class="column1 style2 s">BusFault<span style="color:#000000; font-family:'宋体'; font-size:12pt">异常使能位，置</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">使能；</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">以禁用。</span></td>
          </tr>
          <tr class="row9">
            <td class="column0 style2 s">USGFAULTENA:</td>
            <td class="column1 style2 s">UsageFault<span style="color:#000000; font-family:'宋体'; font-size:12pt">异常使能位，置</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">1</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">使能；</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">以禁用。</span></td>
          </tr>
        </tbody>
    </table>
  </body>
尽管可以写入 SHCSR 寄存器的所有位，但在大多数软件应用程序中，只有写入使能位才有意义。 可以使用以下语句启用内存管理故障、总线故障和使用故障异常：

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SCB-&gt;SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | 	\</span><br><span class="line">				SCB_SHCSR_BUSFAULTENA_Msk | \</span><br><span class="line">				SCB_SHCSR_MEMFAULTENA_Msk; //enable Usage-/Bus-/MPU Fault</span><br></pre></td></tr></table></figure>

<h2 id="4-HardFault-状态寄存器-HFSR-寄存器"><a href="#4-HardFault-状态寄存器-HFSR-寄存器" class="headerlink" title="4. HardFault 状态寄存器 HFSR 寄存器"></a>4. HardFault 状态寄存器 HFSR 寄存器</h2><p><img data-src="https://s2.loli.net/2022/05/19/DpKbiwPlLEOUTkS.jpg" alt="图 3 SCB-&gt;HSFR 寄存器的位分配"></p>
 <body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
    <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s style1" colspan="2"><span style="color:#000000; font-family:'宋体'; font-size:11pt">硬故障状态寄存器指示</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> CPU </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">指令的错误使用，并具有以下状态位：</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style2 s">VECTTBL:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">指示异常处理期间读取向量表时出现总线故障：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">读取向量表时没有总线故障</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">读取向量表时出现总线故障。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">当该位置位时，为异常返回而堆叠的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值指向被异常抢占的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">此错误始终是硬故障。</span></td>
          </tr>
          <tr class="row2">
            <td class="column0 style2 s">FORCED:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">表示强制硬故障，由具有可配置优先级的故障升级生成，该故障由于优先级或被禁用而无法处理：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">无强制硬故障</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">强制硬故障。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">当该位置位时，硬故障处理程序必须读取其他故障状态寄存器以查找故障原因。</span></td>
          </tr>
          <tr class="row3">
            <td class="column0 style2 s">DEBUGEVT:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">保留用于调试。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">写入寄存器时，您必须向该位写入</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">，否则行为是不可预测的。<br />
</span></td>
          </tr>
        </tbody>
    </table>
  </body>

<h2 id="5-MemManage-内存管理-故障状态和地址寄存器-MMFSR-MMFAR"><a href="#5-MemManage-内存管理-故障状态和地址寄存器-MMFSR-MMFAR" class="headerlink" title="5. MemManage (内存管理)故障状态和地址寄存器 (MMFSR; MMFAR)"></a>5. MemManage (内存管理)故障状态和地址寄存器 (MMFSR; MMFAR)</h2><ol>
<li>MemManage (内存管理)状态寄存器 (MMFSR)<br>MemManage (内存管理)故障状态寄存器 (MMFSR) 指示内存保护单元 (MPU) 检测到的内存访问违规。 仅允许特权访问。 非特权访问会产生总线故障<code>BusFault</code>。<br><img data-src="https://s2.loli.net/2022/05/19/4GO6YJPZgTjNwIb.jpg" alt="图 5 MMFSR 位分配"><body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
 <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
     <col class="col0">
     <col class="col1">
     <tbody>
       <tr class="row0">
         <td class="column0 style3 s style3" colspan="2">MMFSR <span style="color:#000000; font-family:'宋体'; font-size:12pt">具有以下状态位：</span></td>
       </tr>
       <tr class="row1">
         <td class="column0 style1 s">IACCVIOL:</td>
         <td class="column1 style4 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">指令访问违规标志：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">没有指令访问违规故障</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">处理器尝试从不允许执行的位置获取指令。<br />
为异常返回堆叠的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">值指向错误指令。处理器尚未将故障地址写入</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MMFAR</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。此故障条件发生在任何尝试向</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> XN</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">（从不执行）区域取指令时，即使</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MPU </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">被禁用或不存在。潜在原因：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
a) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">分支到未在</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MPU </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">中定义或定义为不可执行的区域。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
b) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">由于堆栈内容损坏而导致无效返回。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
c) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">异常向量表中的条目不正确。</span></td>
       </tr>
       <tr class="row2">
         <td class="column0 style1 s">DACCVIOL:</td>
         <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">数据访问违规标志：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">没有数据访问违规故障</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">处理器尝试在不允许操作的位置进行加载或存储。<br />
为异常返回堆叠的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">值指向错误指令。处理器已将尝试访问的地址加载到</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MMFAR</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。</span></td>
       </tr>
       <tr class="row3">
         <td class="column0 style1 s">MUNSTKERR:</td>
         <td class="column1 style2 s">MemManage <span style="color:#000000; font-family:'宋体'; font-size:12pt">因异常返回而取消堆栈时出错：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">没有取消堆栈错误</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
1 ​​= </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">异常返回的取消堆栈已导致一个或多个访问冲突。<br />
此故障链接到处理程序，这意味着原始返回堆栈仍然存在。<br />
处理器没有根据失败的返回调整</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> SP</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">，也没有执行新的保存。处理器尚未将故障地址写入</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MMFAR</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。潜在原因：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">a) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">堆栈指针已损坏</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
b) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">堆栈的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MPU </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">区域在异常处理程序执行期间更改。</span></td>
       </tr>
       <tr class="row4">
         <td class="column0 style1 s">MSTKERR:</td>
         <td class="column1 style2 s">MemManage <span style="color:#000000; font-family:'宋体'; font-size:12pt">异常条目堆栈错误：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">无堆栈错误<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">1 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">异常条目的堆栈导致一个或多个访问冲突。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
SP </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">仍在调整，但堆栈上的上下文区域中的值可能不正确。处理器尚未将故障地址写入</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MMFAR</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">。潜在原因：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">a) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">堆栈指针损坏或未初始化</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
b) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">堆栈到达</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MPU </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">未定义为读</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">/</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">写内存的区域。</span></td>
       </tr>
       <tr class="row5">
         <td class="column0 style1 s">MLSPERR:</td>
         <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:12pt">浮点惰性状态保存期间的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MemManage </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">故障（仅具有</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> FPU </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> Cortex-M4</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">）：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">浮点惰性状态保存期间未发生故障</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">浮点惰性状态保存期间发生故障</span></td>
       </tr>
       <tr class="row6">
         <td class="column0 style1 s">MMARVALID:</td>
         <td class="column1 style2 s">MemManage <span style="color:#000000; font-family:'宋体'; font-size:12pt">故障地址寄存器</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> (MMFAR) </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">有效标志：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
0 = SCB-&gt;MMFAR </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">中的值不是有效故障地址</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> <br />
1 = SCB-&gt;MMFAR </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">保持有效故障地址。<br />
如果发生</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MemManage </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">故障并由于优先级而升级为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> HardFault</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">，则</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> HardFault </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">处理程序必须将此位设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> 0.</span><span style="color:#000000; font-family:'宋体'; font-size:12pt">这可以防止在返回到</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> SCB-&gt;MMFAR </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">值已被覆盖的堆叠活动</span><span style="color:#000000; font-family:'Times New Roman'; font-size:12pt"> MemManage </span><span style="color:#000000; font-family:'宋体'; font-size:12pt">故障处理程序时出现问题。</span></td>
       </tr>
     </tbody>
 </table>
  </body></li>
<li>MemManage (内存管理)地址寄存器 (MMFAR)<br>BFAR 地址与精确的数据访问(总线故障) BusFault 相关联。 仅允许特权访问。 非特权访问会产生总线故障 <code>BusFault</code>。<br><img data-src="https://s2.loli.net/2022/05/19/XdMfY1JTPgGwktV.jpg" alt="图 6 MMFAR 位分配">  <body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
 <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
     <col class="col0">
     <col class="col1">
     <tbody>
       <tr class="row0">
         <td class="column0 style1 s">ADDRESS：</td>
         <td class="column1 style2 s">内存管理故障的数据地址。 该寄存器使用产生 MemManage 故障的位置的地址进行更新。 MMFSR 显示故障原因。 此字段仅在设置 MMFSR.MMARVALID 时有效。 在没有唯一 BFAR 和 MMFAR 寄存器的实现中，如果设置了 BFSR.BFARVALID，则该寄存器的值是 UNKNOWN。</td>
       </tr>
     </tbody>
 </table>
  </body></li>
</ol>
<h2 id="6-BusFault-总线故障状态和地址寄存器（BFSR；BFAR）"><a href="#6-BusFault-总线故障状态和地址寄存器（BFSR；BFAR）" class="headerlink" title="6.  BusFault 总线故障状态和地址寄存器（BFSR；BFAR）"></a>6.  <code>BusFault </code>总线故障状态和地址寄存器（BFSR；BFAR）</h2><ol>
<li><code>BusFault </code>总线故障状态寄存器 (BFSR)<br>总线故障状态寄存器显示因取指令和数据访问导致的总线错误状态，并指示在总线操作期间检测到的存储器访问故障。 只允许特权访问。 非特权访问将产生总线故障。<br><img data-src="https://s2.loli.net/2022/05/19/3r97zC45ZSNBxnR.jpg" alt="图 7 BFSR 位分配">  <body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
 <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
     <col class="col0">
     <col class="col1">
     <tbody>
       <tr class="row0">
         <td class="column0 style1 s style1" colspan="2">BFSR 状态位是：</td>
       </tr>
       <tr class="row1">
         <td class="column0 style2 s">IBUSERR:</td>
         <td class="column1 style3 s">指令总线错误。 记录指令预取时是否发生总线故障。<br />
0 = 无指令总线错误 <br />
1 = 指令总线错误。<br />
处理器在预取指令时检测到指令总线错误，但仅当它尝试发出错误指令时才将 IBUSERR 标志设置为 1。 当处理器设置该位时，它不会将故障地址写入 BFAR。 潜在原因： <br />
a) 跳转到无效内存区域，例如由不正确的函数指针引起。 <br />
b) 由于堆栈指针或堆栈内容损坏而导致无效返回。 <br />
c) 异常向量表中的条目不正确。</td>
       </tr>
       <tr class="row2">
         <td class="column0 style2 s">PRECISERR:</td>
         <td class="column1 style3 s">精确的数据总线错误：<br />
0 = 没有精确的数据总线错误 <br />
1 = 发生了数据总线错误，并且为异常返回堆叠的 PC 值指向导致故障的指令。 <br />
当处理器设置该位时，它将故障地址写入 BFAR。</td>
       </tr>
       <tr class="row3">
         <td class="column0 style2 s">IMPRECISERR:</td>
         <td class="column1 style3 s">不精确的数据总线错误：<br />
0 = 没有不精确的数据总线错误 <br />
1 <span style="color:#000000; font-family:'MS Gothic'; font-size:11pt">​​</span><span style="color:#000000; font-family:'等线'; font-size:11pt">= 发生了数据总线错误，但堆栈帧中的返回地址与导致错误的指令无关。<br />
当处理器设置该位时，它不会将故障地址写入 BFAR。这是一个异步故障。因此，如果在当前进程的优先级高于 BusFault 优先级时检测到，则 BusFault 变为挂起状态，只有在处理器从所有更高优先级的进程返回时才变为活动状态。如果在处理器进入不精确总线故障的处理程序之前发生精确故障，则处理程序检测到设置为 1 的 IMPRECISERR 和设置为 1 的精确故障状态位之一。</span></td>
       </tr>
       <tr class="row4">
         <td class="column0 style2 s">UNSTKERR:</td>
         <td class="column1 style3 s">从异常返回的解栈总线故障：<br />
0 = 没有解栈故障 <br />
1 = 异常条目的堆栈已导致一个或多个总线故障。<br />
此故障链接到处理程序。这意味着当处理器设置该位时，原始返回堆栈仍然存在。处理器不根据失败的返回调整 SP，不执行新的保存，也不向 BFAR 写入故障地址。</td>
       </tr>
       <tr class="row5">
         <td class="column0 style2 s">STKERR:</td>
         <td class="column1 style3 s">异常条目的堆栈总线故障：<br />
0 = 没有堆栈故障 <br />
1 = 异常条目的堆栈已导致一个或多个 BusFaults。<br />
当处理器设置该位时，SP 仍会调整，但堆栈上的上下文区域中的值可能不正确。处理器不会将故障地址写入 BFAR。潜在原因：<br />
a) 堆栈指针已损坏或未初始化 <br />
b) 堆栈到达未定义的内存区域。</td>
       </tr>
       <tr class="row6">
         <td class="column0 style2 s">LSPERR:</td>
         <td class="column1 style3 s">浮点惰性状态保存期间的总线故障（仅当 FPU 存在时）：<br />
0 = 浮点惰性状态保存期间未发生故障 <br />
1 = 浮点惰性状态保存期间发生故障</td>
       </tr>
       <tr class="row7">
         <td class="column0 style2 s">BFARVALID:</td>
         <td class="column1 style3 s">总线故障地址寄存器 (BFAR) 有效标志：<br />
0 = BFAR 中的值不是有效的故障地址 <br />
1 = BFAR 保持有效的故障地址。<br />
处理器在地址已知的总线故障后设置该位。 其他故障可以将此位设置为 0，例如稍后发生的 MemManage 故障。 如果发生总线故障并由于优先级而升级为硬故障，则硬故障处理程序必须将此位设置为 0。这可以防止返回到 BFAR 值已被覆盖的堆叠活动总线故障处理程序时出现问题。</td>
       </tr>
     </tbody>
 </table>
  </body></li>
<li><code>BusFault</code>总线故障地址寄存器 (BFAR)<br>BFAR 地址与精确的数据访问总线故障相关联。 仅允许特权访问。 非特权访问会产生总线故障。<br><img data-src="https://s2.loli.net/2022/05/19/XdMfY1JTPgGwktV.jpg" alt="图 8 BFAR 位分配">  <body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
 <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
     <col class="col0">
     <col class="col1">
     <tbody>
       <tr class="row0">
         <td class="column0 style1 s">ADDRESS：</td>
         <td class="column1 style2 s">精确总线故障的数据地址。 该寄存器使用产生总线故障的位置的地址进行更新。 BFSR 显示故障原因。 该字段仅在设置了 BFSR.BFARVALID 时有效。 在没有唯一 BFAR 和 MMFAR 寄存器的实现中，如果设置了 MMFSR.MMARVALID，则该寄存器的值是 UNKNOWN。</td>
       </tr>
     </tbody>
 </table>
  </body></li>
</ol>
<h2 id="7-UsageFault使用故障状态寄存器-UFSR"><a href="#7-UsageFault使用故障状态寄存器-UFSR" class="headerlink" title="7. UsageFault使用故障状态寄存器 (UFSR)"></a>7. <code>UsageFault</code>使用故障状态寄存器 (UFSR)</h2><p><img data-src="https://s2.loli.net/2022/05/19/Zkv2x8S5tpqNDAG.jpg" alt="图 9 UFSR 位分配"><br>使用故障状态寄存器 UFSR 包含一些指令执行故障和数据访问的状态。 仅允许特权访问。 非特权访问会产生总线故障。</p>
<body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
    <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s style1" colspan="2"><span style="color:#000000; font-family:'宋体'; font-size:11pt">该寄存器分配了以下位：</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style2 s">UNDEFINSTR:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">未定义指令。<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">没有未定义的指令</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器已尝试执行未定义的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">当该位置位时，为异常返回堆叠的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值指向未定义指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">未定义指令是处理器无法解码的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">潜在原因：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
a) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">使用了</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> Cortex-M </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">设备不支持的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
b) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">错误或损坏的内存内容。</span></td>
          </tr>
          <tr class="row2">
            <td class="column0 style2 s">INVSTATE:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">无效状态：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">无无效状态</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器试图执行非法使用执行程序状态寄存器</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> (EPSR) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">当该位置位时，为异常返回而堆积的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值指向试图非法使用</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> EPSR </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">潜在原因：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
a) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">将</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> LSB=0 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的分支目标地址加载到</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
b) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">堆栈</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PSR </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">在异常或中断处理期间损坏。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
c) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">向量表包含一个</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> LSB=0 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的向量地址。</span></td>
          </tr>
          <tr class="row3">
            <td class="column0 style2 s">INVPC:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">无效的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">加载使用错误，由无效的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> EXC_RETURN </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值引起：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">没有无效的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">加载</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">由于上下文切换无效，处理器试图将非法的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> EXC_RETURN </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值加载到</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">当该位置位时，为异常返回而堆栈的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值指向试图执行</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">非法加载的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">潜在原因：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
a) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">由于堆栈指针、链接寄存器</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> (LR) </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">或堆栈内容损坏而导致无效返回。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
b) PSR </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">中的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> ICI/IT </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">位对一条指令无效。</span></td>
          </tr>
          <tr class="row4">
            <td class="column0 style2 s">NOCP:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">没有协处理器。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器不支持协处理器指令：</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">未因尝试访问协处理器而导致使用错误</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器已尝试访问不存在的协处理器。</span></td>
          </tr>
          <tr class="row5">
            <td class="column0 style2 s">UNALIGNED:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">未对齐访问使用错误：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">没有未对齐访问错误，或未启用未对齐访问陷阱</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器进行了未对齐内存访问。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">通过设置</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> CCR </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">中的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UNALIGN_TRP </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">位启用未对齐访问的捕获。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">无论</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UNALIGN_TRP </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">位的设置如何，未对齐的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> LDM</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">、</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">STM</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">、</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">LDRD </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">和</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> STRD </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">指令总是出错。</span></td>
          </tr>
          <tr class="row6">
            <td class="column0 style2 s">DIVBYZERO:</td>
            <td class="column1 style3 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">被零除使用错误：<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">没有被零除错误，或被零除陷阱未启用</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> <br />
1 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">处理器执行了除数为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 0 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> SDIV </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">或</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> UDIV </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">指令。<br />
当处理器将此位设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 1 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">时，</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">为异常返回堆叠的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> PC </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">值指向执行除以零的指令。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">通过将</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> CCR </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">中的</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> DIV_0_TRP </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">位设置为</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> 1 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">来启用除以零的捕获。</span></td>
          </tr>
        </tbody>
    </table>
  </body>

<p>请注意，<code>UsageFault</code>使用故障状态寄存器的位是粘性的。 这意味着，当发生一个或多个故障时，相关位设置为 1。设置为 1 的位仅通过向该位写入 1 或通过复位清除为 0。</p>
<h2 id="8-辅助总线故障状态寄存器-ABFSR-寄存器（仅限-Cortex-M7）"><a href="#8-辅助总线故障状态寄存器-ABFSR-寄存器（仅限-Cortex-M7）" class="headerlink" title="8. 辅助总线故障状态寄存器 ABFSR 寄存器（仅限 Cortex-M7）"></a>8. 辅助总线故障状态寄存器 ABFSR 寄存器（仅限 Cortex-M7）</h2><p><img data-src="https://s2.loli.net/2022/05/19/6rlCwa3cxpED1W5.jpg" alt="图 10 ABFSR 位分配"><br>辅助总线故障状态寄存器 (ABFSR) 存储有关异步总线故障源的信息。 如果发生了总线故障，故障处理程序可以读取该寄存器以确定哪个总线接口触发了故障，如果源是 AXIM 接口，则接收到哪种错误类型。 ABFSR[4:0] 字段保持有效，直到通过向 ABFSR 写入任何值来清除。 ASBFSR 位分配为：</p>
<body>
<style>
@page { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
body { margin-left: 0.7in; margin-right: 0.7in; margin-top: 0.75in; margin-bottom: 0.75in; }
</style>
    <table border="0" cellpadding="0" cellspacing="0" id="sheet0" class="sheet0 gridlines">
        <col class="col0">
        <col class="col1">
        <tbody>
          <tr class="row0">
            <td class="column0 style1 s">AXIMTYPE:</td>
            <td class="column1 style2 s"><span style="color:#000000; font-family:'宋体'; font-size:11pt">指示</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> AXIM </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">接口上的故障类型。</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">这些值仅在</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt"> AXIM=1 </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">时有效。<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0b00 = </span><span style="color:#000000; font-family:'宋体'; font-size:11pt">好的<br />
</span><span style="color:#000000; font-family:'Times New Roman'; font-size:11pt">0b01 = EXOKAY<br />
0b10 = SLVERR<br />
0b11=</span><span style="color:#000000; font-family:'宋体'; font-size:11pt">减速</span></td>
          </tr>
          <tr class="row1">
            <td class="column0 style1 s">EPPB:</td>
            <td class="column1 style1 s">EPPB <span style="color:#000000; font-family:'宋体'; font-size:11pt">接口异步故障</span></td>
          </tr>
          <tr class="row2">
            <td class="column0 style1 s">AXIM:</td>
            <td class="column1 style1 s">AXIM <span style="color:#000000; font-family:'宋体'; font-size:11pt">接口上的异步故障</span></td>
          </tr>
          <tr class="row3">
            <td class="column0 style1 s">AHBP:</td>
            <td class="column1 style1 s">AHBP<span style="color:#000000; font-family:'宋体'; font-size:11pt">接口异步故障</span></td>
          </tr>
          <tr class="row4">
            <td class="column0 style1 s">DTCM:</td>
            <td class="column1 style1 s">DTCM<span style="color:#000000; font-family:'宋体'; font-size:11pt">接口异步故障</span></td>
          </tr>
          <tr class="row5">
            <td class="column0 style1 s">ITCM:</td>
            <td class="column1 style1 s">ITCM <span style="color:#000000; font-family:'宋体'; font-size:11pt">接口上的异步故障</span></td>
          </tr>
          <tr class="row6">
            <td class="column0 style3 s style4" colspan="2">Note:<span style="color:#000000; font-family:'宋体'; font-size:11pt">这些接口可能不存在于您的实现中。</span></td>
          </tr>
        </tbody>
    </table>
  </body>








]]></content>
      <categories>
        <category>ARM</category>
        <category>Cortex-M</category>
      </categories>
      <tags>
        <tag>ARM内核</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言中#和##的作用</title>
    <url>/2022/06/04/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/C%E8%AF%AD%E8%A8%80%E4%B8%AD-%E5%92%8C--%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>C语言中#和##的作用</li>
<li><pre><code>提供代码都是可以正常运行起来
</code></pre>
</li>
</ol>
</blockquote>
<span id="more"></span>
<p><code>#</code>和<code>##</code>符号是C和C++的宏（macro）属于编译器预处理的范畴，编译期间完成</p>
<ol>
<li>#的功能是将其后面的宏参数进行字符串化操作；#符号是把传递过来的参数多做字符串进行处理；简单说就是在对它所引用宏参数在其左右加一个双引号，示例代码如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define str(param)			#param		//#将param参数经行字符串化</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(str(hello 122 333444\n)); </span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello 122 333444</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<ol>
<li><p>##符号称为连接符,将两个或多个标记连接为一个合法的标识符；代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">/* ## */</span><br><span class="line">#define var(x)			var##x</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int var(1) = 1;</span><br><span class="line">	int	var(2) = 2;</span><br><span class="line">	int var(3) = 3;</span><br><span class="line"></span><br><span class="line">	printf(&quot;var2 : %d\n&quot;, var2);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var2 : 2</span><br></pre></td></tr></table></figure></li>
<li><p>比如要做一个菜单项由变量和函数指针组成的结构体数组，并且希望在函数名和菜单项命名之间有直观的名字上的关系，那么下面的代码就非常实用：可能在有些规则编码中是不允许使用的，因为这样，没有明确的关系，难以查找。这里只是总结一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define barrier(x)			barrier##x</span><br><span class="line">#define COMMAND(NAME)	&#123;NAME , NAME##_command&#125;</span><br><span class="line"></span><br><span class="line">/**/</span><br><span class="line">struct command</span><br><span class="line">&#123;</span><br><span class="line">	char *name;</span><br><span class="line">	void(*function)(void);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 	建议在两个需要都被打印的数组中添加一个变量，比如下面所示；</span><br><span class="line"> * 			或者可以指定printf打印字符串长度，至于原因，自己想想</span><br><span class="line"> */</span><br><span class="line">char quit[4] = &#123;&quot;quit&quot;&#125;;</span><br><span class="line">char barrier(0) = 0;			/*阻隔*/</span><br><span class="line">char help[4] = &#123;&quot;help&quot;&#125;;</span><br><span class="line">void quit_command(void);</span><br><span class="line">void help_command(void);</span><br><span class="line"></span><br><span class="line">/*在这里已经对变量赋值和函数指针赋值,展开效果：</span><br><span class="line">* struct command commands[] = &#123;&#123;quit quit_command&#125;,&#123;help help_command&#125;&#125;;</span><br><span class="line">*/</span><br><span class="line">struct command commands[] = &#123; COMMAND(quit) ,COMMAND(help)&#125;;</span><br><span class="line"></span><br><span class="line">void quit_command(void)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;quit_command name: %-4.4s\n&quot;, commands[0].name);</span><br><span class="line">	/*-4.4s：关于这个可以在本博客中搜索 &quot;printf打印指定长度字符串&quot; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void help_command(void)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;help_command name: %s\n&quot;, commands[1].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	commands[0].function();</span><br><span class="line">	commands[1].function();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit_command name: quit</span><br><span class="line">help_command name: help</span><br></pre></td></tr></table></figure>
<p>COMMAND宏在这里充当一个代码生成器的作用，这样可以在一定程度上减少代码密度，间接地也可以减少不留心造成地错误，</p>
</li>
<li><p>我们还可以n个##连接n+1个字符串，这个也是#符号不具备地，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define LINK_MULT(a,b,c,d)				a##_##b##_##c##_##d</span><br><span class="line">typedef struct _record_type				LINK_MULT(name,Company,Position,salay);</span><br><span class="line">/*</span><br><span class="line">* 语句展开效果:</span><br><span class="line">* typedef struct _record_type			typedef struct _record_type	</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
</li>
<li><p>##功能是在带参的宏定义中，将两个字符串连接起来，形成一个新的子串；<br>假设程序中已经定义这样一个带参的宏</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define poster(n)		printf(&quot;t&quot;#n&quot;=%d\n&quot;,t##n);</span><br><span class="line">/*同时又定义了一个整形变量*/</span><br><span class="line">int t9 = 9;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	/*在编译时，poster(9)扩展为 printf(&quot;t&quot;&quot;9&quot;&quot;=%d\n&quot;,t9);*/</span><br><span class="line">	poster(9);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t9=9</span><br></pre></td></tr></table></figure>
<p>注意在这个例子中，<br>上面的是一般用法</p>
</li>
</ol>
<hr>
<ol>
<li>当宏参数是另一个宏的时候，需要注意的是凡宏定义里有用<code>#</code>和##<code>的地方，宏参数是不会再展开 非</code>#<code>和</code>##&#96;的情况:</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define TOW					(2)</span><br><span class="line">#define MUL(a,b)			(a*b)</span><br><span class="line">printf(&quot;%d * %d = %d\n&quot;,TOW,TOW,MUL(TOW,TOW));</span><br><span class="line">这行的宏展开为：</span><br><span class="line">printf(&quot;%d * %d = %d\n&quot;,2,2,MUL(2,2));</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>当有<code>#</code>和<code>##</code>的时候<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define A 			2</span><br><span class="line">#define STR(s)		#s</span><br><span class="line">#define CONS(a,b)	(int)(a##e##b)</span><br><span class="line">printf(&quot;int max:%s\n&quot;, STR(INTPTR_MAX));	//INTPTR_MAX =》stdint.h</span><br><span class="line">//展开 printf(&quot;int max:%s\n&quot;, &quot;INTPTR_MAX&quot;);	//INTPTR_MAX =》stdint.h</span><br><span class="line">printf(&quot;%s\n&quot;,CONS(A,A));		//COMPILE ERROR</span><br><span class="line">//展开 printf(&quot;%s\n&quot;,&quot;AeA&quot;);</span><br></pre></td></tr></table></figure>
INTPTR_MAX和A都不会展开然而解决这个问题方法很多，加一层中间转换宏，加这层宏的用意是把所有宏的参数在这层里全部展开，那么在转换宏里的那一个宏就能得到正确的宏参数。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define A 			2</span><br><span class="line">#define _STR(s)		#s</span><br><span class="line">#define STR(s)		_STR(s)		//转换宏</span><br><span class="line">#define _CONS(a,b)	(int)(a##e##b)</span><br><span class="line">#define CONS(a,b)	_CONS(a,b)	//转换宏</span><br><span class="line"></span><br><span class="line">printf(&quot;int max:%s\n&quot;, STR(INTPTR_MAX));	//INTPTR_MAX =》stdint.h</span><br><span class="line">printf(&quot;CONS: %d\n&quot;,CONS(A,A));		//COMPILE ERROR</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int max:2147483647i32</span><br><span class="line">CONS: 200</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<ol>
<li><code>#</code>和<code>##</code>的一些应用，合并匿名创建变量名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define _ANONYMOUS1(type,var ,line)			type var##line</span><br><span class="line">#define _ANONYMOUS0(type,line)				_ANONYMOUS1(type,anonymous ,line)</span><br><span class="line">#define ANONYMOUS0(type)					_ANONYMOUS0(type,__LINE__)</span><br><span class="line"></span><br><span class="line">ANONYMOUS0(static int) = 100;</span><br></pre></td></tr></table></figure></li>
<li>填充结构体<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define barrier(x)			barrier##x</span><br><span class="line">#define COMMAND(NAME)	&#123;NAME , NAME##_command&#125;</span><br><span class="line"></span><br><span class="line">/**/</span><br><span class="line">struct command</span><br><span class="line">&#123;</span><br><span class="line">	char *name;</span><br><span class="line">	void(*function)(void);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 	建议在两个需要都被打印的数组中添加一个变量，比如下面所示；</span><br><span class="line"> * 			或者可以指定printf打印字符串长度，至于原因，自己想想</span><br><span class="line"> */</span><br><span class="line">char quit[4] = &#123;&quot;quit&quot;&#125;;</span><br><span class="line">char barrier(0) = 0;			/*阻隔*/</span><br><span class="line">char help[4] = &#123;&quot;help&quot;&#125;;</span><br><span class="line">void quit_command(void);</span><br><span class="line">void help_command(void);</span><br><span class="line"></span><br><span class="line">/*在这里已经对变量赋值和函数指针赋值,展开效果：</span><br><span class="line">* struct command commands[] = &#123;&#123;quit quit_command&#125;,&#123;help help_command&#125;&#125;;</span><br><span class="line">*/</span><br><span class="line">struct command commands[] = &#123; COMMAND(quit) ,COMMAND(help)&#125;;</span><br><span class="line"></span><br><span class="line">void quit_command(void)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;quit_command name: %-4.4s\n&quot;, commands[0].name);</span><br><span class="line">	/*-4.4s：关于这个可以在本博客中搜索 &quot;printf打印指定长度字符串&quot; */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void help_command(void)</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;help_command name: %s\n&quot;, commands[1].name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	commands[0].function();</span><br><span class="line">	commands[1].function();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit_command name: quit</span><br><span class="line">help_command name: help</span><br></pre></td></tr></table></figure></li>
<li>记录文件名<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define _GET_FILE_NAME(f)					#f</span><br><span class="line">#define GET_FILE_NAME(f)					_GET_FILE_NAME(f)</span><br><span class="line">char file_name[] = &#123; GET_FILE_NAME(__FILE__)&#125;;</span><br><span class="line">printf(&quot;file_name %s\n&quot;, file_name);</span><br></pre></td></tr></table></figure></li>
<li>得到一个数值类型所对应的字符串缓冲大小<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#define _TYPE_BUF_SIZE(type)		sizeof(#type)</span><br><span class="line">#define TYPE_BUF_SIZE(type)			_TYPE_BUF_SIZE(type)</span><br><span class="line">char buf[TYPE_BUF_SIZE(INT32_MAX)] = &#123; GET_FILE_NAME (INT32_MAX) &#125;;</span><br><span class="line">printf(&quot;buf %s\n&quot;, buf);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>中#和##的作用</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>宏替换printf_printf打印指定长度字符串</title>
    <url>/2022/06/03/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/%E5%AE%8F%E6%9B%BF%E6%8D%A2printf_printf%E6%89%93%E5%8D%B0%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<blockquote>
<p>宏替换printf、printf打印指定长度字符串</p>
</blockquote>
<span id="more"></span>
<ol>
<li>宏替换printf可以有如下形式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define FUN1(msg)			printf(#msg&quot;\n&quot;)</span><br><span class="line">#define FUN2(param1,param2)	printf(&quot;the %d\n&quot;,param1##param2)</span><br><span class="line">#define FUN3(...)			printf(__VA_ARGS__)</span><br><span class="line">#define FUN4(format ,...)	printf(format,##__VA_ARGS__)</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;hello \n&quot;);</span><br><span class="line">	FUN1(hello\n);</span><br><span class="line">	FUN2(11, 22);</span><br><span class="line">	FUN3(&quot;testtttt %d ,%f , %c\n&quot;, 10, 100.23, &#x27;a&#x27;);</span><br><span class="line">	FUN4(&quot;the %d \n&quot;,100);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<figure class="highlight plaintext"><figcaption><span>运行结果</span></figcaption><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">the 1122</span><br><span class="line">testtttt 10 ,100.230000 , a</span><br><span class="line">the 100</span><br></pre></td></tr></table></figure>

<hr>
<ol>
<li><p>原样输出字符串:<br> printf(“%s”, str);</p>
</li>
<li><p>输出指定长度的字符串, 超长时不截断, 不足时右对齐:<br> printf(“%Ns”, str);             –N 为指定长度的10进制数值</p>
</li>
<li><p>输出指定长度的字符串, 超长时不截断, 不足时左对齐:<br> printf(“%-Ns”, str);            –N 为指定长度的10进制数值</p>
</li>
<li><p>输出指定长度的字符串, 超长时截断, 不足时右对齐:<br> printf(“%N.Ms”, str);           –N 为最终的字符串输出长度<br>                             –M 为从参数字符串中取出的子串长度</p>
</li>
<li><p>输出指定长度的字符串, 超长时截断, 不足时左对齐:<br> printf(“%-N.Ms”, str);          –N 为最终的字符串输出长度<br>                             –M 为从参数字符串中取出的子串长度</p>
</li>
</ol>
<p>用到的地方 时间显示到屏幕的时候，需要用到这些指定长度等。</p>
]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>printf</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读书籍1</title>
    <url>/2022/05/31/%E9%98%85%E8%AF%BB%E4%B9%A6%E7%B1%8D1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="05722d9c79ef7cdfced9944407072074bd0513883c9ae68986c8856fedc0af07">d7ff8efac6d65f0a9574d785f473efdffa496f470f5bd840eeed050e99f1047306e82bae8b7fa2f6ec0d7c3242cefc37a4bfe06637ec44291ea2e850cc9b9185d4b97db975e68d734c2c1d4565a78563298d780a8f4a3e17b25594f25f193533aacfc36e25df09018f9174fa638326a106a7d9c189997f1273db9a1571028f4e3938655ad7240c143f72af847d5d972b8bb17886c2cd1409c50180980790cc1e3c307af69d90afc6f2cc348196362fe40b7633bf833130bd30b59b96226a9362113a3f5628542ee01133bbbddae5f6d6ab8c9b472ae68f34bb716c9c640991f9470339238423fbc2dd7ba05e0e747188cbe27c50dab2425a598bc01b1a134b71d90ea5148ece1bcab059f6ae44ce80abcd1f3f385e8f9f9ab174e8c73e45981dcca56edb6ae66aaa79d7fe9cf6f8d1a48bdb086ca3309c4dce03527b47d7bd97be8abf1453d6804f522f6898ef7abfd7cfa8132b5bc762bb8000ddf1d88618e4de100a8e551d50260aae964736b92b9f652ca6f07c9ed7810082ad65c2598a367b96543e02a0b5fec04b2846ea3b6ca20ad4e4cf3c26a6fad7d767981dcfcc97514d8598bd807873b16ab48fbda21b699c24420fe3208b89420a7bce44edf96ffe3ddedd7755e12f416f17ff3776614b7ea2157f28359b00341794f71a16346e8029d2244d350bfd8fb0e857b91188c90bf8284498abe4b500fc76e55ae6325a59283c4c133e379dd49dc610e50172d0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>阅读书籍</category>
        <category>ARM</category>
      </categories>
      <tags>
        <tag>阅读书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>Cortex内核编程手册</title>
    <url>/2022/05/29/ARM%E5%86%85%E6%A0%B8/Cortex%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3eb0e8a683962b798dcb9e1e412afc3cfa38dfdb17446bc89c0ae451cff1a07b"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ARM</category>
        <category>Cortex-M</category>
      </categories>
      <tags>
        <tag>ARM内核</tag>
      </tags>
  </entry>
  <entry>
    <title>CAN总线协议个人见解</title>
    <url>/2022/05/26/%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/CAN%E6%80%BB%E7%BA%BF%E5%8D%8F%E8%AE%AE%E4%B8%AA%E4%BA%BA%E8%A7%81%E8%A7%A3/</url>
    <content><![CDATA[<p>CAN总线协议个人见解,可能有些地方理解的不对，请大家多多指正</p>
<span id="more"></span>
<ol>
<li>test</li>
</ol>
]]></content>
      <categories>
        <category>总线协议</category>
        <category>CAN</category>
      </categories>
      <tags>
        <tag>总线协议</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Cortex-M3/M4/M7故障异常1(翻译)</title>
    <url>/2022/05/17/ARM%E5%86%85%E6%A0%B8/%E4%BD%BF%E7%94%A8Cortex-M3-M4-M7%E6%95%85%E9%9A%9C%E5%BC%82%E5%B8%B81/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="df9ac7c82b57d21acc2f571c43130172bba8f4fba05dcdac1cdcfcd79d760050">0701390d4eafe811df23bf164c9352d6e5a1ab1629738d6aaee76a8b82875a8f057e75e9559aa1f367410585bb9cfd42b13514a8368cfa78d882bfd5c0a7b93804691ef3e032f099ba70493df4fab247130fd9593216478ef8f1b1d115c1925e44630ac52d1616ec3ab933a84859603a91cf343efe0e656a92b5c7afe606aec22ed80ea644da2d60fde528c644c9358b0803c0f5b1f7d52b0ad23fb55c610d39a4813a8b4460d276ae74123b1f0383ce6cc544f0df39092bd16dff12b48109513e97ba3269bbb4d03730c6b77a4a5da2051b50fb82b163eb2965c49440b2b921285442c399beb4512f192f2f8ac639938971c8a61f7dc96772d48638f575b601d799e53833653adb6a770359165f7f57caf99c9259680633e936c5f1acfdd6a41e0610c97575a884988baccaa84241a70ec9ce61c42d0bb0a0cf8832286878fe2d7c36a5e0c170bbc86a769c61de61e46fb1a61f0715a111a0205103c004250ccef4860724c2add0465d44bc97372c920918e809365574e068bbace8a7b510978c9637f519842f33aeb9e67d5355d23f520e44817c38ce9d705c340db5a1f2ce9181de56e342b8b975c78d221157d69c4e118a27c43b6a25dccb6b438f2dd96b3f91080bb8850f7ab7f0222a6969972b82947b388e85f3544f32dab32fa14e22e4036551fa31ea15a41bb0b27e3fa47e96c8c34b5bfa39aa94c456db2d3c09b4459880b9fabdad6fc4dd8a7fbd1a79d3b489081063907b68cd7bed50db69598b07983ad7fa302fef3eea4467d2601369e246c175c4f17b9cdd793dbf6ff204e5030bec493dcea7681d10c1dd28110c4583a00d31e5c354b1b2627af1d04ecb7d9ad1b6b0fbec1c13cdc69aa66034ea50e008bf868bc43e965606ac991cb2647950567f56eb4007d842f72a7162da7b3736ed3ec85d2edc399d7a13c92a2f0792cd1f7bcd016d368d2503045f4cb7f930951f45c89916cd5749935e5b828a78158ba9c96bd99e7c62acfa724d4ff1320fb9ec9eaa833fd810e4a5bcad53042ce660b0f7b8f679c758a61a7d71f642c4894832e34c0470e59f6bde832d3f4081ef1aade8443e872621368e52460e76dd30a8ff9ca78aa7306be6cb44609129a192891a60191da2811bfa0e533d41bf8674b7e620f042c6fc3cd33864dab355291b9857f3b1aa75d0db649e24664104986af50d8634f64fe0601261d3d643562a91186ffc6bec55b3f628d7103292352580c3768b8e18137a9bb76594ccb6b3654dcbb76843e3dd1a01b514f68dfac96f00a277d8b5e041edb9c8c5537fa5c954687e550b1189634888ee32e386e6969baa991f97c6501b997a3c8b095d849bf8f809c55f2a06a97dc18d6261ed81fa065d66dab435a4102fff33dfdd36243d602bf31c8d084616805f6a8adc2d9b3baf023ab09d63a9f6f33b31d3ce7a9690b9da904196e40ad009e9309bb5f018eb588ef7d4e4bb98295f4ad2d4b21ab266fc904211b2c826161deadab8ff1eb9649edcc6d10d00bc349155effccade80983055c5d983c12f49e0eefb08410fa79afbf6b9032c78df8fd15c9ddb7026556d2a32b887240a87a6b5efef937c5f4c2db98cafbf2f5423c7438edbb11ff739d14b4a8521901340dbdcd20834cd4153acf5c4b60e488974dca8ca4798b65c39957cd5c2b91d5ffc49f2dcb4fb8d609c6fca3f3a6f066c7433917aa7632a1e2e15707fb4c759c9ec440d522cec1312210390ae80e1f59694a6665d3f65c41f03c136e5d758d52d43d2d8dcdaee10687d0cc241782c959de462d37a5bd2ef8cad28eb30cc8e630ed11ae6ad089c0e8bac1e2dc5308a080e798b96d30511323bf58459c46ee8b1eb42eec38c6232e9552bead14e366e87fd8c11f9038d690d00c30775c7f251c99410068d648b09f1644254923457bdb1b18463150218f5de629f2e6febf207155d45c3f06de10416bcc86a824bc4e2f4fe52cabbec84b6e3838b9d47bd80c9ea9b33725fe6485ad893ded7c167727fcf8e9b0646ce3604ca32a49635c3886da9dbb8571659bbf4d694b02ba35c7c3d0e69e9a0cae0b45d91b87c40ca2eb6e5755c9ea737b3cf371ebee09256fcb2383d5f3ae829193a32bc17b906b7156ea1ffe31ceab665eeb20e16d9f28ec81e113702c395b8cb7ab656b676d0211346bafd14c15297ada138148b05aa2061309d9dc5828d851e0f86452dd281120a616f28c737564ff5f594217fd82de8474aecff55ba7005b16f08581e3a9b0f2bfe9fadec564f268b841825da11eafe0fde352e6a224add62bd2f60cef9073154ce3aedbc09942c378e752ae33146c27074e53836a27cdbabcd6e73d93fc943d1b86ac8e0f2f11af4db1aff031cadb5374e7696ae1d635e119d7773bc4dead64f604252a6918c2209c4ab6b583eaf24f01cab097b461cd2e6437d21dec3a163d855730ad23c4045293d18a7da1a5b6459a4ee57e8c56a03f6fa67614c93d4b253ba7096c0f95b35d37d8dd379a86cf136b3ee67978fdf97083b011a4ebf4f3d062e5be2d11a72dfcd3c23fbe7fcd572779c5b9823254f76bdfaa0aced1de2b286eff55691f80d580196479ab93c51258e608052f7a179cf27b5aa4a3caa8952d50440b88da19738d9eb1315bcb0dcbeaec5aed5895785984c32105240f9064da7ea338f24bac115228a9eef33adbc6d3801e69ec313821abce77938e5d2a6abaa885ec7874cac2a9bcd408b0c6f6180fc8b05e8dfc7fecd7b5116f35143eff16ce21335fdd2d5f0af8866b13e16f3123890280365a60383ed5f26987d2652229fed364daa8a0dbf439fc3c0ea5429b24dd69e3e2c894e9030cc93be3fb87f993c504d8e2882635deed291533e62263b95fd7ce9383afb98329e9fb267ce83b67768bdc9102f369eb7d4ca4fc77fa6a0176d4ccf3e210ce5f1af0ca8fcf8c9bca9c980bfecd18366c1cb171e8dff69e26665132f07195b87d4151a9cc04111224af3f6a2692dc54f4eff5ba6a88e84c9d9626215fd3fbe65b67f41e61d6b8b020d7bdc721ce035935f2913824af96946f11bf86fc1defbfe4c25efd82fabdd7526c4f8187bc4f64ad3df95908003c8e387666ef9fb9fa3c988ad761418cc68c651d5aadf92f30876bf595b74392c96a0db3f87299e1f448a7e49053947fbdf4aeea642eef6568e1e25938a40ac55ed36e42d0fb776ac4031beaf5586c5484ca8b8c5ad3d6e226018d3d7d161421663222175d7246161182f8e4be46972928eb040544972409930a18dd6046724db7921d693373a6d30c945909e9182223066001539e4f69dc02f3921fecb92d876fda031c0bc9f4617b2524d0b59da6e2e12f22c294983f57925bca1c9280e69fc1a239ece1fde2efcd4ccef8782217de03022fee6ad010b1e713277983842e203e91787fc4e3c9e8d6f747f05adfcb03ada2740a7cdf9357920cc4cb0a6ddd8d30ae6877323f7b0c902fa5c6dea1d96e074c46fc2ccd4f5d47a255f5d5339ca10e4186294044df1561a24f2205686e8f4a4aa3708945cd16775da0c4ecd07db1474b02cc6ce4cbd24ec2d008bab3ade4c43a94c72ae3c50d4167a06a9cf59ca9f6563b4305ddfca8964cddd1dfaa54968f76b1c74ca9c5554f68de538c4c0ccd208a531bb1dca680494d11f9f556393e4599a200586763683cbb27e07ce687945e3f686fc0a8ca725ae7d8b1e4375e0241d6c04357ab2e41d8734052912387623327d79a38207996400ff476af83c5c6615cfeaaf1eb54b4e3a8c2820021243c1ff40ff748782b7aa130be6921e650a9a4fca00280acde743640a8f48fb5f2c52d61bc6bd264efd5dd7446e1f92cc4cb5b0765a56365d56d5bdcf7439913ad4fa94d4ad087a046e29b38f577c4de367fca782c0a2a62ee9a4b1784560a9bc154bf8b052148c000eb1c3f767551eca317c52c25ccf923ade1cd0f181d521766bfbb9b3215c560a55560fe030a96f17460665b020013b3aeb6ecd60753825dba9a326dc4f968540478461111b7d0e20879c0fa7808f7009dc7b81aa236006b4e42b7da6fb72d80b1a97b058105176d621b47bfce0cc9bd48ad4ea25a82102d4b9c6dc32507cbb182ef3a4ba21b26c78dfe1fd7be52bb3e60778993c49a4e82d736a3704eb4372be357e478d0b3dae133fd78ef0ee7c48bb09e3b56be8de4bc7991db2265a8d8d518bdda15bbe4e0a38059450c4623a9023f708dc3c80075a4e92bbcdf22c1a3804e04d1b50e4d83b1f553301546b6bda51a603cb297fcfb53858c0a27653b7636982a4bbf8ca4a165cfd7d1be14b7f2fad880ef0fd67e76d4f030801b57dafeb4572dab47a1991d6dd6d08939c07a5046b9ba5541c12a894c17aa723709fb87afdab610dc1d0be3c4b62357a546c7599af61f9e3c65c686c38899b2e1e68075dc48a6a9341a176f3ca2e90492b17dd812948b116937829e3b2bbcc6ee1aa1ee30920cab9acc123596ec7d69ebcc0d345570dd2683243b5824a718d1846dce671ce19e8dee093045d3592a139d8b71177a79be8de28d61cef15f29270310ce6b69f005ae812e37c97f1b96c6f0895a83727f521bef1441475469111146e0b9e314ef46056078c8f726861bde78ce260e2042ee51ac4c42ec580f8b89264f72ee42ff41cbbf1278af678bdd88417f00bd027fa18a1c570439be7b603c88d80d2405aa6550b8f08103929f7b0eb75b00f914e043e9f24294758cc5d713145e39efc59d9423b66f58fa35f3a8ef38a6b385eea652e2ec0266a73ec7aaaf4fa0d0cc9eb7c42ddbc9d55bcd45a6a22ff6915c5c04ec86126e560b71a78fd49ce64d3b91b4ced7e7ddf89302f7c32370a3bafd371f9cf321a61f8a4d9fcd97deafe1fe87ef66a1968b16b87d3623218126762541d77d5a1997686b6501376eb944b937cdb37d1ad0980c4a6343bdc01d81e629c5ddc36660a1830f1bc1c1d6212f3dd811b2bcaec1106687fa69098ef7a45f01bf677b66eccdc9e5fa6f1b6a8adced771354874ab777a39145c18402a621ab7e0fbc4cf412db6f9c387de893ca76511503edb5271984a2393460247b7ba57e22bbdf1a16b516bbf25c3c4e93fd5bcd6a61baa605905cf30c535bfa511f5485b520082b36c7c7a41574a97619356ac42797b3a51520b2cc7c5a7f40b63a72a6f138ba829201013f38ce0fe883fb7ec8388a85aca2ab5d87c971fa04f98cd3baffe7f5405e6f68b67cd6ca825eec4240cbca3c6b76a7a289674506a49f8b8223febe0009acff9b92ea905390d08b0ed496ce9c29c0b41065e565f1baa508834168f4ce91db7b4774fa70a2848ee43dc4eb6d830968a3ec30216bec5b125ab6a62727a596be41482afbb374dd1961d75f18535268b808a54df14607393e89bc9328194419c8ae69fb0b693c27ff3309add6be5afdae3e2efa5929d29b2fee03b3b4829f90f92d4c66f268fd2f86f801954ccd7efacd7c2abfa5a10cc56ab44fc44929548485e03c4ddca9404b8a7aca86f33e71eeb1764c882a8fe48ceeabea48a2a8428559164059e24478934597ebfca73f85a2a3ed918609b663c2962e32360a4af2c767067b82745ce3f3e22a3e0dc3a81e62f2f8dd69b7bff351f57b95ce79384fd60f946f8f5e4c94d1e6dc4b1f63abca76521c87247a12c2c8850db62583324e60c69b9039acec06f6f4e60fe4cb8f9f4267919077994b962089d25809820961477cbbb54ca494998c5cee8bdb8eea3a2078fa8edc0227c86930708b9c2a84f28f8dffb5a5fea84267b85d6f328d822ce05c34e1fc0f7cfe0a9286db6b4ca696bef26a9d63fccc606cd8a4f3cdd71896ab46caee252f211b8997f6218166f2e06b1ce7de61fd0df1162ba694cedfb8502c118836e34f5b3f1ced76eca6f9de45d10279379ec6289e1c9596bead077f4c8b3c0c4226413e8faf4e6d3fc95b6e6c79280dd467a544793a8256e46df8b62c61698a471cad71237850a0a4c067ef91451736dd6481d8b274165ca268dfbac9ba12bf7ef9aa015be873e656364a44e681461fee88302b1737a79f9b7725e1747dc29e13ae0534beeed3d1c2cc07bf1d9489fde61a05dfad8bf62ad8b54e8a66cd11220f9b338e31a6e97ec4d84cb71f6ddf0c501ecf22f31659524c5d15b8534fb57c9566d81555f886f35d7952c27fe2c00315c3b0a1b91e3a046ca7822bb6c1fbd5789af5a916277c560380a06aaa1df01dea7256db79ed9bc752861d7fcf5ebc2db8a6580341355d6d8b5efab53af83ae964773d0667aba6fcb537b4ee0ed6a0cfc19ffaf0978a85a6d67b1d4fc13c551b41cd3291c5c86e1f58046acbc4342cf864a19190e3add0037a2652cec2e5fbdedb084901319314591fe55b9da4f95fc9d00a30db772c3d5c02df661e401cb534da0c3dd8fe94e2b8f9c5376877fc55efa3779560a2aee4ff8541f0798a40951ff7c73b7cd4b0a57aa5fe2cbfaf3c09ed4cc59354588f188fa57536392da5ab7c8224cfa4136201b0644738568a13a038ada1a720d0e6d8a9164e1f7e0124517ca48090b609ef18980b4a6300d923156e71a1d85497cde0ac9b38ebeb6db3d6c45bf913a7f21e7664e3b9abf48544083adf295b63b4a7916ec610d5409fed496c4c06995312eeafbdb2214d3d7a3abfe792b5d859056b42bc4c62aa38d43fc876953ac16fc9f2e70ab4047cb86915d8157f87b3f383e7e303cdfbee7962a61643a22e14dd0b48254c0027011fb409356868132f0dbcbcb99d4305a2e0780994bb21318af939efc023ee0174263ca01e25f51bf48e3fe22698dea27c929cf3b7975d06d52a84cea9d7da12caa02c54512588528634333c196dbe9a60da49cc3ed3f672cdeadcd07e648ba5760f3f8ca9ff3e8a6f89d548aef5117a0e94834567eb1e83d14e983f89043e1f724a955a4fac8c47fe5f5c5641e692d4b3431b2097548a748d81ee2f91c9a44b4d497f55458c1edd8566d5db91aa15850a7c17e438e745cd321b0adb4bc43607c3657fb01b5a28e12d89228b1c3b75328da37e59e56c769f4ffac136e511d90b65056e8abb54208efcda069eceebfeaa6c20f5a6e93ff86e66324f40ef4731c59cc431a7f52c1dd59d0967cb46211b8a18cea818598e18f191f5cd6facefb4dd3d036f3f62e7fbd70d445048f39946c771e4215bc3a9c8149c5276567a75ae59d946b793edfb313181d6ea04c234903e52c49f992815f98bf036e0e5596e2f89390e99f134c5829d590cea072f19709dfb2c0a903f8812d7b2aa94da5ed702c2a0778f9411f8d71bffbf41c27aeac2e266514747cbcb1c849179468ed9904b0eef90c6206f69bb873216fab3f86306a3819ed1d454c44e1ffc9790972b34b7a065b4d8ca5ea953aecf31af2509432a0bc96166b5879e4276c6705d8cdd295a94a6e9fb94b20033306a3f92afb0450227abf12680248a91bfe123a5f8b85ee66cf017d8d7d09bf810882e433fcb615ffcee03b7d31beb5c2c41fe0c5c7b9a56d420e5d75fe30de387ccfbb3b0e524a6640089221b8daae700c2e65f43972baa676ef31de6f7016901a1d07eb046ce89645f70009da7fe3a5a6d3dc3efaa7dbf994f86c27f4155e24b2bfb251fad7560f399311d836a2f437d76c2bebb6c4b5120b41e699b3c5c7b6a3b64ac2635a2d628f2429fa0fddc63ed5a57e66226459febea63590090fcc447d291ee8079d60232e320b1f44eaaeb22a12e1bfe5191a6d9457eb673475a9ef37bf61f23a160f9750490749cd2e2f7c1165b09d1486e86ddfd32d1fa5a7d63124fd40bf18a9ce6af093c487737e62fee0d10739750c032b6712374302fa131cce84519127d667b17efaa8357cfcfac9e843b7dd9067af1c7924fc8dc6f1f369a146f315b508f632f7eb5409b293f50a89c1057ebef02649cca4f8a6af8a2769c4040f0fc531eb0946c4f20410611e46f305977974ecaaa2a6fca97993474339326f6aa3572cc8df4d856c539f1037175022bc5d2e07ae4a206435476c91b5ad3fd968e1fc3abc5d37219c0633bdb5cf32035be5124e946be34d8cfae6e736de4bcc9e04210c0ad4dda9878da842ff38a7f99d2a12ac9fa228dd0608f235b67b9766c1f8e12e92d7f160698449a278434b8c89185bafd58004a6426e3c060eb361a7b13afacd79d6d4d9cd0f7fbc7b125391348d37b6992722e3bcd9704fc04a2b95e62171398b9754f49ec1aded6405491349a884c7838ecee4b10e038ad241996bd9452a424e773294d5ca6b8ef1524620fc54fbabc44b9a7ccae03aaee9219ed84965bbdb4431c24b8c1549cd688c05fd79873c148e5290c646a9fbf3f02d81707249c17c78ca9eea14c596a1bee1ebabd932b8dd92669b2482025fd73e48e56530e052bdf019d0ab599bd747a8e5b25040a7a3d82e3d84d03ad329b809f5bf4a058526e53261822b3518ae113c13129396bb5bb77d819cbedac75eac2667f97518847a67390daefe6051093ac9f21c9707b055ae67cfb39a56ed511007d98b0c875a70f94c25726407a815b94ade927158efa272de9400f503a37082aa6f9d40313d436f90e4bb2ceaa8361f30f3a256f114c0058fed02144a48e5c6f82a267bcde8586137c14c3c01a91d27a10616cf57c83a2f0b0aee579125395449572692e441d7a571497fa3856bfa5ec4bfa9dc9de90e2e22f4ed4e2c94d8295c49e5e1e5b4cb0c49372a5bb5b248707f2f7dfb283f8ac8143e98c33648c5c1202da7e3154d7166d6b70c5f8f52efe87fe77af846bae9769d082160068d97723a384d85ed7e308d149ee08ef3be4fec104e047a43c770e685cc73c4ae959a3841312bc14588ee273836abf577d635e8fd8ad39cbb5b1ec032dbe974f6b1d2d33d246a1f00568c2e3383e9b41bdb2e04d1abf1627a31498778183b9b22c069d44d635bcced30879a85e3dfc0fc61bfa8cb3dddf0e530834bca72ba44b41a52d1126c5e2713a068b43ca7155a653ec081f381b57414343acea635626f0306388c5f244c2d9285b22866035793f0edfbce5c63caa14ccff8a43c01d838e6196a2c9db0b9ec27e8269ab5f585da5b2a8f4806ff4cf74a7da901cbb0eeb4ec46e5fc05c603e61277914303790dd27e86263123419581c5f67cae6dcb935e9fe05b57593e0c2fea3a4335830704b98ea1e06d1990784b98b49e2e916d49ea80cdd3f5e0a323f96a0b62f6d719c4337b8e0092ea70d18d5805da40b5f6a8390b911951abefc261abe698ef21d896c60adb0bf706b30f781ef94f45d20db934960aa00e54f0e6ae6df59d48988cec6333259535b65603fabd68b05829a5911e450ac1e1ff1e16751d9dabd3c603bad42fde27bdb858815f037892f233909429a53097a1428baf59f6bd561650f77b5ed9d189d633f8bc4e54e1a1877f631a7d9c80ade8c3784d2ac39e18ccc60691e8dcb3271803d49957643c5daa5ebfae0288113c6602cbd18be3159f19032627752b8c97e85aaff9c645ed53ba217862a2b9e1fd5876ba0c8c3c74d02fe0215b7eb9a955ea794037ba4becd99f45963833ed3b9515924b258f58b5b657ac21762f0b7e1d7679a89b353b0bb070f96eb68a40046f97216aec08591abc8f7bea301ecfc4f5271a7f1f10eba1437f3e348c0cb8659f97a5d5f245ec30ca7ffa992552d0592530267142c8ca377fa3628a4d8cb32ca05664ced54449abe4b33d9def5101cdc13ccaeb56006a66c5199d25ac7220051773db181adcd3a837b95c5e863b30a82176b0c7ef4c1d71f94f9e83d3158dbf941c0be161a0addf9a8e468b8131adefbbcb0dbfd850fcdf1b958eb4732dc3b5553fa8f3dc38f75951c66b7b4d6e30cd4955ce3bc620ef82664c39742a001d0be528b062bbd4f6c89f9fcb048a994ea04293c95cfa4596c3c21f2a9b5910f8ad841bd61eca3207c745e10ba7450186fdc9ecec668c5be3f28a29e2ce0c4ce101f6139b5b1e5631ba1ec8a5720208d64d391680013949de006f337231d3356319072fecdc787ebc527b4915cc8be61f5c5135c4d18cd3a5a8f7da9aadab189220c6acaa3f8d2dc620dcfb892c04d49b9753d430a1513cc6cd985ce8b338e5d9082040b98aa140766f2b0d0304e54633a301ac86eb874f377ac5ad8bb866e2f9649622e324ea92965c12ee7df1f19944bea87f04c2336a20f6119db3d4e94a9b76b84b893b4862825dec87fe707770b95070065ed03754e92ec61aec23abdb4c9ad518b9ebe98bf3efd4c4a1c61e98b0a0300df35c52f6550d334e09c14d945dbd05d537a58d3f83afdf7acace8aa20657870770721a0c2e83fd969ceb4faa261eec45103d3ee340f3d22f5e30a453a5a8be720285d4b7dd79330399031a24c1084d366660bc7c42529be916d2a578d935b5d6a20b89b8b115860c61dc02a2d0aa841bbb2f549e2bd54cac810d2cc46d3758ec8bc17b10469c69f81ce95865b9f7798dd7f61a1480b0a5afac58d94e48b7bf24cec3485d9cde5d8f65f1950437dd15db124faeda6b590cf99232dcc78fcec299f077e08c001cf118449e36c62e56d18e5aa9b67d6468447bfff889d7eeb10a47be2ab7943d2d1a2ad07c61c7e2e65039c0b06e341ae6cb234449d0dd1ac010ca2aa6362efe780a5065d10f629b0abb1c3941fb17302e9bad744974788fe48c5f3113771a8e0853f7742553f24663fb7b5fe160ec263f5e870295b4e9bafb8f009859d1628cd63262cfa6f67e754b32d8fcd5c4fdd97435b54cd17193cb5042686aa21501d1fc9f8fc31ee566df3940cb6a07ed4e04f93f306295dd28ea03bf2bedade7e7f6099ce07172eccf87d96d4950a2a3bd4097225f84009ba1c52bc42085715aff21f89ae8903e47ec08255cfad403b36b063fb0915b5cf2c92086afd1f03c2ae0f58860ab146c229df1aedaa8415b11895bf1ae5df15fec52004a17c71ddf30d9f44af9c91bdbe539dc3332f070ae611c79b8a4d2d51369c4c0b31b2a81e5750a0845eb51c47e832c9c3abd5ffb90d28ff7b30f15c3b5d89e6fb2b20fa99cd57be337e3048483fe9b2e243f768beede10b8426522e4e774d9b6c60e101a7b583ad3d0671788c659bd7e0294fb77a121993a3305466d7f1a4077ab2611b1138ced7d557dd90ec925421488019bc4134682d164452dfb755cc806eb7c0fdefe358fa7178382ea2450fd925844ed0b2e350c52401fc3380872549ade31af65b33c7fd6d1ffe0fd73c6862791870a99cd1a8ea2eccd8128eb02c24c41eb323dca342ca7524f3f2bdae9a8fa7f47426b603b3c492e0e73009c8be4ace55c6ed17e7583833fe1bfa1a963686e8d47e9a7074ab1f2143f0adbce22113185122fe4d234706060e4a2e845af1477637d9fa699488dd201de445e5f67715bac3d9c859fba0d8f52b1d7ea62906ed1af49ae424f4b993a4c1b2941dd6e779b329754df7bf660248e4867b12c3c4b2011959272076ee3ba32411f3014277d94a73423c1a5979efc0e2c1351f9c4c30e8b63d27b7f72fcda82f81b82ccef998fec586fc47eb2c114dbc81a863869e43eb122feb58ec00771ad48febeba89e334a9d5a4ce1fbce1bc4c23e474cbdb514e645bfef5ede089f9f1984f54ba4e4685562c4e8929c88f7d127b50fb1f09d8283a6177ac688263cf6cb4c1129933455408ec9047b60367c0a42b06c2fe4cce483e64188559692e03896b78efce3e3a43ca9f72ddba639a68721a60730de865f89e43513e4296fba298c3b377e52716d74148759d08a4c9f3f4c5c01457d11f56c35d2652c3efd442be94d60ff1b619a4fdbe944a26c46c221ce63aa9fcada717d9b8fb5e36af144c529831391ff97c17b3b90d632475b15c78f811eb3d745a4d1d41c8cb32c004139a492db34b2874b6b84613e7af31dc01273df33842fb2ac0d106139627202ac547f84115c8c6e5b006b11a2caff895c807b0e158afa48a59b72f72224a6fc7709f1eb2c9c3047824106e19f87e413b183d88e0ff5bc6b9afc993a06e52dd9f4a2e5f04e1c8f706f0a929ce4411e2b1f9ef7235ead8244be0d4a30a816499c41068dc944c7bfca5e5a10001bdcebb56f03f61b15d1a37606819e50bc8573e126dfcccf49f7051eaf2c12eb11e7613a445d208874885b98985201b39567556293298d647c8c075b3e579f6a6d442730b2b6e5756c79b61dd3de0e5f570f4ccf171061330acc7731b3d6de6c831ee0772e8206d864e66d0d3c98df655e635885e3487b0e88e0218be800ded9332afeba4a0f06647adf2e593c7b800fd1a754ba62bd82a6b78e60c5699e2f5f457a00265f2364ad0c5ae624b4c6d53cc096db8b2095d2c1159dceeb17b95482a181f78f75a90ce9e9ce99c8b14d65067ce4f6cc0955ad1a67759a8848177b9bf99afd9abd8027e3b5d5db8b6c69fbe570d1dab0b2d450afbaa1257f8d98ab55024a34ba1e2f4e8354dda5225f8b7f892dd6ca1705050b4931a8a3be468cf2bbd6831c4f6adc7fae012512199f286fca2f8fbf503cc2013428e32e6fcc752574ce200630787478bba07a9fb350a669ffdba5af2184b11abe42bb4023b9a82e84d2b1d5cea26c131da21db19c0f8304ddb09127c997dc01631dcb6c520d65ddcd6d1fd7c84e96f710bbcc63a4d03434920a152ea9cc3060cd5fabf50cc65055554712123fbc84fd7b9fd306bc6831cd57b8d5178e9f9f337886e0dc97304b0301df8be4d3c8d9a55eba6bf608ff3d4dd05d40c586d3451eb4057c23a98df22c080b5d35c1b6d1ba91502950a5dcf11ba36d2e99783e2ba8e307efa24b4a39592a362b82f029df5035f09d446369749d38f5dc6c3182776b83b1f1497601923d72cccbbc1284823ea7faaa2a449cbc24823e8ccb495b9b0cd8986afb701ede0f31816aadf112c51f0375d7a10131787402cc5b60fe4b1391ee225e0fb9f80aab81fd557071809f4a023cfa0e681080a6c69fca694bbfc13f291e620905d63650ec4b73c7098ae741bfa59848edd5438c89c9c6d81e5289bf734ab14f988d6977ef8dec2904e2c7ed4677a5279daee85268caf2a8e1d1a6dfd262534d037abd07292d8bb1e91021beedbfad9d63030d0c4d53d1edcd88fe7e9cbcc7dcb42da4b00c5214980772ded34f5d2780b89c91bd875e3909e9d96b750d1f326943f6a7bbffd51be7322f632100ae65dfb537815b0591e8e271b054e79078287671aaaf41d49b5a2e89984683cffeb7babc922960a729807853afe5da47327e2227d27c35749fb4b386f08218f723094aa905bd1fd583c0eea78d370f3ff785aa619829ba95c600b119a2bfabab2d0d82ff8b46bfdd7aa584d2765b29ef6e27f71cdd2d82755bb1584d7c953b9fc283d6497202716a546276f3d7630f300b25b826331c7966bb6d2917f218db395f8d635384d647648784bc0cde1ca603b28f077d707ea3313f0d6951ff2c8bbfd78e24986b0360940ed5ccbff166624e084d82eab922b4d74b53799a632c754f5121cdb9a3901506e013efec932be52b71dccdacc7dcf33c146b15b90b0c1ce411b3b3567e24bcb8c28e48995346e801dbfee317c4cbd25240a8d538d3901bfd2dc7dcd766e2060514752b6de7374c85f29851cbce604bdd0f45021db7250e633a18099add22d775fd8f198b82916cd7379c001ce20100231bfad61fa1636fac38bd5e18e89214221406a9c40e935afa797f634fbd4770e6159298cbb5e5b16c35cd1e2fa86ae7112881cc3a6e48e22bd363f47ad6c5e101d1fdbc6eae210f6e9f6b0ed8d6fa7d9313f2ba83a23472015b88fe0f05be955ad209d1243257031d41e6983a0c9d2103ea7aabecc7202d40a35aba48b624f14697cdd0515234af7fda5cf34081c864bb488c07b4e6083d4a28ace94477183a9a0b88aef6ade2d80c96ef6d302cf578bbb734911a422a8a5b9d7e53f9f57ac34baf4d3be09f7ad2f8360a4f7e81e8342a8e50bb342bf23ff233c300ee42734e60b1fb428858074fb0e9d22dfaeab7a14903dae3b960aced65098c4e83052439e1eb3ec0dc30f771764ef0bdcb7019360037ae50553cf768b6193a2d7b3a518c556a960ee5ad45b81f945cb5971a08c7f07196bd6a77cce1341505564f361eac212878334ee12500b4bfd760a89b1fcb860967b4067010ed6b55d8006521ce83bda8e785a7ca0d8917cb059fe4252262078383e9b66fa49447012a0457cd9d1484d67ae724a5bdc796cb23960ca3788781446de7cac4546545d3f6bccaba13fb3e1697bf5d27f68349db11f27abc653532a70588eb1287ffee0ba6e7ad4a89f3f656af9526c1f09d4a1d5e266e6b7275b10039b659570f3986d3c8ef51da4bcd64226de2a9fac54f700fa17fa6625fbf21c3a6ecfd94dcc82ff53d269b511b57e806ee68c7c0c1645e183d695d26d204a1a5bb0775e37aecab89576fb61c27df64d185898e2ad1f9f0662f0aba87d8a339b824af9a63f4238802e4241944d9a0186596f2ad5efa98cba1f552ae7d4b148aa2bd5e8930b0d180fe59d8f39f1c305e6a049092f2db6e42c37a954948fdedcf9f4ccd75da85ac6ecc065317bc95b451e6e9f30a863003839ffede191301d9b2a275476082d09ee8f4222f1cb87caada1c7ddf4ed3cb361ba8379c0d3b0061faebfb48f5ced5a8129c109c2d5f1d70260dfd95b50177167840d0a9d4df3aeb540d61910c6e1e837ce7e9fd1238ecf1df06652fed9b6be78dda00813195b54db7fe304cc8004e7dc0c0334e662de169d89e2f25e024fb76b6b0f9a65405b4b35e7835321f150e6c384e0502e46bb17369c827193d4e05331e0a36676eb9867ebb3eb7c6bdf7e548cc037dcf4efa90c1ddf03037a9206c29451022282420d848f673583c360c638adaa42f250d388db0dd1383a887f989a84c3078b27d6fabf68926d69d854d47555a75db67f815bdc79d7a6211c446bef4d0131ee2acbd5d93aed931dc88e862c3fb01a63fc8391ed8581067a4a27f149c4a507c50a04c4b98b4bed9596bacbfc26e4f6fa2790b07f48149c14f10f0d1c7608838200b12d960fa7eb4597685b720656949979196445f6ec770b15559f2814972e7af702b104b154c802d7240bf6d5635996e6939eff162cbee37078f4c4277d47dcb7ab51e4110036a6e3dc908a281130e8b81b085a27c3aa775b03eace0375b811ddf78da0b4285abeeae7c27a6e184b7a00c6f3a447dd20b691dfe2c8463c624c29407e4e3fb8a2e04acf361da8a268693f0d2476aa9029dc82b8ee5bbf239261d7d72d2624796b8e2045435d93146f1ab71611d717bcf98657c97f4a7249dd31153b0f612809f3abc46c9238aaca23e884107e8304f18719097c05a3a43c7ed8f6973ba62014ce490ec39bc3d0e6a245d34028cf2ea96de22060962d343bb4188a58ba36fc1caacf939d27e1f63305da70996205bf8ec77afd561b2fbc9a26a22014924669ed8d216c3c3e1ce0005dbb8654544d17c0c9c4156adbbf1280cd21685d41d82306a279577a9c643980bb8d3b0f0f2c1dc8b273f2fe1f053dd215d00450b37af661bd7d29fb835cab661b2f83688a7534a78f42f78e5ed6e946133c8a53b65d67312f5ea0ff6fd058a17c9177da1e9985dd168285dea505b6a0da85d9e02cb37306a82e386361121dfd8f71d16aed582879bd2cddb1f1b6123d0c71d0de39d39fa874599f7b437de16129a6097765ae927d0a9dcd19de976664527f8373f998df4722ed42dc2785ad4c347542b8f4a98f48f8b20fa500a7875ce163b2f9fb117bb36b5cb20c0fe8a42012b7aac059d7ac6485ef2d564f772ccdf509432e3c14f9ce62c5ccb4de1a350d0500a7dd615ac176732566a26948c1ea04646ab3881160eb4834ea0b33091ef9ae6ca5c338d50ffda403839e19efc63d8b5b9c0514c544e1dd5ea7e1e9707ac162ae9557d6a2a5cfe2b0f894f5152aaf5334519efc7e2e7d2dd8759a08ecfa4bbbd8c1a32f53d224cc6d0811cdddd531f5d1aa8d627246dea0d6e70e7412aa7a8901087a353dda4d85c1d22d1b8e0a3e30da87ae98d637498d499512f0fb598c0b282d676f7f0b6d8622e6bfa00f95053aec78bb5f94d928fcbbec11453eb221bb96640487795dfa5eb31115118c0ba50f63145da9fe1485c2eff1319e41030a086270a62eb1818fab6b185d1a4acab104b2fb0c2dae147166836bde8e3c635aa4edf736d19bdc53f1d9ec87552815799834e88c8c697b34ead6bc1ebecbea45a4732525e5ecf7b7c08e4335b0df7714c3225c6ea138c1905a93c519821911407f4572c0ebf71b275d7e1c91deaed015692951b9ebb24b43da1e6863afaac16631467fe6d07fc6dd9926ef6ad90720f61b90e523d92a6905924cbbf3393a50e0eb720288128c0cb4420e8d7d2a18ba22afc9da84df7b317f2be6b42904fb1520a1023eeaf9aeddf0071b02bc415e3afc821cd00bdfaed70dbc85d621e485ddcf1a0c9e3e5ece5c5353a5aaa7410c161f19f33ac2f139631d5ae5284805435fde9a416fd0d29e541d965d67d574129641eb97046478c4343c7b4300ac3440b81388a25b5a77dc4e724c3d32b880b3c1ed01c2ec46de4ec6097c8ed3f8336204c6b9769c1b8279c2ce9f108f490988ac67ef38499b78730e9f4e4a71f5f7bee9b03114aa21e3f99ab839f8a995aa6d8c4d91ef7b5f265beabdfb108b9218e780c255be7f55d8835cfa13feebc4f1d84ca481c735d397c89a8b0757b7cd88ee9b30420c29e77bc24b3858315f8ab864ffff87b73913e2dc7cbd203559778e9c164b8c6b8e83ea7fcc5d0b414cf60729d701ba8606ef4103ec4095986ef7046901a2f37030d495095bf9546d4111e7bcc2dbe960ffbd57875592d04463223a1bcaf15f1b7eb6ef67badefabb47c59fe28bb53dd3d3d4dea7385305c8cfb8af7837df8c8db04df41c8e1002fff18cb6825c95f399f153fd4e2ace8b02cf5316e84153075a089219c18b70ce97caba77b54bc99c06acb88168ef7a7f1be6add5d532075e8a39d171542fe52c72847d70597a745b91500e74a8f81dafd3a282acdca1063445264c74b6d4914c5e0ebb4f14e2d84e249d8faeec4b7c05b21512804ce3b4e75c9ca6e7f1b24ea88495341f388e0351c0c7c1fff8d71e9e3ce82ae0899e3caeb4b68be33c462e75f4d0a210c81000eb10435df1cfd672a65bc6c5146ab2e50178ed016c9f7333f6eeb21701d841df71af09d6e2b3139cc3d233ea9255b3d0a55b65ed6edf9fc33c11fea47f3703cc948ee4de8b57231ba3ee157db689da829b531b224e413d24f33a1d8ada2d54e8188f3a79ce380e0ba366dd0332245ee12da34e20fe8fa43bce731461a2772662b927dabd2056a5f9b09403bbc8b9729084be46b15e6b477c4d55238a694424be2d09992652e1035c12db6a92354a13555fe5cca1fe4cae55c08a0d8163ef6dc9a1a6ea5d3a50e9ab10580f46d3ecabba4d666122fe3e3bdd7f966ce696c7f2e9fa67e88103c079b0c331b2929ea582ab1ee081b2e248999bccc116a520b3204b2723f9c0f885b9235484242be34e29323bfe0f729c6b9e76a3912d8276f54e18c3f60e528c54bfdf1231e83152cf022d64de065e3f07183a14c9afcd33246a98ab7b7f5b5b81b8cad63a41ec8ba711f9181834c976c4ce1fc13e4e4e394548bf1e855712e8e609e0abdfef30ea42a7584ff9797695bf7861043a3dc755c4e2811b966714093e430219d2256bd7fbfae26b757b1f492d1f8d8108fff1769835100fd144120a4e5b5a78887a2603bff93597f02a9b8a04c3eb571158297e06c272fc514454372932fa51a513caf9e76f499756e2d017f01d9edeaeda666b73350f37238a46ae168589d98fe8505a6a7e5bf4c92c75720e21d0177d51516d20cf75d0370cbe31c855bce560d13f35cc5824b263f677dc90a3cc788072983b9dae1a7d7323b6964cf4715c341a224ba5019349a786d6e677989a27ba78071486cc050c55d5b84bb525a44764e6853981d780e2f2c677950ff411b0f83ff36d17c2e305d430aff95814af3cb7eeffc8b5263cd5d5b568e0f8293442cbce5979c41a8054a4f39a23191f9c4d6a5143fd571414f2e411718c6883b9e591a48b2df4cac0c10ca63bcdc4e044a76cbcc524cef14c12ae1d0e99c4d13fedc78335819f5dfee6707259b558e5b423a65ef5262cb689263cbf33135aa7e4f07183c3c692dff63778d204d7f4b1e121d599a5f2d820db0c69bac15f8853472f25510253421bcc557c716cc54844229c1b618515964cfc27e80333a00b124e6322a9f8a1713b8bbba4f995bfed192bbe8d7c58859e860dc9202af2a18bb57c2ad2e3e2872242822afaad8aa6fbeedddfb01c2ee17df20df84afed828d9a7b6bdb8a9e978c2b49377ed89a89225ce68fa7ee977390e09be8fde38309ddf389dc2c7e67191e9f44bc03d3dfcc05144df55a302930a1799f17b6667e6e2f061a74c2bfa698ac336632a23cf60e7794cbaf13049f73f4ccf2241a8e0958b6a4e05e8bce37fae2ad8033cf5e40eabb4d5c1f85a3403473d72a62a91d24809f26377fdfe60c56cbaa26e219054308ccb705a18085f5b1f3a1fe8d8dcbdc989d7c612c15af044c8a2f784309cea9b1793f12fd96282e41cb60378889aac3e9a51b91df134834df513e928b6ca3fb5e2f1e6f2ff719062eb90d598e7db80920b5205363170ca900fc4b0c86cd48e8aff51f38cec85148c7e86ea0d86458fccb254946f2231aebf8bfc61a4a9c1eb3bf7a3cc531ab18a300ac4a241b034f36e54939affe61c7554f123079dff0d293d28915d63f2a056eef16eefe5eebb4263c67720e2e2197d7107340d4139d8eeb1cfae8e3bb7b775fc7c40fde94a4586a68e40c0108c4c28452a5b3e1f17a5a16a9d0965a2dae71abbc6cc2510ab3850a0d47d65d38900392bca174df7c49bf8393f9eb6732bc07a311e1191f9e0ad594560e2da362334addac8f91ca4476541a23d9a72ee5d178a03fd5aa15ad28284fecca9f48bbdaaf141136d8700b4a3a4d12a2deca3daf8452196900cceb86c2912d25be985f6ee1f03cc15d94833b5e0ff298277925a2d75eb43b1b3ff76bfc5ca10c6902ec48f44e1776f493a1f4d1e2363b54eb77a927f07f05d1249c6ea88082b10c999cec7fec6bba51a60013e1253276a3616bec2d939f7564a7ac2d42c97fdac6f2d0d01b4a731062777d1a339189fbe10076237b140c0f31eee7d399235bd61247ef59aca1eafd72a2af35e5056d688d1af54cd21bcd1414a1ec3eed645a26c658d8879ef6268f7d7df891ac840eceba8726d79e74076f6d4bae2935d78411f91f39a96d472fc6653aa8b6e2d0d2608277adf162c0131aab3f038580b178956da58c9bbfac268f59a4d5808b1492b8c06b1f2e575c699db18f3819e5a8ceaeedb11ed436f0ca0ec3b5899a4aa6bbfd2bc3fc55dc70d4817a847419487d1d5483391055d7161d7611d7f786955d41a75f1784ea1f702d7935d714b4b0f690f677d4b2c862b7c61feaab36ae449c61c41ea6478a0f4fa0f5159acfd7ea01c40161f96add4ea6f9e69a8b5e63c865bbb2b0077956704f039be9de69f8f5f99c693b650531de14a5e028d6095dc6c4f73de4b644bc802a44591100ec9f47cf5cc3643b294ba10c77455847822765ea1224b4ca65c3374b9790c0d5cd516c688d55549b705c629d3cffa513b4690beee8de8d7bb7465e4bf01a9241e8322b735d48753706413aa510404a693eea94372c3c40bc771088be2c79db93618f6c28fdae89995ea8b81b3d26c4fa04234946425a1f0d7d695a99d1a166b9635b296f0da957160aa15e81a5fca72418f0cea04550aeaec7bf770b11f94bd6029465c8a154a866c69a6308c6f27d72483097abcbaac45d13ffa81a8c654da1defb2d64e20b8efd0b059c6a492a57f49efaf0de825387ff33d8c47e8c49a89ea3180771f7f961398f623b506b756d29ce66f6bccce8ee2cffccb687c78ead7f6f72e79e3eca02fbfae1d57e10808e5ad3cd84e3fe2e2caae773d6584f6acd29e9b5e1434c5198bb6dd04d4ecfb8ee6f46373c1d875e1f3de829956ef90dfbbecd2d87967b1af7dc1bd814217d9df3f04931804dadb3c3fe6f4a62d7a75bc9d626b1dd06af9ef2e316fc43b3e6396c4b5a979e96102e0c22a4fa8135c3b1e2b6d5b6421fc4bf03365281ba25076e7ac3cd78d24de59284547aa8b40e71f7a4473e2c4543fac689caf162b73679703ea75b67f3167d241c53d19d701586d62bd4724d7e7ba58cad460f9c96dfdde0423dbe1dbf7c2f352cad7176b9be72b83f7949c154188d5fd8d7cf674d66d97174931ce59dccf9026d9bd8e32b2c920706fa8eee133d4a8c636a8f5353246b99ba6b1a45c20fc9dc4efb46890d1ae550244f141bebf80f97c8b06b08cab08be610d816539ff0ca570a6241f6f1a82492be3621dd5bb7265dc326e1580ba049cf53a63324641c4fc06738c78d944dcdc202b8ea3495365a81223174724685d240f52b8c8c14db322b896ba2ee5b2758244637c7888f13bb561288c2da4782b0b1cf096e579d07e13d17c41f7973ce0baf636e764770dd01b00b50915afee425870796729c1586680fdb12d50e240893baf59902752d3f0b3652dd56fcfaeb420aee3ffabfe422655ba5841638b616107c5c4f686a927d8f56a5d2817261a754443db048780fa56781f61bf0f6ab50c4132c8897d27b5986c5b59469184226bd3ba14f0fa761f207fe4310f314d28923ef0d71465c501f08796158062daac5fbbb35455748505843a921b6e68e49cabe2db4f15ed3bdba8739e792a2de12c7ee0745a94fdd4e815b829990d723a9567fb7adf06f11554b1bb6ca68f6f0bd95821eccbdc184fc8535d02b925ed367b785c949bfdd9c6c011d7f0c40d4934b8ff71180be08da2622294aa7c9f2cebc5d449f5cd80cc4570dd09efb6ec788e3db9dea55388763c083d2a8838d08e8d49e3b70b447ee17ec5958202058a3996d0f7b970c85eb9555f49e9b5a0f69a728d1b28283c5363f5f74ac208de6ef578fd3190864b1e1ec0e58058a785609ce7fddc8289931713183434914ed7a242fcaa9f8204dc6b671c5786e3896cfb4e15da65b4f828beb19305b4d1e2e6da8f53eeb3d32b6bc37c1b8e0c642ad708e22ad8d60089a37c30339c6bd7ec725d6e7d1724a9f699ff97a1a83304f1bb9ee0d423aa425fb3ee0defca147a75d4274e438dda3e2fe8dc200ccea439d79150f2c59a7c21cfa60f88bbd1ff1c692897817d7a5b55a75f24c51e8f468589ee617621580027bc70bd2b85c82e61bef1800629d3c712484ba572742d4301e8acba2cfdd19e7fae0c6da473784b9dee3ed39fec7904331857facda4aacbc61fc6deb7aed38051b19ca5d7bf8b679460e1ac3a07f6625cdf40b94b5d552c93139031fdb094665b57701b26ad5ae6f515d463d06a820db57a63d76b1680eda4cb6cca3fc61e8a4cf90c271ffd9ecf5f9f805cd539114c92c9ca3b383215e40d87e821e8f946851a81ea89e308503683c85efd17e0923c962d36f2ad5bb6654f1320f36bcf0de2b7216e56736754cdf3770ff79af2a67c326fcce38f4d5046cce839fe7ce2e3c454a8c297ed484e6664c93f804e7639d7ebe862a3591767dc530922a74522a4d2d66e0bcad1480d343d6b04d4f5776219a1a9662db93e336c3193ef478eb5e03d7241e64f0d3b4086a8c7f4812b187d01a97afc3f6629021ee87e59520bc006d138695daab34c6f1bf21da3ebd8623fcdb251891c37e972f241558062453b0d75ffdc65f7960b8b3fd5c20869c310b57b0d6948770120044d5cc2e90745318b27df880eb59d8a5468f266f5bb2393003e2dbc7388cdaf4133a18da85a5ec0168005f4743e442d5532f39a35b859a08cdf6c6535b012b999a056d94727c6a7b627cc0817c0af250a9a12394521c22e1cbc0de8b6d5b7659b9e77684b0b5a7e80429e8b91dcde94383d60f40cfcb18676af8b4f14364b481e6bf35aa4a9881fe562dcf29e3773338a0ddca1612ffee44d0813387715f17e6f71d5a537d51b31a0ea5422491d872c20240312861e0cbde6ffb9d7b4827c924a8bd0d2fad6c7bbac398bf29534f4085e61cca31427d275f60ddeeee6eccfbbb97399a16b79c71612d38b771d463a4e989a45d95570bb1cd1fc6c1c4991adbfbfcc1f6a3bddfc8f3e294e0c0423d40ee981e619f3bef73a5c512fee79371476f2702842021b2fe1af73212aabc81902ccb12b3dc77f917837b63e46a4fbfd79a15ae9916636e019f041e93940d9cd23e11242b14b35cc883f00e74e32bfd225e2fe8068935f9c62a05d2ed2980dbfac58ce33841baa622e414d91221469423069cc16334332b8790d2f1f8d55d67693b37602f6d7a3593791fc593eef2f3dd3f5bee9e32373029e57e1bb6c68109f1ac14d5aa0631885487f0c9458403a4eca29e63958a05b514d0f01cda0121d056ef34092ec3245dbf210730a345832701c5060989904d8d886ea88f5ed2bfd364e5e71dcc344fa989b1d6bdaf61e7850b41bfa46cb8d353bb518d0f252ef978ac00524a47429e73b268e785a57fdeb3c48467982dc85746812e87e8b317f4d1d5efba4a7f4fa4562085b263c89b02ce53879ea41d3e94adfe84bc5ce4e5899bd60e82ceb54d854b6af18d11222b72853ee0444faa448467addcf50e8ac20eabd390778d284be42f913fa0903214db65d5be91a586c359f5fa302a17c0b849a97462e1c4c059d1fa37c1df24aac340cb68fda2e205bcb5b07e8a2f69090b5eb1131b47ec91de18c46892f5c1120e39ad33376acd36dbdf55329f7d84637bb3733c58cfdffb672b0b7e5827bf2fe993d9996f8b3d95aed5a5d78dc038e8357a35ddf6b89a426c4079cea6a45c636d252f84e9ce071318da637db7c3d5d4065fd5eda16afcc2e5e979a6e02d579a0956bbccb5f066c4e1ec3cbc32440114d62395bb09007a0ca4c7075e1b8ad99ef3f30751fcde5c60d6ca67f4fdd57cfd224532f776661e4e7fcd438e3d95cc1a0809f7b8cf1b93b281429912f2f390e93f77e454d2f3c07d246f44bccfc112dc49417235136b01325406e0478f03345c29a46ae198a983027cc6cbf83dedfa07106b72cf5664310da475b33e83d775ea00204ab1f7508568837373a1948227317dbeb022a847a84d1ed604027110b348453e46804faab881d5d77d04a381b4edae17cf7746993c11d4688bd820ba37d454cecce08135d3939828e6eb83565bdc9bd948f687b249848d1735c868ec1c6e2111a609140eeb3f4e5397a7ea5303f5226a96614cfa846087ebb340fbba1da160238e0d529e0432a43f0cbe0b23488082aa57d26011d4dee60c1c86cb2f913dc4bda5ad6b63e296a91dea3b01f1d7de5f90e57a5ffdaada7ea54f7cbce7dfc833c29f661a7c286f036ab15f029cb34b235b674c076d2cab35a2c1fc0d85029a4c7193e6e4dc57af7bc9ec76a4fbb058d98ad6547cf3535124d7c08ec5053d505182c377cf6188a57b615941f381b94827473110be73fa56d0b713debe092acf65d8c6187a9e50946026fd2b2c6fb4d86c93e1f3589137e9d2108e48a6ac2708b288cf646645dfdac963b3bb98cb3ef154e41dc3589bff1aab67ef36f6c6f40037f44e36872fb541aa4b6da593a208165e204fb85e00d2df19e2a702c9837883632b3b8212a833249b6bf88bcae0fcddf5504c6f0f0cae6d757f69e9f62d27fc9b97e64c18ad9f7104b1eae5f10001fe128d854d346e7dafd99cf2751b1e734feb741d9b3f5de466992f558ec1bbba510bd03f66063a31e9d09db1ebd715dd434b32d11841e28ade720290bd07fcfe4c9cba4573e8be0c8d13bf9c701ce3df2cba409211d307128da5fef2249efb73f2a841c1848d1292f468317a6d33ddedee96f3b5a9207cf57653dda113df83fe882817ad340a33630ec63fb2247605cd1f78a561088467d85811f9196ad4a5437400acb5a437c511b5d2697e6e19a8bd7ec52ab59cf8eab98e653c178a395e0d9e06c52e5a4a8f90ce8a20d48c86487eb3d88aebcdfebabda8e6116c4bd5d0c0b99c0aaaa722dcd1a148dec8daa6f7a9e1c68ca4ad8cf65482476d1adf034e48b498719b81c63d2f6081d1332f8a972d413167bd6f15f2e537831ad2c2bb91d4c8542cecdc897ae0a2243d3fb69cad050d5f2feeb9bcb8aa42779d4d587492c8d1cb1c64cde26efdfe46ad8c721d3b811b4c94bb5f4943d7215586e5ae25cbf7da8864c0f4cce3b188f46c8070a3f4d85d647ee43978f846b727b6669958ddc2d2dbde34245f0237bf4e90134642f0a4f8b45497d72eef3400ac319b274e05124e7d5477691e2eeb1f816bb04fac5001d37a244b8f5399ad178f54bb3273b305ecd1eac3235c4d14badd69746f1b5c2d6cb4b22a0a90eae1d509f1e033dce8ea2ebc20f7b61cbd1d2456b67fd8834ef11d686a9d7ae02cb257fd49e033434f8e2f70fe77a89fc9b2c3db8779dad755392f10436f449d4115ac6ea2017d7042ac645984f6b607572cdba67bca5851dda193ae56cb24f4e2ef10bd2f5dd56249ffdb2e6e58e54e56e1177ac5df6e40c48536c9b9529b4c988147acbe5d9b636b1fa079db7cab6938ec3d91a6a3d5bdf83cf0172bb69a94750a8a027412de24398586dcb39effade58f7a9cae73d043af4c014f9e6e65ab89fb10252938041b1c7e500d5f37278b9157b62e738f89f9190c27ab6545958ab3da60620bdb64b3157ab3da573f3e54e74bdbec289e6cb180c7982c420b0f91c9f6575e3e56ffd6679b43ea11f47641a1ef4e3f0e5b4dc08bcb7bc2f563d533c3a6e410b1e995de37cd46ddbb8162a7c55c05acc3534c8427ec316a0c8f35aeba4ca68c95b2d6bbc56d26eed8b6b4bf4ac0f49c8b80d02e8c7788b11e4be82f2017b9a4d5165a16aacaedd44b4722fb68e2cf7c320056d1a79fac0b35195599694314455a6a82e0e7483ca7f5663b928a0513fba78ba8bfe9e9400b5e869e231f4b5899036b2e53c33e01da10b00414b52338995c2aecabe431fb52280cc8a425271698d18688df4540ac3ae74591154706daf7443aa43ce175affc97371a29bb82a414dd41e34ac85b788f163d135eba92e83c34e32e5779414f407a5eee74b516df599755331de418269762348b26b9da114035a982a611745bc268404dfbe094dd5d2af8d660cf7dd0359623bab19178d4c204dbc53c5cd665aa90487c3db0976b806d7a1a8f6435c4548f1f0ff0cb08e8d55fbe3a7ba3c8d11e11e554bd30e594e834da34a77864fef16166b4b23cb87ebee32b052b0b6db14c38b4053bd9a35cdcbbee17590f5844998c94ce29fc4b3f0fd8bcc760193b00dd358974725544857d7087a842d4c30d3ad31b3b929df7b890a1e01ab299f26860a576863cb523ffca9e275e1d63b289a9ae7b635315e52fb8192b602d0c895e2176da6c39496b49330eaffd5669b7a6994e57057bdf64da414c09bcb1a021811655d676dbf550fc941d985f5cdef2fe79bbc5fcb57bf866df48914bfabf7b153e373fa98893a99bd11f06b8090f973abe73bee771f336357d74131b090714c8fbc4fe8a7ccd61590fa6cbb7e4e630f58b5f449bb930e92a81292932a769bd83f74b60f344c0590fa1eda0e5ad610ae5720eff714f32a35ff8a8025e8e81ae56e8e083ea3e25b0a6d05d723e3eb5cc20bc319e25cc0250ff602b5fafd8c12452351c5b98d1f69d1b219469bff259bfed1152fbed1cfe1672bbf3924ec250e6081a54212f55ac9d8a954dafa23235699e3993b0a5282a97f6f5e9949c29c548562fa6996de134d16f559a856836a3c698c45261a1fab21d5a68039711aeffe4d80b6f51cb155bd07636ccfbc1a50c09b5d651d8dcdba863d0787c492b98bb4dd07d528d0dbe8c2e0a5ec45b10bcff11f9f2c14a9e586e200b0d0f9be71664fd96aedd47c1c80d0450707952bb49e983d2ec314c052e179a4e67590d5c760f94ccf9773a6c2a1c1eb970757d9754edce90396702e8b7d759fe973bc9e1f1dede3d5e6017f15fa1de3d683dd11d890ad9b7ac6b15258268992755545190a945ee92c8e75196b801bedd3d23c6784e0f4de004841d77b6c546842a362640c99bf5f5e1f658b0427655fc8ef39054b75d371bbd5197333453b53e32ca7031de515343a868d7a57d9cfc287d40637de5ef305fe6d8c98ea5098448d5fa18a3c9cf7885e2f7ad99271d84c0e7c921e72a51e84df96b19878b8fc58d4a0c121a84fce6f8917bea267dddce0035a7f4f1cfe2a4ddd6b7fbd0b74c6aace0c5841b4fb32b8412ad8dbbc82224a7c92756ce85b465a521310ed4ec452ff1c4cf6dc1de33e79fd2bbdf46fdba6a1825ed3c69b0b79e05975426a87294d27fed2a36abd1eb3c3429297863ed128cd1a242d0ea1fb3901378ec23dd2af3952050f95f55d7159c8f2a1697eb89d0395fa0b3157983f67c9eeccd28f95573ad557344c758ac4be75dd8709575cb4ad3d7e4d0ee2966a78ed294a51ce4ad8f2928aa5c2af47e43f41acf6e83bb617f942157e53c1c59bda71b8a0c9602ffb51ba2521dea1362b311369fefa6119421d5f315c45b7ce114bfd0bee5eb1be05d7aabeb650d5bee6060aff5d37fb4343c6d702ec8d5c5703f00c36fe7786d9e6ced24e32d5d6d32f1de7a04b1e453a141aa8d37d190a777eed42057b5afdf6e24246253c53d0985ae98e50b41efea2560f6bc277b7b46b7bc50b32ae34513c15ac7a421785e661213f90947a9f07b78f2bc17c72bb8f4346f1f2f3d545ab05bbb4e2c46296b103629db67e0565dd491053c1d08ce630ad361307625d3d620942136affb3b669601a9e6ae9387bf1bd082a8085cfbc074fa63bfca5ff021981daf5262ce34c31f0f8bb6bc4ca9ba925fce5c87b87e24c9acfecb5342152b836d7043a1d2652db262041fb305be166786ac7b6a70a55eb241c60a1ac6a66df3f6adea0ec0f01f8e175036967721a8d3c21a93d3e86cabee0dbce0336627e14d445b088377253e9c225505a59c8f7a5938ff93f48ed2b71e0731978f5e1c94db228648300de344d056033adfbeb562e74f4a85e815567edd49252c487d2875a86627ac477ee0ae191cfc872ac4657d124cbaef0ed99d192e799adea6b283c1197b8caa676f3bd7f2332fa723c3ec819a1e6bc37dc0d22b30fcab4b6b4ef5f186127d634361ef922f3ad947a052182c2c5561c446f02ce13bda9107ca9c76011cbdfa321e11c0c54e839e5163e4d55f6abf05156e6faf3c54b5a504e2c8c7f9bbc80985e97f3294b3f82f8c801ae0d3d88ef2805ee9ffe5436cbeaf100c1aeaa63094d0398069255749b299a2f51d68c821337ecbfdcd76fe0d8cada36c955299ec0e62a1787fb003f13ec9c4245dfb6db93bc963974ea4b40eab27d97167c31a16d944db2c6297370ae83a9530634fbff97463a6104a10beffea44b1bdb0e04d4e2433d8debf11754f704c2bfdbf5819e3843a5873dd47d92b3c98f0b1b1c549e64fa795eb2bd82718b4a0505ce88de82f85fd344a50c6c4ed90aacffb868d26b2d8b08e3d1385f1dd1a83ad662fe8ff59c05effe8455973041be3c82f320fed45a9c10ce9df969f80934a34428b0fd547ce522733d1828b1ec01530f5f7c92eca5c3882e7490810affa2ad6033a77f094b2c2c087cc4830a441e646bc2f088d749d1293f7008eb6a018f87aae47c3dca437c560cd5e4ec2d94d12551baa96ed3197d7927140180c7210756b940f27a533cf929a3e26be2ccb413ceeba3eccead2292d77d0883be3e747fcd3e1080eeda5bf1889290b791379f7170d8a58e345d86f8eaaa66b01b899bfa9fbefdd501947fef65b0a0f3457e3c43d3feaf8a0f0ca5e900860e3ae1624e0cfdae0443a3bdd9db9bd735db7488c57ac3433616f479a512719ca9b4d747f96ce7a313dfc5af7689269a9f937d6a51ac4800ba406fb9f02d1851e1ee74a39a0849e6ec3a2319011d2ff2840364c2043458a445e68e9023ec414ed5314a4420b12c9729c24bc2746c545f684a3d4b54f1b6ceb9910475f56824ec089531321555579cb5126c293e5f43554a08693d840f9aa42b990f395669f90366e80bcc1ca83a72f086eeb62e1e4654bd2d2332c7f6991a5f20c870e1f4cd6d6e7cd159441b6fb397a6d19944a5472bfb12d5879efafe1c2d1c9bcbdd980ea8052657a97c6b437382559bd63d897fcbc55b4721191e2aca07d4523f528196b2f73f7c1b522312e1154bb31434a9be8488e2e91719e7fe528612699fa466bf0481070935b4a97c6aed7436a23025a36cc86dfc511a38fcbfe7643802c0547458b18089c29ee9aaa64adc3b9f2147f07874cc2379a6a3a00daa57d108eb343f68ad57278bc2088b069ef8ab6befd5d887cfed525425676d2e37110a938d2837ee57481e8025b6b75dafefcea096a5636ee8705e67abfb0e6b67cd49689b4c0b0c8dcc9c6ac8a5147b8265fda2d44700185eb0d70308d7b4b74cf8c1953624c1834bd1a25b3e34d9a233e25baf0a884312baccff3948c6efa57befb9546394cec4ac5a535cafc4e2701b48669c079cc09f6c18f3940fb32375a0068c4aacf3a6838e9768281f139f0a6a3c33ea12d47299a0191c0218a0d6ea5ff9b7d22132b71a31988222e62d16609977e694638cfca7a74a7a7b838176fdd7b25da3f842b16477f79c0e0cac19246535eadf79f432cd708b7f6b2d4152b6ad755c3d3ab58695b803110b51097687838adbc1054816f71fe072865c1b51b201a5cecda2a7e96d72c86068a892682d82f8dd5381378a8de7d492137178805fa52d49e8c57ade085a9aaff01422e6014e46ca1f2940897ba69beaad67df98580cbe891746e86916725b50acbdf3c094f51a7ef36f3bc93e5ca6f0f9852443b63d65ea73d0643f29fbd931f1992329004a2e4a25fcc748bd9d78f707629473689e16baf66173125b590aa8601ea828a771c4915cadf8f4cbee34f8805b2b19586408d262a87241d79bd077dc5a1837c43cec8db90ccd8342f1ad207ed7fa30064ec884997c66c4bb9f99a8dcbb6e389a4e0df5cddd653247c74d5111470a114ca49db0f9fc4cebdd0471cb40c904837528fc8b7fbb9cd2a435c0225769f35c3b5d256906a3de1eb66dc0f19da26cf597f691a628264cdba7775781a15c91cc2d99c6e8c19f51552054c2ddfa1144583a136080a10596879f73fd25927ea794cc5524651ec546b60b66b2da887f67e500cda6a6d9a3468a2ed09cc843eaa4ff76a98d172d365f68f1feda31a6501c1be511949b39618485888b4a6a64c74ce00c4c563cd55276cbdb26875fc7e6f64bd05df738b4f5121fb7bbf5b4e121f1537e8cef0ebd27c022078e246ff8abf5e2ee6ac18226ef4b23f3b8ad16d71837d39657fbfb0fb7a826f7518312680fc692c51c9c8ed5f39195d7703d9089fc8a5dbe7c43fce393c3a4e883df1ff1627594bfc763b9a887b0df4b56a6fc4466fd4091e97652f66e71d372c921c54ce1b438a2873274c87726dd116b1ed8b3f7427ae56561c45d495b709cc6788a1151b66d7641def4e049e11e410b6f2f68c0a2578ae54677d6f92b6c46bca407543bf0b1a3a0425a074fad1dd57e964224128d9d26bb46e28af0fa609b2368d8e5e03842b1675506561bd6b6b2fc3e671d109f7cd08a4af750f4dcc673caf28d355198de4dbbef6cd425cbcaab5ce9f41c3d14c00ba2946b3a807489d2fc983a45d02a970ce68c0d4d624bcce43d230ec88fefde66a444e1585cdafa0910f457bb179845382181d3b39af45a56ad8d2ef47b60648b1def4fb0949473b755d4b149f1490cad60c2aa1e3450611a197e6295c06cb62ad934b12635bb9aea1f2d9c75b4294dfc1cb7c13f3c269a94089b56864c0f5cd7dca2a41f6838c337edf73aa38c751a04964892f6026a3ddd7b6ae647987f6ebbedec81eb195ab4bdce839eb60ebf204a23d68a86edf2bcb558ad9d179e108feb90212ce996e035942656b17bbde6d3dd7a62d721956e50ac983e8314db4a98b6d08cae358af420cd6d9cd332111ed00e31edb1f0fac1033d381039ae064b0c58001e632c100d61ba520e3d9fa6cdc1085f8368f7c64e425cd20c8b999f2ed50dbd25f937160b2c8cf3cfd8cd0cb38adfd112a5647c931bd8c5e6961af86dc29050e241d41e6040648e4ffe2c305a62e194ebc56c07d5cb5902452c24e6b51dff131dcc0708413bf692f5bcdba1765e7e652d7406404337be45f06064a237afef60a245a0b0b18b4d1e3d38a0838b21bae544a694cea0b8b450edccad0913990d70208b47aa9d9e072e6f628911d60c7d1cc2d334ce7c4ef59e0d7e9ce9776adeda1b3284b81f63eab77519ae1850e3c301bb88f5c2167edba0de23687e4046a786f003a318daa0030e3b0701b77e7a619e4ed38c3ef32073aa86f39ad7627ad77dca641bedc82c30c561028ab8f9e878bb572f1a251e7f61957b37ce70125475f0bd93a918a141717e89257e06d3f4d7878ebafca533f06fc06a090a5fa88a06c9d0743344a63664002300d88bde384f32c887e289dc94330137910cbd9185309f2704b0cf676f3797a983ed2b304e3362163c410c0bde7fb9df2da7ad0aad9c412f5109b160ed3826360364951e366af0af2969192bc484c510cfb52182fcf3dba23f84b1296e79bfd2ec2ed17f9e5f67c5cf23349e444c4628586826bb3c30a4a85cc994665c60fe4ab9b12793768152dda96e63c66a2da26a609de8183f918b6c23054edc493db6367014a4a4b8ce141d59d7a0262ffd1f9fe922fd96ca56f0991de9c89c2e5c75c8dbcf8abab122a9b5ba069438b8d7f67dc67bc7d80129ee7a58190ae4ec64a9ce1c8ef9103d26067305cbacf34781e82e4833f56578b94d458c7f860583066fb7baa161ac34ae84050e1362d3266a75216dd0950320916a4eabadafaf607a03a67f7036d9d89813befb2c17aad310f9292245e8c1d424fa54f8a659e185151c624aa1ab681b4bf6682253e6c865bc0580367592b8de3ce06e36979baf6b235ccd58289dbfeac9edc9e875a691fa3fac9c01f3cb66e186b3852d8d17db0c5b5d77e04590dc3780d41ae374da5b2d8cd9816bc6fe7b12cda992c909bca728f56940d595192fc70eef21bd62424adb1c0d53c0af463ee2ffb55e096299df1762fe06831b0abcd761bbd400de9d63bcf546bb8a4f46a278ed0d83bc7cf5b62a32a4ff7a74bf3b8bb04f11647845ff0286df72e96577402adff5bfd311fd2375efbb93f417473db647dfa5b91e22edd03cd45c6e6b4eedf72771583c14abf76224423c68ec4afa163b3d68cfd3be6d7f0f0761440d0146853787dcaafc2704f6173c474ab72f722b97baa0c88ee8e6b83306dac77e9ad97ef48e0b1aba78da77804c3f5732daf419a8d2b8f03dcac178fde284c0e364df1d762870171f60f00e2ff12a5e7386693538545af100f2a877f95e07a04c211ed59ac5a47ad86967f6d9227701da12fb97bf19e44987aa33abb8ced65ff2c4f32e655d0e412ab2a13ae6c1a59a8340cfb1fa6f21af60c6622d33fe1476ce03393920ec9c1f73b6a9aa7d0b9ff9449d1a555c2ea8594a135694318cfa9fa3969548ee88529281b810e2a8750d89c66d9fea5a5754fcdc7acdc20d8c6f18d3155803cd8119598c49b227af420cbe4ef87e2d969140690ff61aeb84c72cc0d413b75f8f3f600af857c7cad4fec5c2c1fb8025e7f9dd828fe32d9e6d038fed7673941ce86f23d0e80f96260db5dcb855bbe50ac64e35c07600c61ea5c2ea9233b4ef747168dbac5bd9d3b03141bd3d0dff787ded833eb7fc0a317c1b96df0d9a7f1beef1b563550a3757e8f7359497767a1714fe475d84eb12efc543943e0f34a5e4014081fab6ba46d43632e6811a7ea2dc5534362f52c924dec782a04339c2eff0d375602c8a8d1c22fc8bc33ad21a9d8c4625aa788a48afd5e1d9872519bc5f738bc8d86de33d0d40db796a1f4d1621597985775cac38edb0ed57e1b4da6232078535c6a41e915d51388598541d039c8bf397565ff99d5320dc911eb5a2a9c009edd759279e4ddaf607c556b8c8fba4bfc22ff8f5d3b33c114bfe175a1e00a1e8a22156a10b5122b0aac48a7853ed79b53dfdfc1f9a6f944ed69e6532d79a9c2f49c3a6c23293acc30cb34c5491cdb70053f916269025a4b21a0a9a50a6e38287e22ca3c7c3c5b96c6e7abfeebd53da937dff53a7be5ae165a29fd1e129113952b8448d1180151ad70063b6778dc68d987d514126a935984be3de7226ecea8c84c1b0e4f1c41d4aa19b056e2783004dca4f1de84988b8d19b5ccf743cdd9a36dcdca643408955cf01fba5410dfba417475011eccc4bd0e39e22557f8c7e8e96413be41ada49ae07eca0113eaf503d7aeb131282a5b52d3a38ddcb0bafa0c6e071f9558e7152a7125573fa9fec36d6ac5a283b101198f2fc29804acedb0b74df22af25c11187c23f293e8bf8be0157aa67f11631a3dfeb4a09a277333b377c9a59f53e0314e62011f5a13890139efe3231456ef9534e5fc65b06d0dc9b8dad416801680ea799753e7c53d49fbbd263e60454cd50a4a3ab8996039c08c2439c2cc7a2d83f98d6d4eb6b9675035253c3ca8b562f527400eb368b1eb7b8b57c9b0661bba415faf2dcead8bc2efff7910d435be4170199a3f692afe733aaf67467d1e1ce1b95039869f0c10e3fd097bdb96fdebc2b4082fff3f650c7c6bf5303d31c06594be78e8b08f11b84e626f99afa8e40d6d3a1ed1fbb551ff29b6ef78c21208766a2a9053da8be49b44d073aeb37f1f84275cfb96eb3f006e01261f83f1c6e4a4f1b151b386d4e8f293301266bc207619415948285179c15a7d68771a323a19f99c731a75ed354a29b81bc2efd08d54afa0b0467f0b53b2213671f5c676fbe4f9e12c1208d42a45daf3ed221f4138dcbd9445a4a373de100e2c6ea8cf48e5fe6310753888332ff25742b5904eacf6c59ea31ff04a8098e07c6a77b1a2c734ec68185f9b50967e36233d5456f0aba8976b7467e311808d2893de92a11c106d1604c9e6367a6bfc62f3db2b27e714ee2ae9c890dab35bb95ee2db93e713b76b66bf6529f79028d27420535a8cb7c30f9242d00276a59ba46cf61ff0e394c67b19c274806b23126b981f9ca5aeae8d23d9935475fcd271e61460c35ff877f36f8e9577b9744614b5923af6e643e7538e7c9e9bdac9dd7d5f05cf6ac97ccacb4565d294955491fff6830f343b0aa8fbfac94a7137d07f1ff63f61c938dd858d86e09ff33fdcfd65291f29b3327c13a8b543f5c9f4f997d7e5f8816e26f109837b4aa9d681b458214cc7d2cd60097363d4f4404d0db18a1afef7385941fa84407fac735f618f2e0b9832dfd9a6953f2f3e287e7f0277228f0dd1fcecf44c7754bef4115f3d112d486bd4a9eeeba46c608171dfc1c6bdaf876f37ab440a351f7a2d6812968b0a28fbc7764760a124c7a80c399c61e8a4680a38c5363be167d8d4c52a8a095221d7fb74ba166549a7f75d03e1e3f2f9bf6a28f20ae1c7abd28df1fe4617f9e11935888f86195bf6d52e2fbcc91f626098639f862c9007eea52272f1ef01e81788c8f83568dd6d29ea4b3b4e8e864d45633ffa9bd335447165e70374abf28c0a5ab18362ffcd2c6cb78c5d3891dee6bb45e63c44a61c206b9c98dc17995cdbb37b4fce041394ded218e71e24467aa6244ec6e5381258f3ab83d5e34e056a54f8745575c1a82dae46f28cc59a96f6d5d186932d9c846f1e181fca04d2788c3d80398c7bce8c1e0028628426d479606c8c3341427f808ac03cf8b9eabdb18dc6a3629f12479a8b1351aa83db5f06a185282a6d77dd959dd1f84284b628d8738bfb805f61884a130dcd29b70d454f6bfec8139514f108947ed5e99dc4c10ea545c3ab1568638b185d228bcdc198c0122cc33351be34d0e8d39eeb1bcd8e99ec5b334e6a54bf49bd57c34d26f715546ca12fc4dbb907acf26a01e3aafc7ae8add836f1f18564a4277423752acd92b01a97c970c0815c850b265f626c50dbbbb451c833e226e462bed8018fea1243b0758cb618e935c9dac429c4b6fd1c991b512add5aadfc08bcfe2859a4575e6a33d60fa2a306f83de1cb1c9711f22ed96812fb604d66f15f781049e0ea7c3ff932c3717a400f68893f931991c87315deec44472dfb9a70b8880f50911bf2b4c90f63db4f613caa14f7137c2197e0dab8e71e523531ea1b8b9b52b31c6d190a8f3216eeebd695a3371866de5e01ebb4f0ef1287736482948d87dbe3b9b8d7e16d9f421685de541254d18f8193cff547823be9eab76260a8e4dbd6b407902553605c5fc90d530bbdf03c6b664ce0c3b8b8246f12c1f5c855718b92e9ffb5823a930c1dff97f931222bb699fe5b7f5f3c0550f094a6e343b1c21f6cd7e613e747de2c33656e9b99e9addfdc13826236d1a8a0a826e53eb3ab65ac13f14b82cc28a6fb60e57840252a2ced0b8ac653aab069c8e18dc1d8c7d3d636b620051596fe1285fa038eb83d53784c8c2e7f5ceb4ecefbce16667ee223ec3f12d0766587904068d1ce8b1d1924477608d49a2343502253e380099228d6e5f3178fa241ec7439878b68873da242458b12d2afabc01a24e00d2b7032ff48e4d8be3f94e6b457d01786735ef69d5955e3e7e0cbbd452b2040573fa57550764c481fcc00a2d90e34453c186cc992e7cba96af5f6837ee45f272d8142965e169657c8d4886013575ca4ee60dc8cd5acaca72986750176d5ba09b8f8bcd6690f07072434e731314c9ebe587df9e4618913a963ba1dc81ded8f8788ebd6583396dd2896f71b290babb726e37210ae87b22ad59fc88eaeaa5dfac2f61973452c0ef28fb95b78dfbbd1ea18b685c2e148826ad59580406d8e6d645222a86e9a77182a98f984156d8cafbee8f0c1f7e6549c53e1760883a7434fe330732b5ff8b120b926bffa7eb70dce3cb7e5b5d297122c76329ff1c59e0f76f1c290109df64f2ed152de0c875914d35e29820d460a270deee4563eb31331ff35f81aa305bcdfacd0ee179488df82cf2f6e99b738a87adc52036ada43cc66df9f53d30c2e4c38185ac7ca8f22210ad5cfcbbf8043bd7eba40a941f9db420db154d49a4f90452027949152365ffd30b34498c253c9f8bec98b76a743d65533ca035382eb403057978411d2f306f0680024d84986f70c5f19e510bf1af8624cc562fbf8f19654956e87539e4a0fd03297a6652b8718e85f07409bc435f07ba581b3e6deac2577cb5075299b0450fb8a2a52df40d3bca914e56a952cdf34642763b5fd927d60344c97d0d239267dc9f0af7af377f4ceb34f8018a1b6d23dada58647840dd7798a3a3dedf2742c6463b2102fba898223c7db92944148a4410f797020a6b0fd220a6e9435ffc833c6bc08570e5dd6f209bc1f146a9f5676fa632cf2b688786768c73a98b5221892e7c98a362a5aa0e01077d0f1986e04a17debe6de4d2cda2d924073f5a28d3930ff74204f2f7a6247e0fe724799cac9e2999423201dee3560ff984e3567395eedf410afbef870c081b3f69ecc5820f243a1bc0a55ca33634a82523ab2a7cac85fa396ea612077b042bcae1d97ffb53b3d42f209fbd82db4e19b75a56e5a1795b10f50ccfe27ab95d9b7d567563d29bf98d77ec0be3b150e1f854eabdfe31f3a5931720cc5c36ef288df0eb6e1ef3d1f358dc50cecfa1337deb0644c1bc7157f9e4d81790c216ed2bc8ec205de759360e0426d2ca19bd1f40d8404fc7fe839cdf4d5ebaa96311ed886563b176f24510da00e0f37bf4347c3f81d1e3403e2a63af4f39e421d2878655e27f66436b1b6956d66f5c1c980e7ea70683b0b618d75d046e17f45a9c40c89ae326d6e4e3d777250b30d8cb9575ca91fcd1986c794d563548e8e26ade456fa38f1e31a08acdc1a5ec4ff70499cdb4a424f3d07bc82f8ab988876c450dc7d71567d6494e9432027de0a1bd69abb80779aac0a0023d94b512eafad00fb8675d76c3ee9c8c90738fa1332b28b3a98dfc6a9140d6e866a9b5c094ce0810735f289be88b4649ef5ae85f0281d028654c57edfa07e19b83cbcfd8c0665c1067a98f3d91daafa532adfc9a2605f2b888ce8555e5d07524ab09a7f776585be38b115fece886826c55e4a14b05eb2386baae5ffdab87f9be6aab9f8393817a578db5caee814524ac8ee31f4e180c412b1a00bb070d79f8cd0af4e10490b171471dce95fe22bd0687d817eb887add354e22cc9ebda28eb46d3c3a55e58837e7c667ea163872c25206bfdd430c8e16407b469f733599aa41da0d740b975aa85396c79a36b12004840aff812081264665ebdf4ef952f0d5f0652ba0afb1c1ded521b2e7e956853bfc73703c843873702cf3acb865ca2d4b552f0ddb9032d7aefdfe5bf611d9ab991a17d75970aff442af992252c2e86743ca1d123a4c932e181a6f6b0dd0cd2a6ae4a052f42fc00af0f39f784318555cc2e66940835da89ca82b499860262c5c280db21aa63d9e240453216c37f58567d5925b28b40800663505373f4e3e82f26362708404b297e82b60829ea7763fad2b6db995b3b71e553410755569914133583eff8a67476050ce9b0918c1a3b04555162f4e99b9901e8a3d23822a65b98bb0457525d6c3ca39236e496cb65d2a6edc6d7079e27ef890a52d6fadc8549e4f2f0b1ccd4641e8719cc374c967e9aeec3381e6a5c49b47d28400e8e219eccffaf9eb87cc7f0a4bea66b6234288f20be424bec669cccfa353e6b8f954c2d18a61686729478e4d624ca4e1f8d4b6b4bdf6c6dac58736be833f7f62cf269598f4c8bb6558e009c408ff1bfc54df5b5ac651caa173022681b78c6b96b885800c000270c127c71717ce89675f7964df5c4cf73d8880fcda0bae180b95b8f8ba78ab81080bb02986d687f54b9308f4d781403412024bb5c463520e374f0a50ced14d8fbb62994352a5d7321df8e9084e03ae4d133fe65df1cab9fec986540e73c16fc85eff14b8bf0d52321357ef5312b75102b6140e65498b8e26e3dcc9c0aa005b02f29a133fc2756d8e58a9997899270939aa3ff864bf21173eaad4973468bcd978998264872f071affcc552551403f7d4dc35082530a3845ce2c93af2f6a57a96fb08158ac441a92fd0147ee3599b4b52a8ed5d34b37c6a91d08daa03975fb029337a2eea6389faee05c5b88fce987497be060f7d85d597a7bfae8eb961815f51b84899bd3d7bfe9d4bca6e42a2ab070c2b8e448c42b5cf046c4c5a9162a5ffd6f5ac25e747071836ede71345ece6ba62ac8646642073a0f08bb9d6705b26ba2113299f5b3328de374e808c4c231ed6674380e8f9e7942d45d20c5d1b6fce5dc7200db0232e36e5e9ad731df68b71701910337448b3598e4f1bb87b17c0e646245bd780c66e53c53c24171079c8ff68dbf714b1ea77a74df5ad845b8405a2e8f3786a9c84ea76b4a16a0aa9129558ca734de2b48d8d7703eda6683431149745f1537b23ef35cc70f49d9564de93e123106af9c3ee0344331a32b9738a96d6caae183987d3432e57556818654c7c90875b4e3e542a3538cec861425f9f70d7207e143a8c613200bfa003bee8e12d8f820403ed8622c07a98a23bbba8c7e5c3560695d0706b43e4d565acd2dfaf1bc6ea0dcd531b47ab06716f38462886fbdb554abbc3b36a3a702f50be081250f0f45e84e396d697fc99c3fa03f1677d9bf209e85939c61aa2164e5f1ad6a112ed3ad3a9f5c1cbbe7e1d1431046f626eb8216e0df5d5861ab954d503c561399f64505d8e27c8bc41b285930deab696656759e08907b84271dc1fcaae406ad0f0945d2afac4eeaf4ff6d8d39acd46597ae10ae35c312fee3c12c2f693cd7a5b1a241c73970aef0049f934caa7fc6038e582017bb04aa005f807cdade9d333896377a4f6d79990f556f673cd5ba8fd25459f06ef0de9b23f8779866fc2523fb42ce5673834aaeae244351e321ea1575e63b1b54011e274fd2912ca510d5992f12a113910992c14336846423c9c545e0cb69662fd491539ab3a1179b7f626566887f1fde2f02c88498e11b45be6d882429331aea444616d6f05fe69e131eba54756facd874be112855293f9591dd4e01c13200ee62763d667249591a0c8c5083a47f9f11fc1051dcdf44b36413bad20dcace31e87bc110d8e4864750f96c74004314faa7f873306c7c72372981939980df20c902d103f516bfb15db4f8587ea4775a711f6d17fe1bce6287f26328a7157a479f7df716b71e893323d31a73fa3484362ba3d812058ec00618f0bdf704bea16e42acdaeeaf07240762e78fe6ffc403140e8ecfa5d8c474b41feaac6bcbbd8911a99d69f0d88920ebe6906daa9ad2b0b5ea646fabe8b7ab68d7aa78c5587856e528b147aea1254d195b73a438e8d9aa52c703b05a826e40616686c239f4c0c7a1d82e85c41e7888788a86f77950bbc648f5623cf398207594cf4414fc8a57410be66b9b0d16b5afb11784353f57ec8f0ecd0cb0bf67f00f5be2ecee70ebe8f37baa89e8e0343ce4e41fad81c02d1885de06ffaf5df005f3e4de1388258436542f7ecafaf63e9c4f97d19e9994dcdaf3a347d683b496a5f1049833c75920824e601609d72e7bfe588933be73ad223125807a1c4c3230b03d4827661db03c70297effaab48b5803a544831c6880f0847fe8d01205cc72729c95e4912972e638baf16a01f08e3072751baff13ba40b8da7c251b8d288e0956ce7cf7d9a64718987a08df758bb73e0c125534b6577e37b19343a76a894f314edc019295de2a5d7ce5b273a2a2cffdf42b5fce22740131570444906e03911919bec9a9401f8d92b2419801573d2269ec4a472135f18d41eb85d4b84acd905eaaf42ed2facab34baebb8f4ecd09792bc060d8519a995c297ce6e7f06a45c79f979f22000a6b7aa49523ef24342e1348d4adf89dd134da3016284876cccacbd1bdeb86baf60d11c3e657bd33823f550328a253818bd1bd9b337ca10bdbb8ba7eedbb6982186644dd783ad483aefc95f9b44e14a8bff30b486f8dcf5478905b35b73ed3960fe80ace4387aceb85a58cbfbebc25bf2b59d4f884b897fa02bec12f366ebe3b6d8270ddd84b2177616a59ddfaab6144c1684e17a0b38ba5757884ef094d965fd9f40a0426217d0a3ac9bef3aa56da35a5e79db79ac2e8fed2149114e3543f5bb771c5238ac0f0a8a98f9427a25bb89d034d03be3a46f43f012abd5be2ddfbca241e1d95a7b6042541495fe9ca5b0ea66975b678a1329a6df45c69480ea624cfd98c2edaf7ffa0e0e9fc6f13cce92198385839aedbf0b26df063dd8858cd5058357a3fdd73d92671f6cb42120189a5b0a3c22f92c24559bf74fcd680915b49ba931b25d2fee7fb0096eff0d54c49f987b6974f03750badc7ca6a9ffc98ea2ee085b4d03d2f3a87c70b8d75bda3f1012c7644f109edf127933ddb188286da56755660be62e51901630e68365c61df166e12f4b15f123374c070f671c3f8d77d8fdff42362ba44e28b2a2bb5ceb783589252d9df4b462ee7761fbf89ebbde28b92531e5f2ce875f9f69f0ee03102d5667fc192ce0c0c6153ccfa74a0d07020004f795bb9e8b0cffa641b881ad2c21553fcaf25378fab1377c1ad70fdee9f7610d954d6b3a9a85b68a65c7bdf7a7c31b63c79e3de8d4ec4b4f042e851076f35f4a7daf9ff53060a67db0ee68dcd165e40617aaa263e0a3225880fa2af34d99e0228f830d48d8a0f57dd879ca9c6a8e72d4c0ac805191e7b5b58e727c9aebc18de18089e525063d8a97691a95f126aa45df64ad779bae24084624ea4c70c16806f8252c6ebc0194eafa2bafb2e6a9beeb69cf1d3aac572388d4e07ae8ecba63a20e7fd2ed0c80e8d5487852e4d23063b9895ace40abdfaa5ad1ec7ec6d0fd634529f01df9599fbe6f0507ba940492610cb5ef0e389e5b6bc4b9cb82bd8ff18b9bc9cfbc90b96756bac0acd7cf0dab4b80fe210e3d9a22038bb651acefe164581d2f1e788af1b23a285b51f6fb2ebe0921689e6cef8729ad4e4cbd52abe3ff192cd852bd18d5d5b449bf278df0204d98f005d1f4fffdaefbaab926874fd5a68a7baceb8055a0a9853af2b5e7f89b773e1445a7b640da29c1d559b522d32adaf279f11e0b4d3f8848c67d866e2ca3a56ff34562d5c6cb8e6c98a7c6e7cea4453f7f21864a912fea9df4f0042435907ba285a2157546ba82a2230d111c603e9734e77057aec8cff5607e9cecd777311d7b6fb610b29395a88d8343ae8ae9403a3e11b66eef1208c7a9b0965c88cd2dd014503fa9924fe7711551baa91121c8439ab50dd62060a6bfa0624349f5b288de67c31f834148c54205958fbe7eeb304fedcc30368f3a2db8f3de98d824040725369088642dc9efc76976e3a35e1cb88e8c90b1b5fcc2a968cd044db3f1bd2eec83e5b3207808f6b46b69fd5b1068a90dbc7a526a976edbdf4ef7dfad9258e6650ee9613d2783d4f1555d6a34cc124020373e55df4a54a1d07cadeb48ca6e15eeaa1cd7cdb5b58f249d387565835c833d6c631315ce9d1e518683d3e7079470682bb08ec905940f55cef9866ca9d04ec96d0e74cd6ffaefb7e72c41175ef9980ed6728b276b5836a5521a3a40b95ba01208c22f0815c4713f55b86f4abc4df1972ab0895d9ce760aec41217fdd128dd53623e39ccaa7de8fd1021f8c0d0875c79b9a24c9c158a1f977896b502e86f5d9b9be3d9f835ea45c0647335113d701f1acf3ca5386d3956e2e5cdf164d427c92fac5bf8d4dcc06181ca10f5d31f6975df6d61177c514c698f8bb265111941b19799cea142fbb0aa30847e3f4b6470a43063ec0afb4182fef43b3fbe0d9144b25cc76ed16d705576e77652dfbe5ddc3f4d1f04c0dbfbada9bcb249d20d4883ef71ded4224838fe3a1a8d5f02192cf168c17c9b02dbb99a855bbbdad6c2fe92e8c94951d472502ba86f34f6269d2bdf7fb9782866069a1423bbc21be0e0f9b77779412edc9fd792f39dde4f180fa59ec5bbbd6a415926a74e6b6a257f69e98faf0dfb09a481bb7803108d49ad83cdb4ab8cb50284588d4320748a3f10b76aed035ded60ef4f980946f631756b80f96d085d5dbb0197707104ff23fdcfc97b6520a268c366e9925c37f5e1144caac44f892eb066daaf4f96dc34878ae3d552eef850b33a387fd2ca8b3fc806e016da4918dfc67afe6dcaf676d7f91cc2ce39fd8ae28be303674c7724569723c33ab0feda60e9e6727a9503c8a9b793816b2cc6e47925aaf44ce9d68bc304c19b8c88272aa99303cef0383499773d2c26c623190bcec8e1c052e59095b05db412537809efc2a963c98f83d0e8d42bd72645429697d96bed4f5f71b070bfeca4cee32fe312d6f1ba695cb310af3deaf34aa3a9c9a3f63ecf28cbdbda0f11db6d021423f7cd6cf0501d5edb0fbc18d799a3d6e5c79be9258fbdd2f4a85b8b45d67277bcfee7971822748adfc79a8400b0ab98ccb67dc23d01c682aa58dc0d19563b9b13c64a4cbb2d749c533bc8119cd7e1d15d9ed8b527a32f107125e44ec10c9931d383a2aa803375b86324167b7e2137d77e2e06254cf4d100f003b7be0c64cd3838a54533b65d8c67331dc73be9c2a53a3300df64e1fb4bd5a55e76015d311f71d4d783e52c484d40cd7dfe7b52e1a53055811d9f556cc9a96ec3b3c2184a7c71c42107ff2e634862bf450a990c2cdc27d448af833d69d742219cb58e03fef3bad1d92842c7f17d4d1ffa274b6d6c5f54e6947f5dba6439759696c2ecf83dcb7dadcecc5999436ffcbcf3eb382f8754abd99c5fcd0cd0ca4dfb782b0efcaedc4499b8fecc6fa19f76ea8bf55ac7f908e066b769bf64cf46dbcac8313daa5e6740d085c73657a2310e54855b8d1c50d3e09f9d3f68649847822d2ffb8146bf9d18cf27aa0680252a4544f5ea4ee9e82d8684c454ec4ab5684a4424385241ecbaba8fec6601b3da579f3a5b9041ed3149ef088fcd023ff2287e5d21dc38a6fa626e279addd88248a1a8e700b6c34860ad3fb2dde52a3e5c2e7ee5c4b1f5add2e3014a75384a71e415c7094da900f0bf510afa5e83146eff282f5135b34765dc6626cf82dbccdd01fcf0b314845047f7f7275455c95975ee2dddb15581f9bbdcf7e2c4bbc02f0364528888e79e250ba29f699f56e2d2c5fd33a82dfc93b4d4b67f32dd658d8f8a8b4b9667af025401873ab37ec065373f6b06c6a4848796765eb57c3c97105a904dcb22c0373b2e13a3cae7252214d5cdcd195bceffe9271c0fb829f80f8e34720bed8b06f0bc5cae24c006a2a798caed92690a56575eca27da6d5b48aebe75650aab3998dee2f02b57055b3293b18b3bb0e7c3951abaf2ab9f9d397a98db351fce0315368369c9c70101559bca2d32bae74abfcb76ab3fa01d4f248745d6fd7bbfbe2707b8b1c34a50bfa593ddae764934aae3c64394154fb7cc7b48ee7b198cb84b9e66b4e76881b0602ab6db0fb288008fcb0f8f671dd2299ea436e7d6cfcef2faa5471ea8314f2e64c18126fcdc2c1a6d62a3152b426bf890c64e0228f8e8b83f47821699eb57f3ee3c2d5e4017990f3ff9f6c637c4cee2f3bd0fe04b57f4c7955224f29ed988dd3d34d5f830af4bb40202e92331da636cba092648f7555f14e42b4913edbe1dc91a34b3aaa699e05bd6041e278cd54721a257806b95152a235ff15b74b7cab5ee3f5641ce8c28455451e98f79e19d92128f4727bc60b04599a378a7283d04b89cbf6ed9294bf024a9d11d27d1752b7d3d9908b6281be91143e1746e34dfb5e52c0e7c9c9cf5381e9962bb529c682d2155459a8579d2df222c64a1e588e8b374fb2c3de7875bf98872469efa1ebeb842fd653e7c34c034383e4baf37b84f955db8d64475d12624be6a09c91967e86739544031126d1aba7f687d5963797fc243889157eef7056767d38ceb959ba0900846e961cb6c17e321132a1bef4f543acbbd19968d9a46a858d803c9b56a1b97a11dfd15054acf9e21ffd02194549edc0e596fab97619bd11b02ff386bfaf2727d90f8557a8836de22150a6708429531223ac4b23a47bcecc79f863002e60d7414c44a12e20835d7d0a2b1ced3b8a4d1adde9283df3b26ece2b496ea7fcbceef82ae4c8b471d53d27c3379d9bf6e94cab8a199f2c446bb4b401923301187473f4c65b332bd0eacab40c7b40cb3028c3a29584699b6562eaedd4cf4df7931d70088d8b47f52ec3cf0fe91211ff918a961417a518a00e6b13099e75df9deadc374cbbb1f79515f93fe955750e77f3ce65a632c656d7795c6646da182740dbdd9d4886a8bdbd7e98a33c6d9c170d13d14059247ecadfa7f422e2a1eb90d87c6275850fcc1ab98e0fa314467bcd584f887ff6cb74a073a3f6d5185aa21a420592172ba8d38c637b4a76313bde9546861f699772a4ba031853bffcfddefa7143973d96caaddbc2e0b78dd68685b3f180fdb593899268ee654ee2ce181739cf87f729eb216b97ec9fe9115b3f73cab6903bec51e853a4c709157c31fe17512a9b1b2810a4cee28fb06db90647455b21804d56505e8e24a5ce4912099b39d2ac9d1a14889dc9c285b3213e160da9dca70aee54a1f08cfc29076e487b8fc4d26f410ca7f10fa26eb4f8f770924cc341bee06047618d27dcbab018c4f6317590dc2f786c6f26ddb5750fa2fc723f407c9e1cff0d4fcbefa809ef5a2c95cca6f1aa722f8817422442a5eed83c50a107cdc5b6dbb294d49a68c7d8d9bb8ea282dae884ce972b11f83933de4a2a616a93b632c8134a9e4ece49eeb76ed87b52b6f1d4dead012ac29b275c196e3590840581279c6ba47f952797fa28f2026458482f272bb2a43aab3cacf8f09a199c9827eb42da0baf64e805baaf54c3435e33c5ed51a9a0bb30bb27c54729ae5b3eb01ea1ecaaa4033ba6a5a40d01e92324234bc9c93cc122456519375ca11af18d1e8ebd8aff511eb55237664cfdb6b06e2b78165d5300d52690e5997d66870507d69511b5bdbdcded440712730ad4534492c81b8125f2e09eb64ae7d4b6b2f64a74f849406b3e522d8125b8df23c2584b957d0056bd8a434a8c7835ec2e69663834d9a8310a459e197dc72b1f86131e47786474c7c92952a921da17390366b15fe5758eaad8e686ab05861a08990b312f3861f9f7c42324eab29225ba6c749d92d06900261fb8e8bafe86be2f3c9f7d9554b46617d7c508cc9732007ead2c2900a77ab0f6248a4f762883f14a1afb204b83c6b96ea9288c703647ac9532844a05d65fd8d1896d02939a080874b83eb6659a1466e65784514cb76fc1668a3edd3c904df4a70c20225df62a88ee3d87e3041d048a9afc8e3bf177d24f08df53b4dc52b52cfef6b8a2db97a2c221620f024dd8b00e8d0fe8b184992c415264e3bc0cefe58a197c82cc8774bebb208966ef549557409211d45ed77435878d9aa9e04cf1a49c0129ab5193af434bbba02771b81eaaa30effdf8aa2b1c30045dd21178fc01fc61d95092966a7c46242dc95a74f7c6bc1300fb12449682b1c8784a27dfafca70a5ce3ce29d895200f55e951231a6599f7dcd51e88ee371395116feb85fd5878319e0165aa4340db5a57f4fd9dcbe36e2858dc9189cd63768e229f233d05cc6a3811056d762715fdef396611bdc116de19c19871e91c05211614d8e70e7af4ee5ac60fb7a4a57baca79325a2f3a21efd3b1037119a569f2b2a1b7df13a16d7b8ed87813fa21a23650dfe236232ab1d0e47fa7c6fd59b1e649058b682db18b7d353e8c77822f1eea0da354c25c6a2e940e53fa6a1ca9bbac79476b8ad29dbca431b24dad9a1c01fac11a66b10282c01f9ce2dc07e6625d301791876a41c7720e33938eee1f2cd3349459ce5dafe893b175196de86a5031061433627af8dbc1cff509b93ff459dd8c63c7b3ab859343a8a1e4245ca369111b280e5f7100b96e929ad67a698223ecfc7d124feb49b470afb27b31919292a6281b54c1d66aff154c246177b20e3fb996289abb77b7df552e71a7d711d91786b776c71cb5969fe045cbc3a1db66b8c129b00a0a2ff0468a08f440e8df380e9975de6b6fe22fcf2946b50da3f5bbd341940bfebae69bede194b786cf4312e0196b4c564a8a557beffe5c7135702b4957c6fd3b6c5f8cc5f726f9b28a4800b14229d826f76063de2d303c5106aff81a9fcc3f9a5723a6746df5775d0a5244c560c71e3995c8746b753417dffc25571e6b4d7a4a4d9b25c3d25ccb9eeb1dd275803d89f96592622a0f2da2b215fbc4ef7343b0d1758edd3428f2557496c9e84d4553c45b31cdf51fb8ef3a21e9aadea61d75ee11c7600babd358e19c668f692b5acd6039a95eb45209a949c41b83e98e0ba0303a4a7536bdd8bccde9254c2d35f482281587c90eabebfe2180c69f263c2deadddd79cb04913b10b3123a850d2108c99cb354401bcfc09b4a2a6acc7820504e8d3c664ccea15355104a2436829aa5191ecbe8ac465f03b310c812e89d5289c8caeb9f883363b1cd5c968bc7ec5339185d0abd704508d4ebfd3ec0ddff1905b598344caf25e0a10a458e0fecb31f5164a7853219aded9402e30812ca5ec2516ff95f8470a27c11ddb273f1f1ffd2d148b8ab10a51694b965fd13330da0ab97b966fc7dca5bc3fc65321227f680b849e899b268e1f68cd44f68173308167fe59b9f6274866dd855b18897f99cd4632062d73ab45c266e4e57e56af7baedf9a0da8378c0b73a9feb83ec0b86436700e2b50d40497b914a3dd1ac1bee237873d274f2cd8318090710d8b2865e2d45009e5738d0c5d2554b8e5693626997e07ca1dfdcd4a2ee6107b4c63069536813b158b816b09f1f4075bb3354e324b7ba3fe40b46649ad617a703e2b871aaaed42dd0375b5f83fb38c663fe230d5c161c690917754fcc3f7d55d68426ba9ed048868986acd011dbf77c2871d44706a745d61e40fe09faea4308a80a861e0d2343642b778b79b64a3a3b8eb8bd00994c4a47f6fb6d8b4a9d7422ad2884a362bdfdc2a4f01b0a8678f75c2c241d0e1929cb2b10a8d617a2919cd5786c23ff821739d0162856ddce93b59b26427293e61c4b3ea43fe1342425d1925cbef2980daefc1802f90865b444d9eb8d8e24b8de8ce470101cbe902236d3333317277b70c3eaf55647fbfa1cbd9c36910e50edef86830dabbea00857c729fe9385e30c915b63ba9944b61d84340528475d744312deddbcc5c3d9c58c48f35857891d627033db33599492b851305250564747b8370267bd3e0bf8051f9d6ae671b05b96fb18eb964fc76a605198ec749ea3997a23a8f80412022d76c4c4fc6eb29e8611dfeab18cb78203065849fa3519fb9272dad316e822bebf4814639529b2f9119e71c02c56a0a9fc69824b0cdd12f78b5f605a85208717f7f4d05e8f30e181131e04257c17fc12069e1cdc43e6d30b52862c766980b3826f7d5ba0db3d60b3c384d6e35b264b7ceaed3c41b820f3fc9f51a973a104ca637042b627967a4431a0c458ef1e32872a37dbb6b23613245b59ee60dcb93ff7db3456a991a2ba4f04707247d724cc7e57eff495ef824c9b07d81f759f61682aadc596d1337a6c7ff703e586ba78ff0972c243b506c877c7d6217723dfe3317ac28d86d6c583ba1b8ca2d7b640afc5136771efc549dd24ac18d079390790f433fc869a4e501d9d26e43072ede649152755362e5e8f36306eb488425f1bfe0b13319b469c048e63daf143a838bd978886ca84d53fae5da8b62004888554093b8ec38b13b18499927cb8d5f11cc0ae7d8203938562becdd30d772b2313cb6086a207ae7f8ed1a2894ea0c9835249e3765e8e9ff1ae2e61d19007ce2674b8ac9ae80d4e22d178b0778aa1c22ff60d398aba0c7f8e816ae46c8b4b6af2dce2a216a0ad38a1471c03a73b0e00c4ae9b0fd92dd3f52bf932cc563607f3f805969775f6eee094330b5dfcdd564f54dd617021ad4c7b014707d2779fbfa1524d1a1fdc0c740921735d1bdd6959e86b7f8f5c2700c07aa2082f97b7c82f0eb49fc76bd847137dc682f1336af664287838fb926a987e81068468e758523b7a18de59c689fd69fdf947e52e5ea3dfc103637f067fd74d65a13b62b2ab6dfe16c747c92ab8b0a8665f48179bc5121ccd844d789a38297f9bfdc98fdf596125f43a59afab98208ec98a22b0c5dceada69bbf869283cdf5e33558fe10f282e864e7a16ca7de4873385918945f37c0e3845515567ca82946407ab7a239a01f65bc79df95484dcfa154511bd4a91e887a9bf71eaa6786c80eed0d9436cab42b7f00e498f0c060202aaf45b7ffe51fb705575702eb14106ef532656db79e736978672c12631e7e852349ae64151e981ffc85450eef34f50a4d63d681e4e574d81af0a079b09df41a91d8689714bccfd5c269c4f3e03dc206d8bbdf4f2ce258c559c812a1f8ca62630f15e3d7e7ab56cfd9f0dba33b493fedbc48171a8afca332edeb4143eb672b6fdbbe1eb0d1b92485cc8e5093cf9d77498e90a550f4dca930fe48e2d4fa295984300b0d83a783566749f8bc6c76996d873bebbf7743b2d428ca6f8e59375895183e7dc6e3cdb86c9f31d3868f63816d1744fe4ccd7f2b888911511e5b2a01da6df072915323e595a18d9fa15b31d6630f2cc6b6510987c9761ef65df12be3e4d712ec51cb0975a70cf8d432fdcff6183122e3bc842a1c9253e05868a47bb43e9ea05d7cd99821198191872d5602f677871862a4510d9b348437ab4eec4fe20caad5c144d89a60de9ed5abfa6636c5a799036aa111b7a77f44539e41db5f1e006cd56062d5b3fb3a0edf50891bf37f9a10f1eabbb05065460ec8b0136173b66fe29c6bd76418950afcdb9814b0a7d1ae8b057a89fedd4a204ab93f44ef58f6b7260ee41eddd1300b0cb62dc4d857938c0e591c2eb4d2c7a48de422764dcc64412da353f2cc349329ebf861d5c390c1e5c1d6ec78f5a24eb96a44828737380bddac2f4176011d0168fc5b9861c73d207cb15c5d607c4de42b3ce87953acf7cdc37ef59860961ed24e50d300c48fba749249c50d3875e6ace1ff62c6a7c467c812f3ac9a8b011edb9841b6928fb903f7474b156c7a40c87f548a302c4123812918d77259c33364cdde0dd44ce35b3fd95b450b0177ca8884371c2d507b685301125eca14001f80d320f2c6fd0bfe21f8fe14711e7c86799b311431fd06bec4e396f540af56835ada3e0292ccc2e922aa196a0b94506dbbffce5c8f91d8a77b7aec0e7129df9df2044ab4def4c947a17c6aaa4ba2e2a91ffb7b80a8194a81f45708c68163d773097a59fd537a544204c9ef165735ebb80ecfac349c679e697f30800ac369c22a35b9f27e1dae1b856026e73dd2e5f9902568302f7851541e53117da565e729463f62dc941480a7e3c243011cac96e3e7dc91fea085134ac1d5b2bf7d0bef9bb53659b631eb051c5e7bc633ffb7cf800f52ac2e42c180cc6e0c9823305cbf1030a893ab9b01761e8f548efe59453332b7ebfb9ed90fe60fe08b99f3daeda81c8decaffb63a7a938c48c2a79d0baf7f2d98ce322be4bd20e2ef7786544c819d316c522d25706e5da9c6fb1b276538064bf4a82498059d3033b3df4fc7357ac96cb6807457b0b7dad7a72468faf09b046604a630982eeeadfbd5a755e8903877944a5e5acd74eb0a56c2ef510929b6f26c1c770ac70422d5cfbf786b6a72d0a4140decec58a0617c3283f9e8e0b6f8787fa3198672d6622d853e4e04fcb92c2e397fe8800f404d54479f71fe912e2130fcb546ea5de439cfdfae3a23db903792f69f2058a05408228500410a9a677211964fa89274bb5fdc27fbf878dddca14fdd3b5f244aa1c6763476f3520dba193399ab2c77470e6f118789cd33c28df18e7abc01da063a5026e8e042f7f2c58418edd6ba4ded575bb104bf525c1a1fe384c230587c8fbc445ecf60f3f6ad9a52537a3f4a18d28515347199f73555488c2dd9581bf10132957e33358bb4e43958a9bb9cb11cc010eae25e53edd59be7eabd2d19d0771f37043776675fb461b0c3e9023fc5f5afcfe2f6c4242d81f7e1b8cb8f5278758a7095886173f90a58bb530714999c8af210317d0d3718acbebf947d970f93658641d87b4c3d252bc54f4f74f09a9927f3f526b709ed7c524e6b4662fcb565c1966c6a88dae371a82e7d750284099977f93fa1e5670a61a67dcb967aa12bf0ac16c7cd96c6dff5608bbe052b46c4b3270ab58e9f1b44466cb980c8911babc7dcf1d44b8eab7f714c434b5a43fb83ad99fbd0c2b79a5735b30ac96515cee054facd55619fc3e6e55835609391f72f5b3d1488c3640e290e0e62db6afafd29517ba4fbe3911442dcdbd6e44caadfbf32d0a2b011cac2fd9ea478892ea98386f931314ef50f4fe6b1c1df78d8235ad63ac096ab3f98787cb15c0b0134c9b2f6c3ce098d9b3e4e25c4769de395780771ec86b29550abc984eac8e98fc14c79823cf62f88bfba5e904089d8f7a599a57cc3392ccc3e505c076bc3f016003739de9fc5ae22f9a43e91a275283c26058722ee78cc55d55da98978a6709ffed7be0517eb6676e307f36df44b00ecab680db1d10de554ee0ad43a507ae6bf14b72236d9bf45ac77692b8f96ea212b6db23cacb6b6151547d52a31af693d5006718bc7644b554e80b83a627d676530dfbd8d50ada1dc4c879d8e2032bdd2cd4a6a0987e9991862d23023676314d4647f182f53eea410bebb04de26a78df2b1f719a8e660b09950f15ad94f5457676ae69e4f91d3731b5f1b4939b764c2487ac3f4f463a4c4d18c70cf91c02da5a096a7871c27ac64e3b1647ebd71881bde880bf60d3801cd00a9d2d5552f9bbb30adf264288b47f1b328f6eeb31192ddb491aff0e6064e1b0ddb8c2f7a91730c8ea1c263cf5c476af38f999cd94da022b367280ca41808177bb9ddc0f14950a2b50fcded01460d6c8848ddd12f8333b1501b2d011e21c7c622bf1d43a1b41ae65bbbc1f89b442c436955bbad13b1b0915c3ddab3be2471397ae412a93d7b8606cb5d16de9e54824a40198a9cde277593994876c5b52eab7e54ee9fed4e74ca10fe1a89726aae3a26485a137656f01a2350a27ee59b140aa1ea3f54c3dda2727fee71eee5aca6d038e2b31d46b68a05e16e6d7a3e0748f7478498c3eef656c57fa08311855bd603673e32f0ad4e33b9d5f1c871190f4486049bda96eeaa7c6ccf7658fff3f1e3dfe6a450cc3cff5f7cf0f49e135d6e30ed1ed6fda2b47b20042e33b4f9821c5e42cc4d9a1e819d1a1bc39bd32f700e45d63ba08d56fb65910c8c57cd2e07ca016daf7150835fa01467d9cb4086991dc66f81677b5c52892baf04d1c903c196b8b77f7e66f46af4021a88219c5f1c373d3a877bd049044a251ba65c37945de9ed45002591f2700323eeb13622e43183b4fad33d318b0aa8fd9c73ffbde3949e55df60b989e8db49fccad76ded79a5118b169df61e1ca9e679bc0b57fa358efe678db186ba4ea6c3c56bcb78bcd75e470263a04d67b09aed32fb5516915b94d0dd6c162e88c73f162cda429f9d33649d799728c438672980c35e81f3be9e0188d6fefda45c4325dfc0ef5dc65a0212cf3b8598d1953c458e3bda19cb490c11f39419b54437b5d94a2a066a29655d8ac8f05a8e02b39d372afcb0ae1e0713dac9707b004cb04fcee478719bae970663f44096aa10496fd8c28f18cfab77e04a82aa1e29ec01f27b90fb25e4010e09aaa330934157205200c765877aa67c75ea563dc848b6f4889792aa3914b7e6a830530cfa2a7f277955881763ab78d6e7b81027766f058c02b61bdb50538b1ab0fe31daa41eeeb2de5a402fe35b407bf1a49a8e1e0778bdf4e67495ef5ea94040624e92aaa91ff603ad5642083513e7eef5bc2f842568c69499c0621a22287ba204173a48da1baf5ba15ac6d293503255bfdef5e52335a28da22b781c28e0b84b17ae39c763fe7620a178ac3b7ca50a4e97a30d3572efbe654fe3b7764c7d794cf594b7f6801682e19075b4e3b477bb3ed5c886b25063ce1976bccb83d469ede1a8fb16f7835919833ae389267122e3ea86728d010721801652cacf7a564ceb8cd6bbbec2a50bf2e9b381c64e47c261c874fa9fd2f3c34c58744d78f6fc5c74c9700eeef2ab0335186778e71fa98306e92979ecff46e4ff8b755062377542576624223c271ad9d31a18b4bb7777d7fffccb040c159b69de26cb5ec5bb7abda00f8d24d13568dffb85091c3178c38fc3a536a09d5296f8b86c9b21ffb0bed543472dbdcdbe717ca8f074aa40e4c4b3452b6f9e7f16b49dc430030912e722ce951c74f851b20047bff93c66fc343942cc88fb70dc41d5ded3eb01e41b0aa42ed646735d9f96e83297d13757ab2234420448b1ded3147be534fb6a606f44b7b6143b4d00c5ed149eaf37bf75123781e975e48b1303c7dd61dfb43e5b3081ec3cfce6d670724f9d2b2729d26e73ce3073f667d0994a9738a906afd1576a84a8ee06a44319829e0216d6ca5ce3e1e6c67a941d766ed226c453c19c1dee700c582e89244b4152a79e1125eed1b503b0231d960c04168a56d39aa42c7f778be610aa3985481d3266510cf0b0395c4562d3bb841461583db69fbb9aff61edb7eb155097895c207a757a1e331c3eef673a1faa4c18c45619cc538153699e8a716377130b937bdca82ff3d63a31e423661c15f703deff1b407a93d339f657fcb84e557f741f2a6957ce69c76dc44a8333ae1c4121f8cecf991e0a5b00afc280749925872966b2e8aeefb619d4000fadea1a41a16a9b777113ee30c46043168fbb8e6558fecf4561e3e14302581c89b0d004974af5b07ab31fcdee635987535f9c5bf7598483c96f666e36458cf4f2f55d96c6ff067b1af8335d9e3c6544f1c471402bad5eebddc7a194ceaa698825fcfb3b20743482ee0032191a836da7d1a052115b1e65864b058b8bb8f8f438a35a6f467914d08f71863d76392241f702b5ef9867ee7f02d9b0f00ac00ca238f82c92bb6895647768545e741996ecf086ca26afdcc4c675964f3476fa9876de7cc41faacaa84c283adbc0ac5fc96e633b49cc122c603aa64227e49d0dbe0abcc23aeb0513a19ef2698d5d75f13f3d273b8610dffb70d2e15bbf8356eb69c57852b2e95f594367b6e80d7ec51878ec72428a72136afbbf1ae416950d3f32c4b7ac57ae149c82a5d28777f79822fd89c3ca264e6f01185548fede66fabc7ac105e5b88a26a825b8f5157c3167ff5e06de8bc205412c67c53695dd44288488b3e2e8fb966b95a2d7a0ebbb349de42e9e82d1ce70611a71877c4a33342a4666399680dea0f741d95aeff49931da16baf608a99d10e183c2a20adeffc0c7972056cb526ceae69c0655d4e40f8a655c31b8c4d11527797fcf8e0f9cfc1b3e1233e7dd5a960a7d4fb10a40b22773c51d65834d6c23b6202142c34e51a581104ad4865bda6bd11951dbdc46a3795ca98bcb9ca46e5f3e3681b530dc7dc073a1045d28037edc6160ee2cce8fbd732f4943198ab97a027116c0531adf87ef77a1b9a9a40c1dbe9da692f263ddef6f6ec347257c5f75cc0ae4e66756cb6d872a53cc302f6fc5913feb520d0336c0b0592b8a917866853c18c42a5c860301c374a861355532d64a2f1423ef9d364161352d4f4aacd4b81500d62113a3884da3311056113f7f6ebd131dbd717da0ac5418203f9daab792ec82a6a9d6f1c1e74986c526c8b25f7cf06850ca8db9a9b08ba5d5e08a8aa46a3e093925c62adb03d562e12ef66fa57f685051af17df2f9f78abb37e2415707c6a132000986c100895cbb49dda5c427040380eb295afe9d9b64c486d573124185af9846de25d8b04ef1d291c92fd403115c19f7625eaaec7958a8ffe1f0e371a6b0d99fb090ec2c3be97fe014cfb94a5ae04d7a25311d381f3c6987a66c44030a0b37998a5703c24f39c95c4ade8ccda0630d327e4b8bbee1f2939d15ac0f7aca857ae12cc4235954e08d7f8e0ad52650a051efad1131dfc2b3fa21c09ff6ede60ae531777930b461cfeede76012b88e34cabf78f4b3ee31a6048ffe174fb06233c325f97e335c3498339b9cc4d5d2632c734c58d73a55c262691627db0b052ec0b547502966e689f3ff2d6318a8ea014dd46ce3907df5c18549da48b4b1da61fba61021dba382239cec827417367e5c9bc683b876f3829a77a993d2007e81be96839c9735074f60ab37c35b49fc7bf95ace78fbdfcfc71beb27a080cdef385ebd465c4c1ab90e7ff30227a0000ccad53af7f8e792c10f5ec9ee1d8d224c901a38b9f6b80deaa89dd96d1b78730d15ff69ccfe33a202d9a1b20479b14e81c85e821e6350ec06e1c498043c88a7c57e06b523a3b757442791d78d2925eeb3a2f91d5a8b03222950e58009d7b811224de40e058294e6b4084d72c5a94a8ebd7f7ebd4c9426801624e801e313d57dbb163c5d62871551d512718a2f8f9de4a7045b5fcab78246ea83ebecffde5d3006b04eb25b56f8d45037c28141e66ada6d35600c90a8d292102ad024b7de538a80bc19ed231e307039015181962941ab01345616cea6648c8bac938321ed6d39313b75a3c4e5b805808f16a142092a0a30d1f9394a5049caf92570fd579b9db3551e08401fa560ea1814db2bcb1694c7e90bd48cb371a50a332c0447f51223457ef2d5647fa0843328e084e31ca5704c8b6524f338147f3b294d2a8fab98fde87271672434241d9fcf6f363a1a3fddccca1ecbc5f53a62847535db50aaa8e3fe100bc8a0822b6e3d81d5fee49845b6cd3085156de3899f6cae7b346a25678416b41ef7fca5f3b55b40ae8c4349eb1b8630407e0f84ce2a12586b255559de8145740bd0502b5b728fe34f5fc27f8e1d8b04781af87c212bd7ce9a8f141d6d367aaaec3bdc65b736316d0ef7e53aeda6dfb45b3e274dc107f6700f175a30cb9d31489a72bbd6fcf7498c69163af27222e75664c2811a9dc0ad950b36d815f3167d2426d65f35bbcc89c22c0f5a55c708089c171ed45a21b642a8e1a081ca15d225ca2d9ea01a791e3dd1cdce1faa71ef3e9d23e707c1be7eb4e31212b19c96c5c80423914427b139d7eeedf1f7739617ad655a8abe0e2d7b0b06e473a50d1ee473964b33c2577f734475d509f4239f3af7f00ac1c516df5ffe83ce3a89e5439a141536333c3a17894ee69e4a813a09a2148762ca44c20f5fd235b80997743b04a563fa3f9e4c7c440b007851f3096bd69d305f0a52ad350cd26c1e1060f724920394347e338e8b7df3c07d3904311196be268accc3799427f250eb4fef3ebbc37a34eaa9512f6bd352067b50f0b51afcd69db2b9f4754b62a3b2d609c5e2ea0c9a91f51519c7d5f1ea1cfb768b7db5fb3b6cbcbaaa067e86044b1aa27d448d2af4aabfc7d7a2180aa586b87a3b613ba166ed93193ecee4359e4b15c0ff89194d933fb9fa324166d265484596b2948fc004fcdbcdbfb4a2ea0f59c40119216a601329c92f55e262c0da3db926ec8f8c5432166f5b7eea12eab2773e38ee538cb8801400c6e85892d9e6ddb08992b703bef11575c2132a1cc56fc730a9a56e9d0ca61b3f305207bc793a08305cdd3fc7056ec2107a162eb3b30d45a4d0ceb6fad19d812d0d7701751504916afbc27c0568f08157d3016eb32cc57b2114b2a258abc9bc5c77d0bf3ca7640826e5da008ce26f1ace8df9288395246a3acc0530566d3c97d5f76d8a3cdbd82ff30e3af06d8a8351e025f3710d3c7affe9d6f4847c0914dcdf982f1c074a458eaee8534f9e32c839956b971d337b5783279c26a35b5269482d3a58f546a45705715b69c15362e5019cb8c16d12d1e48ac90a6c0b07c9c1bc4cf0caa80eaa2431997c8c82eeb2dacc2e94e3c5980503013da1081561794cea4142e9a86adab25f2f68b5ea2fd1e376b1510255e202a0a4c7f4de66f0f88a09a04ec3fa3e86ed4ac7cb14315386b6a5089efde701f296092669edfc48928ae7b508647b5d9d6e035cff19b94ef66d86d3ed86b6c22d9d6a336c6d0634ba603b919ead889880de960a8da8cd23f21fc61f84ccdb29d3055cbd977506d79e1451af69dbd23f47e3d2872311a2f5f85c7d3dccab1605ef4958e92ff23556fbf4da5aa6ab750c2f011f70f2ce651a8e736e1bb41d4a344b1c438912f764cfdce078efb4c990ac69b49e4d1d28f213ad7f7a56942c33f8514f8e313896112d2cd6b6692399bfe02ac38e9bedfb752420caf45750880e817c5bb47a781f3c257415bf8b9034e9b1d92b7c24efc33022899e95054260a3c111ad3c0d0b6aa6b2ad698b1d1c535017b5f0ecb06e7acd266434b00bfc4ad46f92e3b0f4c0f7460dc77d78569eb1c0143e9c6246ab154119f4b061f6b4a8712039d6876d308424f9ace9201c3dcb6bfa5163805c2ca88c7f9dc5e5346d4e792d7e710193fd0187e5372457777c23970855d09736fbef089e7bcbcd196778a29be817b2a3757734ac1755138856ab0363d5d5294f8e17616b36215d5b70a1bb0bd8c7d5d82f0fab4931e8785c03c468b3326526ef0fccf837e5f0fcc92b60e94c06865da536b0d3bfc6a79f3a2500dc8aed4ec5185986220e10d1ddafec4993c7ccaeede3b4ee86850e658b8e26d16714bfc6e225091cdaac6f0de090f9251ec41c1b886a9f6a1abf1707d627a6590f8eed7c0f8e4c8b5a52d545603cce346e7042e92d6f97ba40033d8da38f8014343f41420c22cb154a3baf2fef5fb18136dc0370889be548f0ef5917d4b50f1f79368d836bfe59ba0b7e3725eac84473a97815b09278ea9ad40360a7e5246fe01e4ad95afa7ba1a0c55516948e743fd16dfb8f6b528d8cf53b5e1020b30042b98cd1f860dc7e937fbb2afe819f872f2fdaa806a3f62e2e253e83591000daa77a9bdd8ebe57282ae40e0148d6e26bca2e5add819adfccae200c1f5324f8c7a60a636bc1f7aab9f11cb878d1e95d82c64775d6c8f7e155031af6d34ab20c358a759915cbf49da5d2fbca5910fddef1d6ed2750085c83cc7ac68558679a057a8a51044c34c4526b2a5a367933db1ae6328a838780ff8aacd587890e5940d062a522e074757ff9c56a227bfb4a9ea9fb3bfd7b476ef307cbab008b3565ae70d29cc5963798e2ae7a5a4775f54300b5b7729d8c776d25b054e1eba23d51be1a1834ec14cc746caa57eb4f6111470bb89cab7ba96be2c9eb27ba10171d1efe19e0c818ec6edc848c5670fced9d93d36d522f7943f74053f5f3dededfe32297e1ae3f688829d6707d9f7558f2a6b4d4acb84d6a2a46d01374fe8e29f09dfb076332464e07f80679e85d9edb3cfd4e9c9effb00534623017ea529535931ccb9d5559b523c3673dc9ba7599c388aef74afebd1cf198b947454df0a24a72ea10ec5b5817f941f868dbf8d2a16dd5650e2a9ee1b965c50f56f850b948fa8e895c6ac806c7453487a5fe63ca883c4533b57898cbf5b0c4b15fe91e96d8b7b6a971aef6ddeb30457642f4095f3124b5cbf1586a0efd58c591d9e9873362f61f0a2217a825a7a56cd0d6f2b645e6ee0080f462256455e838b3ea6c64084288a5a5da02d42ce9826a12460d12b4116453d5ba118ed9e33985559cd8eaecdfa6f0de18bbc7e882aa0f11e4fa86694ad930096528ffe649ef15507139a9c6b2b9d1225a2c74c14f83a1c4c2a1b6362dfd53d90f67fc89bcd9fa87a130a325c9534c491416b2342a61cea7ac6396e3d6fc8410b0e7152fff5d3b1ad51e85bb68f5553f707c1cbe1717c96472d41fae2ca5f90a1d52f23d455a7f1ed5b5e4e0f77cb0a8385fb2f80781ed81974c168be7ebea7a857f9a5a49f66f0bb590897089cd9e5167b31ca38caabfef8379e59c5127bd84e2744b67ae3f84a8df4fdcdda4a4e5a75970f50e607d3a31b529ffdd16c9d1f1ebb331b18620abdbe95d98aed776ec48573f8dad52fb4c7dbd12bf177a8665830514df6214306b478b8970e339f7b4759d6aef46eea86c4e1c65bc93c31254621f4673e4b3012dccfcdc777ab7840a5c0a3d6635511fde03223b54bef1daa7f30113a5b11ab6a2f09495c913bd1ac9c72e28909e5ea26edddb969ad92e207e21c01c038006fb50514abb6fb90caa283a5d09ed8c5e047dc55d9013554783410ec95c608f88bef0e42da28224a42f39f37704752ab4500bbf6864a1d3e64137f9a2f9115c797cc9486daf6b7e8dffdfdeacff5afff0502a7c6a4831d2a24f95a33d9c357e1083b4a392eb8bff3f7c282b1a925878c9a4f8ef099f79e98781030f30cedca752f2c2321f1b9b9ab9c88fa88d76d774c648173b4fb15ffe696996901fa872b3c5c6cc7bd66a4c17f766ee8b1f7401f1873ce42b2eaaa92b260c3ff481aaf536423efb3885f9079a48e31a1b3d633371637bb7f423d70cdf6859bc5705e8ca0c676fe1beffc1bf923de8bf8e054d5735ed691bc91f41d4222d5d44ac20aad17b0aab5b64f4636ea4d601aaee1153824d93b84e7d9f6972001672e8837584e430faff574883a9cfc88308c7750f3e5a4ca9096e79bba65123c7bed190d3428ceeed8853f14a8b37a1fb620d8c4d1064be3f9d067de2d4dd39e31ea2019f7027921abdbf2a708a9fd8af153fc4db60249a5724f4dbd60a05d4425f7c2f762b9e89147f3a1555adafb23e88f108d120a525ebdf97d44856111ba8fd6991d4dfa0cfd5d440b9aa1141068d9fa7b7b7e8273391acb972dd53ce9afd140c1d4321e836e2c91e027dc672eab9f400cf5616dd8cae0450a0d486ceb1d3c7ea17b5fcea1b6731f8ed19a0d9245675ef5974a13d2ccbf61f52fc3cdf6621dee6d9306d36abf8f5f1e11d14edcdd8ae7badb6e39b3f6cfc63bff88e9a46ce8a2d30f34b165caaeb8a89a5adda327f0f4fa72dca2dbf6ee153c25aa03cf9e8f83517404138341a9062bfe5712893596146e1e66c1ae86f45377aad5a5708257527d1d7c3a5264b480d70301b3f93df50fafc5d97de5aafa47ca8be6b21c81f072efd47c3ca17f84c361c5d47797e48a6c05f87f55372b08e815fd3fb2c1db39320f86669f2321b0535339a4e24a1b28e627e0fe9e8c19913ac519afc4379b482989545fe4194566e1f6c0140ecaa0185a2fb565d9482c16b6a3ab1b856006eae7d1f32ae6ce81258a5f6cea94b9f256e38b656a8d7d9bb1019ba6077e78b034cec4d4e6d0d08ab3c5d106c05752dd1837ac2a226e924c7ca7b0a63cd3757b8a8e18de44b7d124eed021c5dec75f36ae79ca3bbb8faeca45dff7acc543fb62f971f84cb9a996272476ea87bbf52737a84b2fd17e84e9d9f94468f6bef04375787d91ed8c1ae356f9ab80c09e85e3c4e316591bc54a18ddbb146e1df9c236e4e69d9a8ea27ba66a345a9c9cb48232a17bd52c35d4317eb485b94769ac1c2545e6dff4490d2772b96d8261aae6c9b9509930fca2cba2c6d4b4d698ca44fed95d8e7999d2d1f84280d23cf8bc39b015c98737f03618c9e1cb8c18c3227b371d7a26ba3f797f5af20bfa91f0a421ffc07f89688273d538dd5f97811cb9b7c52333f1742130c70a45f5b05f448eec47ceeba7d7faf404ff691978f611bf67f0e6348cf02563b3ef89c8fb17ee9928ab98ffcd2010e9bda38dcfa4c8eaff2861d104f61fc10265d505d89c445b267c721875c875edfb52d299a48a55abe1d25a6641585ab4a3a0c8832addbe40d907f2eae4c8909e39a74fec68d80081b281d19b5eed9fa3b62d8e31ea7d084811424713c4a90a1e968f6f4efb1e3bb4d5a5fd28f4fd5500de6fed6851ee303c0b4f25b32a12cd61d8ca30f60b23dd26b2e882e5dd67681255ca4eec38d351768463eac1734923b37dda5fc2eec5f3291fca7590f89b182f4106a9789f181971750f010a62fe45b07a987590184ce1a107511deb5b33f94ae77ee983d9c8c55e7fcac8fa9e21b9593c98a152923400c350660560e19584f2d6d95a8918f7ca57b7d230bec0912de982c7011cc6c43f593de8b9aa6b3f3e73b429ef28860ac6ecbc4bf05b4193960f1f410aa68c5553faf219907726b65452223c85ba191d376f4450056fe66eaf24a69dcd112ad208d6e05ea970d4e09693dec638f03f411cb0bc5b2df6871286c0465da358a4a8ba007226f9b34df334eff30efa6150b3beca109e9ac1a98204a44c9263a33239a4f91c28c86f318dc3691a8207c477bb3f2a4c80c836b4a7abe42f61a657ec09a180ccc40c91a5683cced2009793fe34ad57fe1a85ffe82b646ded59200e5ec7211849dac20f46e42b7cf8ca7052b556016968f12918b70a6c3c821a180ba814cc36aca74e77d0dded0b674aa976dc6beb9e4f04f9dec5b794da88ad3a656440d8f83af2cd89a777dcf688b5c95e5034365cdf5863aeb4541eeb5b2dc93e8cb49972884b90c1603bcd917b3d7b7196599bd71539094a273ab727dbfa08a81a6f4ff04d68faa5fe12a40ca7fce5b1c4066a03cd7d1b0018839c7084c328bf4475bf840f4fa569f7e71f915ce98ae99b22c28c6f723e657d7622cda892a7c0bf856fa7b232586fcb0e82920ad6d27eef6c5fdab60841d185b7f2870ba923c33d5dd3492d2f25add5f6f3495f68284862047e5c35522ee88081f2b15037695c7820dbcf4f6c3ca19b14bf32ab83ed1bf7bb32eee0d9cc002c1bfb716684fc7fd820bf4c1a7117df049b5d63f48b6b19e6b5f78058530fd15ab3fdc65dc0af96f7ab4c63fd49f65109d134a3641be58d6cf7538b9896eb385dcaf10941e093e55006c6c40750ab86110df3e18fc048d8dc3cf7f5641d7e6241762634887316fc7f46d02a4dac990321a381da7032620948f776b61e0ef0117e23c9232a33b0ade2baa7440759a91a085c5772ca503cba0317b66d0871bdcb68c8a9818d8e96c2ff70e65be1acbb29e650fab10a394356fe1c57dc18c12487e7401efd3749c34de53225fa951d94c69a5b63d27a835377d85a3b406f7316614623b9cb17eea25a4a68f7389dd57bdb6c0b7ab1c754d16e53c558d1476d3297d60c3e0de0b26043c83d72c76672d7226f7de0c93d916d0a0c377df43e871828e184bfe083fd5f7038ee0f5745d253701901833e80747a9f5545bb442927a9dcb7486599f9b61df28bc3e5165efca833e9b01eb91bba66151bf4634ad8a95f6aaf01dffa2c66c7e6f1b0921b0521f80089c906fca800cfeb887878440dc232a0c058829d0e0ba72bb549697206dd461e91b84605ee8534c37e756e9edf1356e42dac9996cd5bc58405086c89bb25a7bc731a55691979b541df5c65712cb2a07650558f27a332384e06f0a7d6a584e037af237015e5bdbc316f95d853c8540ba5f2d8f7e187512acf724ab2925fb457d9651b991ab48a6921de0dd619c10f40ba5de3685eede7922f236b2d2143126f5e491e413faeb6fa55d13ffa49a9fbf1dd2bf76ee37d69197190499d85b41a6dc096a8d0e967341b95b1d89f88b22533fd1eb8bc0b81485354e81079e91a66f6d96887156dbc6d63d14dde266d94f0c3b72f61632b0fd244d4ae0dbdc19f68efc47cdf10d87d8b127faf27fae2422788454c92155d1e9034ba6c88ecd8750e3449dc431c34beef6c7ce4d9c9e2d217e3d38f7ac3e37a38e475c70dcf1532cb13f6f387aefe172454868e8b212fc37fe9c88c466a726ad75b4a16ff0e4adabd345fbf20cfc9da0004cfed8332e53f6e851d98ac16b948c93e3e525aa0aef6d764bd57290e6fa01308b4f0fee167478215e7b44c9fead40216497200a58bee3b0c372d58b6a02d3d6fb6ace6aedefeac801debb5d3063569850d6262fc7f69f97170b5a0e53a758ea0476ca19ee6ea164d877f77445c1324993059a3fd820bf10ae2fc63252c27dacfb37fd0e34a4a2e275ae0debbbe62c02b603ed9fd8e63c13fea5f8793827dae5f8d63ad009ca5ff6edd98eaa18725a2c29906d1fa512b919638651856f2f373a02b53d60f46db634d12fd753b102473667564543bedc49512e3c1ecc36f60896cefdb9f81181d27120d096fc8021fa662dcf4e59586eae12742958bf089ba7792dbb93cbea0c81c3206fb00ff37ac61e393ec8b7ea2f1c5403e5f23103bbf5d6489c359257dd49a120fcfabf35943cdf297ffc78d119f5e7f0ab7e49ec842dc62fdee05ddb41335e5bb2d873a7fd005800ed94ed719ddb4f674f00aeecf3c0815007e9840912f294237ee4907823894327c7dea4442127497de0fc2505c5b3c715f7e0ff54814d1479931b8ddc862155d076ccf10f4643fbd305cbff7e4edb3fea26383033adfb47968fa4710c1f0b8f7a896ce17fbdb0c6e323dd0567834d0bc369574662ad271a21392bb88c97d6e54bb0f427851442458cae060fce791d329fe2c48fb594cddf9889f43597e8e1718e3b958df385511282511793c69c17b73b692ce52663d3913920b568d2a07235b0421c81b72d604c737df3c28d41757b3b3768a723ee8301936ac5705c05e6b77bb768abbf8743c926d4657bd7e80c1a7d8054430360c25eb91f9460a464a82204c964cb0c1928e2e3f669de0ee763f980033e239996b949a3eaffd240b7884f23e79c98a75902e56d855ef433a083ebe727c6629f4a0b3f9722ef0c0526fbbfcde2ec9d4b23383d253405245f1693387b93c9ecb8789824433d924b0a7acc359f58301a79391a2d78628ebf1ccfe6531df5d2289bab399d71bbcada1a3afa2fbbe9a5d95ab613456955f2515ef5fb1a1adba49cf2ee148469aff33ce23c4b0e06835eadd5cf5606e152cebf706aac90814f2d7473c638b874fc8e1ce1feaace6153c3f6169426ecebdb41fa38254f197dc379593699534a62092fd414ebfee56795f45fde13557b41c06c29dacd118359b7818c6abdaf266f35b8c7fbae9e00a461e28edf167b86e202f9dedabf030263552289e564eb5e24f7fba57ccb95727c5a736df3aaa0183739c938525bd2386cafce28a33db2d96c0bef41a508c17eadfccdff64dfb31787b127255d0c98a8b6dc5ffacfbcbb4b3912f1edef4c639f2382c14078e3726735d0d0bd9d311115880beeb61fdc6319689d2a8f5d540b9331e71a2851413c49746c5285c810c8d6ee3ff2f06243698f51107dc7a6d699fb743ff43d74db1e937da46e5265aaece69eebf38cc5d773dfae4da70244a633ce3db23c5edb117e9801be0e1f09b5e92f9b8a1d24c530a28fd2f78aec1edf5d4b5398b0984c3b583ab278b66f9fb9b063ee77f2d045ec6ffeb8fa1d2a9121b7004620c3891e702c20f8997962de4a3608d2ff69f6c5ee9a4f69b16736f9236e63f1560513add64cc13b6a97034d21392c7d1479adc5d0db756d562b99eea3c676b48d98888909bd62706c669348610c67e78d22c789db2af99d415692b30128a1f5b81b3ddfd44db4b5144a79afb5967ec4f46c183c98a05925680a8423cec9ff57e22c1f1c089ab3be09ae55b145d04434904fb17f7a49a29c9a67f1ffca1690193100f47ca33b97832a46512ab1996578f6c07e8af2882c891c0dc7f0933e6b2c82b9068b7d4a37c6220f6633ccf2f9418769925378317741074e940ef31610771b73cb5429991e25eeba59295abda6d0bc70cac6a35632912591fe422514a883eb31a5e14990af3c681a2a7949cf66ef37202ccb5a239bdbce90c3b555ea49db03bdee2ad6f90ef5f2977cfc5484cf88818f3f27cbd060c317a63505848a288e93d707347de031c15f5a674b9cb8bbb00aaeb6230a45dc0a99b5f17a333efdd4cb6b0ecc737517ecc417ac90337a36c9813bdbc8be91a94554f67ccee349e0b7ec9deb82472cb93b5bc8b516721d123bd259827e4985f011c2b898afd1d6e089cb4fe7bcfba0e5095d493eda0d76ef693475312b210fa6c1cbd4749c6464e5de6e50d47cfc9dc32fb3740bc4f6a5047bb8e617c3b3f7ea2344a9fe927398533da3d2b4a829b4c8b3d3268531920563e16a3df59a98158fa967d3c2e5ad41ba237b113314f254fc013cd7d653e06e5aa13b1db4be06e6ca24455e38de5023ce997aa510fb8d8896a1c175e1fc79f03fbc39fa7542696198a861dab9007e1bb243b49949d396678fcd33156b8a1b9afd50baded45e6ce85841367c6ae829dba6bb850bc0ab6665b8d6eea5289f11895fa294f9203b0f458bb6743096643c9c145230ce7d10fcce24bbadbee72d1001f09b2b68fa1577b1de14fe276a6e844cbd130e8a1f98d750f8540d500ddec434ef5332a35130f7a0614a39c1cb77d8aa3d5676c1d9d016c169a6c26252a7e3dd12b428afb8017e216e09a1d4ae4613a2f69596790ce702bd953ee3ca4e3dc085a223178b647060d70d0e92a0d3df85265428656578da6d1a284f6ac2ad503db9b95359824670a421856457d2397f329140b52fef39bc4d79859434d8d918b6153c652d18c0a3a556b1e612e727a8b352ae04c47d9390f5c7de2ff4f685d2efb3f803f960919284e80e784b402a827637c44ceddc4a77203ef31bf2a3af11c72dc905d3132fba4df98b1b0a4e5d8ecb950e25920a22e3db3f328dd92bf3f055972895e6b1188f1ebcba493c2191a9e356d83c6895375b1ff96f3b22a9b58b19119289be72edbfbec5f60b2fa19d7c722954fc08646b51613a692f9a085f01ebc9abcf6a9c6c2762de956090e25b0c114ddcd3b8da46f99f724865898b291109a00348669411930d7f557e2a59a9858c026ad1c1f5522a895d4da7d1899e5a403f3b96ef0734bbbf3a31fe180994a05003efd1db76ac453f58347b6c5f56bfc4915e2178df52d9ef83e6ac43c6d3f5e77b9254bda5c8741199a75cfafea74548536cfedcbbfca5ce4fd70b1f904f04971acf3002272cc9291d82e10631afdf6a172d8f694c320fca35842d372456c6fa15da4e2f41d11f77e7047e870c8c542973935a9a10280ec3516e484bb456a1920c2727e600c03d2fc228c8800cd1145b3af83a7efb40b5ba4223aa92b771029e23e4ec79396b6ffb48bda715aa0c92f606c0bd5092077b012bcbcc7962d352e16dc0b22a3f7eed1fae4419bb339a4cf9f5816b60ae07ecca78f19cdee8f16fa0500dd39d9c8d49f4dfa479069d6d7f5bf638ff2e1d76509b5ee89b0f30e9c0f76c9472e58f8ff69ca840d4132b9e468ababb1651dfd39ae2b0d820f6a41ccc09df548873d4d35a1a8b96f2372e81ceffd25dddcc4a8d4bf5c2033cc82f05118c861c5d5b85cef028c1b44fc17fa8a4b498577a3990a6dbd16da53bf189827df7db85df70186cdf0aeeb06fbfeeb4ca40f85a678136d9dbf128bef84a96817c6ecc6b96f960f241a86d68f06018c9feca542273b8f1cbc73f2213c342427a31f01d229e7792e33102c50344f49e6006bd1b8cb14a55df77990ebcbc0ddce29b68e0ec8fb93698825df90fff85e90b1776ce372a8b462b89e42304b2effcca7ee01f321fdca48400ed1b861c83d0b8fea0b1977d2aed78433a39c5b0f6df6e590e202693210fc0b83dece560e0f5815f4616a974c1f78b4bffad4ed31d1372c717c26d5203f45c437946a7b48fec064a540dbf5545d841339960f172569e5e9aa94e3c35617e4880191af86294b29fd0f3fd6c66e03296c11da328f9801ee6521525caca403fc8f280cf1403302f190d849a3243322367d7a92f250887c040e8cf9d0d46c69524aec3371c28ec2d0edeccfa46240c3a6303b462fdc89d8867ff7a10b7894af9aab3a2afb03a1a1acc1e2439e7225cd45a145b436e4c4cfd22d8aaccb65fd3e314d348e530bd5918969c3de258e025b83cb2a9334a7141bb2a151fec1efc550bd20a9f6767922e766abb17c4e83159e689c157343b6b53ce05e99e4c4335be61a98811f1de051ee5fbeb56c092732777ae2053d91659d2e2785316f37f7874360dd1b95167c6a152d36d5c7c3812e268d155b7ac03c54313371b0d7a89c3516f2176640eb9f3647b049a7c1d2c6889e2de12124394d46cf9e4f349636041f2716a61ade29ad16265e5bfb848ebd89640c897b31a360b2b1c1f90501c838c2111c46449486007d920e1432216f015126cf6427a78a86f2f557cb54c78b9c6a0c454ea554b90aa2c6ba1d4db89510a89b42a5cbccbf4ae6f1dec64828fbee1078871939833d7dfae07fbcf3fd4c5bb46f289bf992d96c2d9d7ba4139757d8ef4c71ef9e4f45b808e5efbcccc185690dcf9a9f97b16bc788449c40c5570e6b6497bce258f89748d978f12ca98c9a4a870e75a81d9ebdf7f974028d746e73614d5fc3f3a2178336e2a2f12b01b573a68cc839bd259d22e3c4b38eb244b7048d13190856dc80fde7d71295dbed790f61887682868d782673efa1023ae22018a1bc47b42233e3752cf3f8b071fb5d867d64275dc4e8e649a7bab2164bafb3ddefdb5dc6068ad1efaa01db35657b2022c091c6cdb8304e0e13ba595ac4a56a3b2ef87aa61b40a4ac86c82c3046c3ef745ffed7bebf681f46b3ef5fe4fa30bd94cfab8cc045f0af22d05acb349e9df424edfaecf1c6768f6b984cc46a0338ae05f8c9e7aab95a43068c5400651e46f291eb2f6f5f5a5da247ed251270effc02b931546eee450c51b0ceec8e5911d220befaefc59ee54d0e51f0d4d0fac8c30a02951f1edf3df3abd36c9a377753599a451150b463131067881858eb0213467ec66eb9469afac97d1400ee8a8dd5aadd44c6b8f12dc0c738131bb08047de48a1c282e868dab012479d63c085d45514a33a439ff898f2c3e8fd894ce4f06e833b459d94b7ea9e798adfeefd3b0946ae9b6fe4b0e8249a91c8df117d89a1db3637b258f6c47d7e4f8d402756634f782c0ca90e115cb4dd3b496e164c1b65e2abc2f2c64369bea93b9b457a133d0aaa1a302fa7d47671a66a6dd1b53f9f528b9f36bdc09355a0fce023f67ddd3b5d5aa1defd7b00b65d2ffc9daa40040091ad2b5828a09692df6dddc72c2a8e928132e93c12e71fe68b8abba6e3f5794e1e622731eebdc8c893048f86b609e687e196f50ad583418f593c01e3f992eae5ae854ecba9dcce21e4d50028a49b589787b68b7d6ed145d1d0dd5825c8a4270144576cc18cc0024d06b3d424b2fdfe101cf0594ca4ba4b7e699a5416c7708bdeba85fea37591ae095a227287838bc76524b9d7593a0b8868683d87add63b12c532787ad75091238c0a2142a14b060e9fadb35baddc1954075175ed341a25f30e33550dd390cea7d6d0a3e9dad2de6cf833561bdc6ebaabd580c767b8eefb5a9c2bdb8e9105c5b0683e808528119ba4e3cae6b4f7332ceb996a86bbe1c4f1665c89e20a1b4886e09ed2afd04e9978fa00a827bce50be9a54d705980d1f81513d7e1b0ab49bad799c85559e52406ecadabf5a8bc746446eb83588b2be39981f3e85f0b8e22335fd10681ee186d3516edd4fbf5bd40a94b87db8802e72ab345d126f030a86f2c1c7dd8035060255342ad923f1f22cde85986b8df0ee1d9f30bb317b339853de4b26a9d8fc163c2f0c6d135b69f345df394e4875e7e9ca64beaa7a72db35a4f0b644733e3d9876653165bcda784b31e32afc9c0b9a267a23d51d69fb1c20e201b22db7dce19dfaa985b63ecfb4d2b2c1f28bba8de6abcca82c952a1742e053891deba7a5c2dbeb488379b92b15a0ed9ac2514beb975eeb068cbd5b721bc2df2252654e2598e2ae89c6b426f8b7b72613031fe7daf846a1f3740dbbc1e8485b39a0c032aca7323eb115bf67408acb26b948ac04ffb1a7cda410a2d75dc3c1796d93a138c3010e6c85f2d580e1fc8c85858b2473b34551b01afdf5471529dbe28dbeee6a6d8b74bfcec2db6f903fa0c928f0e85c2eb3a09bfe147e87e7d0f62b1899d09dc90c3c58c4d48b6f8d45b6ef79e36c9ceb49d33ad3518b0054c303c5825b1721b5c913f30274ed5bcb0767c4ad64e6539fc12ed8b3224a3110bceefd146e7eae6d690fbff231e5a44f9bb728885ea71d7d2eeb2f02c3e4f12c17fd207932c2d59a7fd067660d2d07eaff1252811d473bc0c4501dec01cfface73ed2b3cb8393ac61ef1c68fa21b3d14d40114d4be65f44e1b9aff3e5692aee15f879531de9d6aaffe1843dcf0c53f8ca8f1f5ac39fbd3dc4c49c7cdea8d8e08c25b222a1b1bdc04469a1ac2b5a47e5b89f21a1c145002445c052e58c3c307343362a33a19584234561fb61a15d622e4d05fe47f00e6d88f4baeee78063c304eeeb1b554e2f5dfec334d585697a6f5a5b9849870af0ed208f3a76cb88c8b03a3c133163724eef02c6e8a99baff48d1ffd4c6787c81ad29b1de5b16504336e2d9f6bfbee081e09593080607b5a2d7dab5329b1580f43d2b7ec71c67c75fdec1798957964213eb9a815943e0d30fd2b9495a357acda4ca196e670d975e25bffaa541e6628c9624e5df60b8c4b4ad1d363e7e3ca241cf217114619b7a3c1db0d73fb67a02d9785822630a90995dbd34509dcfd26aef09d4b52047f6f06124753f06c1ec306fc536e98fe65629413eaed607bb5725b19ade14d54d0f9ca87f536ee3109c7b1d3df778372151649ca2fad3c1a2e261fe897a6a84e9281e5079d8f3ccad6538a9dc642f99074bd2bad00e564e96bfb4c807a3424f19e521627b3ff77028d41440df9805892daf195d3b8480bfe219521aa9d478dcebfbaf8d4106295fe5700384cb9c6500f3c3897c2e8738fc82a85eaf62eede9683955fb6126aa27609562c5812d360afc420039e1708b195212b61cbc15942e3d41244238768a405353cce36de6c5a63cf543d9f038935233830e8999e951b9d29a5a15cd7e07b4939f0990fbfd5f20e98b6efef248fb52d81adaaa8dbc67cc7c52e1ede0c3c397fd4000b383b35e4e3db20de567447c182fabae96767b8bbf771f4121a399aecbeb8c111b6bd7861f6e856ca045d1f5acd49a4dcc4686feac5305a06b667c87ca1380a2df527c5e9711f6a5f578ced728f325a42d158d549cac0e666128fb01c85b1cef079031066272794380b426cec709a961f334f74b10f2d4eef415b4576500f5a4c38480c6268a2683eeacb411242b96222627e48b60942742397984b809c3ddabcc656b6d10bd7900965207d357102caf73f1ac747f3cab654b77768007bab1b66a0e2c61e0cf28bf3d592cab5863e44d6e2a8251f8c1dd6b9759f9419d9a75f09b75e63f47c68251f4c29ad6a1c4b69bfb5eb1629318a71d7b0cdcf935af11263d5da849e8c44f2d55b2cd5cc9e3401ea5c3a6da77b3b51793e71faeda14e425b3cbad15720ae6e1d494dcb583fb8cc5899d289a6dd9f655221d6ef3a3977a7a673cfe08210b7d2dcd35225aa87b0373210a0fcf57863f087d063a5fb3a917caa2c4b6d421b53419c86dd5529af14c7a5ba7b2c2eaf2c46e4bb8ad5c6c82037db733c7c0ab9a0e9bd71e4e76ea5aa1d980026042778fd81c8a7962569a9ba4e1a65dd67d51ff636eacf54c9138eb43274875be622d8a64dddd7eea0fadfe5b08b79a46ea3f84d3bd5d04e27c4581c26878d5578c9c7127a674374e3068f6ebc9cc5cb8708aadaf96fbb66ed56b76d36d96dba30b8b48fa719e40844af6e1c0d2abd248102f5c773f045d8e9b8683b9bb140fbb3f9ffc3434c62d3cec0a5456713dd4c4dea27d296aabb966a29d49cc12d49ca8b7e81af0f1e8aab74950275ad9ead1a1aac297d0b711eb34c5373ae9808aceb4362b27b140be9d5aaa416f44d0263339d1bb4c781faf3d786c6fbf7a46c5cc30ef18db1817e35342c81deb14221b245bbf4bdbde86a8a2c63ace89f25bc406423e2e05952dad8e7eb01b64b1df808aafda4845308adff2d21d780f7af3bf4826b1860737ae641511fdea7dd2b23855f896b8c3788c49e1404ba1b80c770dc4d276a4a6263f0a1fba57bf3a5673822a92b997703aa262b396ecf9f670129efccc41e95471e83ee7153d229dff12991138a4eb4f885ff3557386a178f29b6be5dfaf1187a5e3197a008bf1b2414cb1fea6aaebf800581e84439de1753bbcc6a768da9440e5f260e525601dd34974418f9e1a7bbce8243371f2f17823092393b8f5f02d4d36a0ae8d552061cd41d1d5d19ca14579e5d7bcef1ddd1e06143ea39a25f1a63114990b014952c27d14cb82c2e398d99829a2f81a61fdd73e79a578085cd63d9aecf1a042026c6b43dbf1c307af909f8176f0d647a1901a308258d03c70c85873db0605276a311dbcc260317df1eb7a2ce44fa59dcd73da6fabc23102741239e1d5cfa2fcf5f2047d0c11db6174e93497c4b34dde28338af565b5ee5c711dc129b0db2da14e0bfed711db22c49f4dc62035dcd46fed411bce3de18dd3593e08f7c1bd3bf8806825efa429fb65c358fcb143422daf9b71dbdc3c9a24781b93fd183f62c81420371fb9badd3500fa4f1bb0b5dbfe484f1875109765288ec8c7a87295fbbcef651163f221929198d14f2c1e5e291f6a4036a31c624788fbf1e24bb58121ca2dcbe5027b54d8ee319d3a0e976de829f826aab6bde7d261ee129e92f82567c74a6c5ccff5413c25b5953659f4fc77d3756e45af16e605658ccf9ebf1204cf2b350cffcf08cdae8093642577acca8bbb2914c7782f3ae9a4c8dae7a7c302bec069de6911e7a660908d4e54d3e4e968542ba31a0fb6ec18104973c6773cc45d79be37337441d5041bfd34947ab0a4c30ab3be2c46c967ef1adbdf33cf766cd2ce19536053c88367ddf81bada70488274b7801a480a6ad01e9318e53414403574595cc70330259ecd22100f3b6c8e2dfabed8cf842ab9828cc66278cfe8715ac4ce1ac3f9d6c46733537517ea2389c4b609a66ff7d5f8f70a629769733606875c749dd33bbad6bc3e2be7bd2d497dd757121751fbdef984b10c1499b0f1efb6fc2d1dce5f322826373c7bc2d2227fc2ec665cffd8ef2bcc9e54bbdb9c2b5990ea11e3f5c383f585fcf798ac92865af1363b7270ab85f531145b3dba66fa43ef9c7a27cc7d82950e8f3cf37efc4bec0ba1c3d8a3f950366b27dbb2a59ac9400921637dbfc8f7afa6c7375005eb86ddd7b344269d18fcb6686a9a9115ed2f671a5bdd3cc56a7dbcb3268e9ae14c3862c826344d924be35e7b5f9c4e31690fcc5cbf2648afce8258fb3ed8e7500d5146b2ce5d129eb7f1b12b24293d95bf55a34690923c45d9fb785dbe709b600f0b1c5b5b0d7d4d117c682197467a52743888c693398eec79b756aab0a27829e94a702a9c470a5d42c4c1b3539b11dd788415a4aac267a1a506958d48b47e38895a2b335ed2dc1c41e32de9846b9ec479f359ff556791e8c73a4d1274049c650d8997f34686421eac550dc04eb13fdc8caf837a914c2aa128218b9cd84e2bdcdd93d8234ad01e7304c876eca4fa9737eced6cfa0defbcbe4ae064c5e2b8f92ef6b9618b6f2bac3abc3ce7accd4fb560f5ee663f0bc84409244522fa37c72bc6a63dfccdc3e6f21b8d74e995ca02daab59ca81fee60c5f40f1362e8918004aaa85aa7132880d70312b2dd89c287b045c66cffb9739470cd30ca1300db7b9236c1071132cb97d03d7711a799712f06766a826db58fea82ecc8bf083f431deb0d0095eaf0d224d01cad432e6402ca8d3de9e039ba1daf18c0ba37b6c8af92ee23ace87ceac14018297da7a4279caf74c6c0b02c2ad741892598a503f5f1ee015501f7ee3690ff2864b1b0915491281896fc6b1f68436e720edc05302846e2604b470180ce2d8c3c656f76ad308e275f7bc4615967d9d1515a721809d21c36db08c229c47bb9c581ecba611400eb4e97baedefed4de22c6b8ce9539c58fbfaac22afea6a33699343b4d6cbd10c7ff94b7826240725804927fd02f636692a72197ef884688c464e9f5a7df5c2ff69d3b1333121b8dbe13b8bf2ea17d5670c8924be4febbd9de4c1ba1e80cb2f581c4f99e352a5d9bc7b2b1ba95c5ce500ea8c76aca399ac8529541a57de76381195664fc2394960c7df12a0806834bead84edcb0225b6d92922f0995f9b4ee913603ad6c1636819ba7992c8643541fba71c0f61d29bcde5498f423150c5c047ee8136872286f688c094491c5b8d52986bef87ed4e8a0e0c5433ad5eff040d69ea1e587b24341007a89e9ed1a406934d50cd1587e6439eb766cbd4f367d95416eee3b88ff768d2c89c08578bef381db236d4bfcb6ac3b7c0f8d08ffe742cfe3cda1845a88e1de5458af107b061c73e6c5b20cae6e16775053373a10d19c8145bd983cdab6f5d0c8420ee5f852911f5508bab2a94d647aac252c1dacc67ea713883370ddedf9b4ae26dd3f0c2c218e070f121057dca44fb5198a20b30df3530e037a20a03eb517c1b59a0fa2525552f524d9eede8854f03cf0c2f6b0f58d329d4e7e20949a359d6aa198532880a954f98a97e5d811e2c90b8ffffc4c195878d5d5926ac7b6dae067ca2b443fee7942a88cd6f1d41e09d451535e7e0f42dffdeafc086ce6b7923f180792a4bc274447a6bb35446270be0e386f66e966b66b497d803a93afade154b4494248cd733aba96625b1fdf28073f7b323090ec38188899e3522aec3cbf69b6363b68157e96c9f3cd3f54a4875639541db33711c7519065b322b2473f6016a1ebcd28c68eda4d46d1c5abcde420e7ca4ae27010ce42ae6b3bcee828e299c4aeb9a8ba79289ab2881994c9bfd7e73fd7e34d909f49299d2181d1952759fc9784937d2cc0746415958175421a073dbd1414fa328bd968a390a53e2ed5a04d0816c4222ec38b1192940a5d48ffe08b4c05452ab279bb0db68ce949bc044250d8e829ef621dded1ce8ba7ce5a15bdea6fb4f81b47d9e77f211e93440060de44c300aca2bac6c5119c4a035050b460d84db37431201152a42d2b0574bc26aacff09a93c5a2bd2fa41221a569d6f3f64e74fc1efddf0760d8635b9a5b87b10e570b6d6b5073df54357e36a5c4b4862b14f587a6bd4d2f72e556d87c67d96ea0c6f614e41af3608b9302cb25dc283936d5eb6182eacb2bb839bbaaad14982894054f46fc7d0e68636e747bbbb0485a3487482498bf39fd2056584ac03338b07f9c39ca4c0a51747732301b90cfb0010820f7419fe42932e774eeaa154c2e44bae2c3e1eda4ae110e89b5d48c15c6978429f4df0c465e74a821a703d574a606b6c7a2a024a40760a0ceea2324694f0f9cf1ffdcfc7fcbd43d0ba6fb14b07e02bd1923c90f46f542ea2eff715c3ee04be22b00c1d690431f834c6a559ea09aa6c446816aad6f0f20f7fd736ec9fe996508ba01f8bb8526d60b1ee99ccf8ce446bac5154c460cc1ac70f52208eed7eafdf0365dcc19df54ca64c359d9d24e607ca6724df2d2ee9fafaadcaa09107a681e70b9440aa0742bb2d5a885b5c0891220a09da10263c35bb0933fc3fa6d3b13f7d56595a3863802585e3a38d4cdfc73c36011c6277d46791931b502dbc54ada0eecf30add5bfdaffa438bdd9888905dc95ee5e19155c6df54394c23038662929c67129316eedb874bf18bca21a91fcab58243c9019084ebab474e0d8d6b0df6da8e8a4d25c328bdf4a75d9c8fd8fb8c6babc62480593c403f099f1d74f6b9c368c24a222433cbb80031bad16897cc9770e20324ef936602bf65a1b7912ef6a24fdbf04a34239729c6ce385e48a7080f23d8d3e07612cad81509be974e3fe56030b76d0326f4d20348164d72e3b1df9f3707e1bbe937178ed60c1dc004d5903e005f8c3a0a9513be643e2f915d81234c6820bdb943ac022ba0044f46a159519f340037f5be6e6ad189b7424d5cc563d44d71253c8a860e53437ec74160151e7fba924ef7d1dd11468fd46484063ff13d1f257761d0c08a9adb483399b09d8a81775c7b016db483dad4e9a474e0fb2b0a269e6d7835537f87544cf91ae8ac1bbbc367d20bbf3b0eb9f4dd12b245767eeecba0cbc56f4463d82185988f91bea5457e50d3ba4a30e712ebba7048392d645ad1d9689760b1d6652f5259d479286fa2f2f01e1dff3b5f9053b19c25b5ac4ee1c61a3b17bbf0499a5230d67dba06bdf6142e3d8ddc521384e1383b3b22f8b3ec8a083c578d0442d1208f71ada84d11b36a94f2deb6c448f069c5ef37e88d562837e29f2401efa22755cf729dbd2cdf9b3849f5c66377646af047df8e1fc3988910f5653f9085b8fdf2699323430cb0e961ebba7dd48498bd79dd834d25d9454d90405399b7d600d41a273141bb54fbadf82673a543424afa7d861b6bbd370fcd1fc19bd0e027c47fec2485b7f1e67af5d5d6f56cdf6a8a4109271b60b949327866723906505a4f199a1485cd41b97c7e0198a8bebdb4c64725c3f08155bab236cf6a649d56513489f4682785d0841e60d380845c376499f8f0f2bb2bb83f797032bf1528cd40b02d816eac5d4461539fee33a6395ed0d1e9e75e86f496455f7c3f3297e93f2541d467306f720a22c2c652ea8dec8e499875f6952f51026191b1faecd7e07ab67518cddc8afd652926a0e9b552b4e19ef50a07b2327a067f487a64b1c870f0143da31cfcda2cd16a265ae0e0c405bed55095be246b565b516432089e398f17ab35f84c1da19dabd3c8af05132e2bad14b1f7602edd10bee515025bf827533464b7b318003e1b14f9f4147b544c58586ecd9c93ac4dc179527cf66fb96bc2288def10b71e6f32fa5ab3122c096364acc25f2d6c49f6df82e6e29a5609e8fb8dbe3b91cccbff00eb407ff57f9b1457b8e37decae16f1bb8dcc8775d8e87e3be0fd762e1fa9c03fe34f9efe4fa803798c6d22c7d579b8aebf5d5632c76d2938ae84577d5a0e99591ac99a852a715465069954b580b9c9a3101e4c63adf9c6ff81ccd97a07058c398282665d36bf0ea8eeaffa3f7a742ebcbf42badebf9bf8d82944018bdac1a0a95085048d37f47b6f9cfe3dba4a5162d6508da3ee87700fac3dc6f770b0b3e54a708841e0ebfdac51c0b92991b66b0a71f5811c9a92589ce44c1fa3e621b538426b09908294d1670ae143d64e4d35bf7e64407fd171e4ec16f55f842f6b0364d7c1337b6a6032cf37837dac3091baaeaa6ca2ea596dccc2cc5cbe9bd2f8a9c354900d9f7ea241e04b8cf44ab4483f223f596967f86f8165799fde15178d683cc0596f30b0d9a488cdcae130066aeb608c7a0a2eaec5d9a697d1811de00439eef9cbe8ee2635bd947f80a58c918fcee890eac4cb6b84e537b84eb22ae725310569552cee3e983124957b9f47d29106876f9b06c1e4782dd19dd26db41139e2edf3f9bb6d30b0ea3107eb5ca51827a2a8828aa3377726ea0cf1431815f7f027225c5b3e3529c8d3535181ef4144a7382677d159b1ced81d10d83b93fa8ca6e4fb2e74bb7f1f147127ef10641ae026eecce8dc31ad541eb6c3a597e6707575caab0a36387b8d2cbc07cb368bc777d70b9b31d712d39410d2c132b6a62c17f2f14d410f6e66c5b879318e4efbee0653879218c6e0b0a57a935b619a5689eef8b3c070fa53322e387980caeab36baa8f21cc6c2ee1996141c17aec0df696b0be14b08ae266a932a213e9cc6e8c6f80dda6b170d0eedf2b5d8336ce70ab877b76e2d4a76cbd3189f89c3f26143706849472663300b03c69ad4540c1e0e0cdb0bd6e03548f180a94f0f09212638bb002c4653d629f6845e556a6e482d396379f0a5bca9ed4d9fe86281278c80bb6db8dca9515189827d84aeb14fb5b62567def3d92d67322b30b12996a8066f913b265b3a07a1e622346c464d3361516c4c14481a162f3b370e8a319dd37c6950e9725796d3d59e20ffcdae5b5ee34ab257765aba140a95794d0ec208d718aebe997611802ed5e65859bcdf4989ab082c96f38babb29ee2871ef298be886de56eddd042c700b5c4aaca3cbb3d748fa912c66e759df3b4fd337a925689a53f020773534629874cbc34b1e3e1636e44ea9c89fd5367947bcf500404ca1ac288be09f585fd51e9de5ed67799614123acdb842472679c3f58e9d9e097e91aed7d9080ca64a384f1d1fe2f3c50d6867b2f70d3a2b16d60701a0cd6882946a3b487a2c20ce37958949428ede1077ca596d73faf7f34fe6b490ab379cba8920bd75b06b4ca659b1f9926ebfe497897933bffdae903d507a3db65153b784935f2c037aa661db3f65c0cc83ae75d67c3f87794fdf39fa6249e6a7cd851ed0139a7653cf4c1c06b5fa7c978d93163d4615ae80d94a628ba31f272039c0b489f35c3dc3fc3e049d86b5634a665b522f8a14a1b1bd4f30ce33d39ef5bc49a6369d2a0fde4ad3d3c9a4ab009b6a458d6cc6fa62502e7df5ec8636135097ef14667a709974a71c3b88ee63ee380823f631dbb6354f7d885b0f9d0fa6522746b066c44b684e6dee30d3f794a04714f93684fa84a975c775608fa63aea983e985405d5559706e472f8c84664ffe99d480312a65e9f41e315e94a73c31fb0ca2d9df480494cca22ede8094c140e9a3609be142bf36b4151bddb0697dc70233fc11e867d49647328a0c427a6fe665ba6cd36c58e14446336bcc42608d1f8d4053ca3b2cf1f8769c4c3a8a894ee7cd5788860aa3ff34655f6df195244d44dcc0da70f07ca14f71b49f84dac80875f82801daab4fc36ebe4b03f049bfff89655d9bb30794d600e914a14da4073dbdd8ff0be7eeb1b1d9e9d018514ac495dace985ac7917e57d28a72f5123963565d058cc572010660500af2fc7436184ab9ac5a81fe6452d95e2270058d445c08117aa17c121e21b4c9b4d5ce052761a6aab1c0326305af11ccb07c2540b239301509ed3fea11cfe1ad36462c2d4c26a1a1c0a4bc4a6d6daabb5d6aabc321dfeb6fb2e307d52b5d9abe1366cfe62dc88b914086ee37d6ef5813befcb2b36de06440ea512a97cc8149845fa4587975eddd8685491368877726cbf4cdc5c7615394d52254373d30a6b1d7736e306ca0aac8d5ebe6a707d43b4243649f5f905e49c4cfd7971c8ed0b3d68bf8df95893870c61d6e138bd576d3720135c2659497bcff3d8c91820c21219566f128719a11138e7a57d991747096ecd604d26120225a49aec301de405fde78ae901317e104d55ae86cb05aba319dd8e528426d6d167e4cbe7145dde642f5c70b7796a9eab2bea68f7b0185ea01004185b7bd6ce95806563be6b70ff5fd9a6130621c91f9dd9fd5c11814191576dc2dc7df94e42e1fa80b6160d0a128a0e6d46f42e56987356d8747102cec2c001ae04c9495ff6fe4180f20c530c7677300484f8c706ad836933ce1dd08b2fe3ae33739ffbf054ef7eec654136e891b259bec5fc9b9717d660169f54fc95eb840c884c582fb036f0f406e64f9ee823ac134eade325bc83a0b72bf8f1a6e9fdce3c12df10a8031c1f4a361fd8c0952245dcca8fc7ff4d7305f8c74a4e71a0e36711856b3146c45b8a2fc2eff3b39082f79dad178ea6ac60f5f9e3f24c67518abe3ad3915ad29e0e3a225cbbfd7c432e8c88657b88404f43c1d77c961ebb2d1f1dd8f1809179c7cd76ce922cd7dff131b60e510351a7da2b15d6d9f425fbac9ab42470879aeb72155b655e98c6c3839ad2d3c73940cee590b29a151dda502478b7ebc93f32881937fe49351e13b69478b5937e65ff44c2dd718797e06143b97d9f3cda15159b7162165afb64522a7953eed57c86e74004941e108f0ff492bb6901141f60c2ec3eb5f5f2d85e50c73a9465be576fca09c9044593f8c5bb53a2165395b373ffd19ff3beab3b9d2734fc53c0b77a9c917559592ea30d0105c23fdb662732a2d00c75649ede0b01520b8736bb56dcdb0cf633830c9856b909f79bfe947d25c9368e98464f7f6c880795d7f61a65ce9442cdc810ad0a0d3d9d87cc2f26dc5cb0da2d129b25a7547675af92179a181b8c98ac19e41860158cb3bc194b90db1cc4a5aac4ad35717c9978976f25fe3bacf61805a7f4d9005844418f117da9b9f8eff92c8ec79c8bb9f26a0559fbb4547d181376ce99a689761d0db28260c7a4ea3ea586d9654d77653e76d255dec729216e229389fcf1325921e3139a26660f3f5fff0b43dd40e3440534e810205a7c9e7a37e842a1a6a8e3487b5ab5acb93932f5aad8a17d46359f98a9407d148141dec892475a84ee4b419ae1009ef00cdf1fb98b6e97f9e3e5637b46ccfcec7e9863404b46496caa29e38e5c64353d1cdfcd6272133c05b86e231fa133e7ea28f94ba9d696740d116565435d1df4c7395ae23a282f388d6b2aaf8c9b6e794593abac7c15dd8c7a2dae2bc15cf5b9e999a023d2b3a96e65164b647c632a676970f74a8ea628e994ac3b8f2cb29a8211c06059a591d2afacde8707c58e0ac7bbb5e004b550ca99087f8a878623bdc7d5ffb840a0c78b479b49bc1d949d740510361b60d87c97e8d6009e449c1bf23043eaa4eaa22ad7e29533f66a0f7e3658901e4a47c7ede6a3c8f162915cd873cde9d016353008524a04c7644af4afd650e373cabd0ef27d2b8a378cc1f58e54d88338dacaaa5ddefac83b4d1ed318e22923deca6f0879ad9d4e3268b9ba23c4a9ef95aa9d77a8ff9df50fda691bccc8096875ae9640a22cb5b9ddae424c6bf4b48d4ebd60b45d12fff2abcf1ce1da3ec336bef4d588d88b01f29d9b715c7f8d3f61fa298bdffad27577f1aee704e394fa2c51b580798eb2d24ca5691bf0bd8f2edd22baaa0edc126938c10bacd338e5779354e715ec6cba64f200c7f0f0940ce1e342d944caa5569bac490489a8c4ccc938d0f327e34ca2666f0ee4e9bbc141162048601ac8ee3c77a3ae644fbe4ccdd239a62f4a9cc09c4836df595a819caaac8c9a293cdbde750de12d4ecf75568a1223c74220613ede4e78557972c6db1f24afe68b6bf2dd66e496911171660625bbc8dda9237cd8cc0382257619127b55164ddf4e4c0ab84ce1247e657cbbf09d80d663bdda1efa03866e09e965c42a728699bcae8af67d6208dd8bc40a20bc0cf9426e90e84fd4bdf7e17d185fbe54ff4e7dc53f77fb0a71ce5ab8f7d51f397c9f6c24e4224b2a3cf673f820ea3737e26f61cdae5e02e6fb00faa2f347ffeb8001cb81b963582c7d6eb5a2bc71919eaa602284e279e1f5067ea9012f88a34fb5ee24bcdac9824f9230131e956fada5b59b5deee1a3cabb4725020a59ae38d3d297de285ad7da67579a6cd7f12ea1e1884337b256b4e860474ef805b2c71154edba8c593c896a78678ad103fad4605ce5b7c45bab88a2bea103dd1ae3935c1d1e13b0ebb8430118fe70b93dab0cd2a4c0000b3cce602ecf9b3068f016bb386b8cf0a8732d0798991b3ef058af4e1558ee8aaabc93762c9b47a626b2f8063883d2241d549a40b839d67d5fc14cac8676195bc3c459c6e357f96cb8d8fe427185f34b1722677b8db3c168469a747a90c91c3d32f6cca2ed02c29ca198fa33306db7c3b4b60635694053d02bda890674b7a6b1ca8b4aad3737ce6c2361d373a6329155e84cadb95a8850a77e5adba95513860a21bd8364f46d6b885191e40def946e7fb54b7f81f7419416cc01c89aa91c346b9ba681689810501f4ff3c0198e50482ab70356b8eb75c8fac1225d57ea833271304228b3c23f779f110fc036bcfa1a63feef867b2f941f6e4725ae4802bffdf5b35752b27912a35a6e27a24ec245a5ac8b4f4b8d00290ff44e2778c22f4e9c77d3ba3be8c1354a04ff875502930a15cf974b7b2252ae7b6adb314e1476010aac7999c8724b95c269e09df9cad3316b8cb33180669c14e20526c4f497ea1dcd8e4ff939aeaaaa07fc91c437c73a3f04df174ebe9429d9bc9362ae99dd7b26f5ab802193684341df7aa4d643b103a9a1ee0d60fb188551e22e3d3b1d5f49d891306145410a180fd150b70b6115c46ee53b7ad699a911a1477ac8f0ffa64d7df3e15b9a683dc57ad9019f782edb9546136473474cd1fb3e0696abb627a26f6c8c0a46b994534695d1f05bfb8340e43bbfa292957f23b72ce57f146db09d20783eaee49650576dbb9d474fcbd6546916af8ee9d72139097fea1044f999f6c3ad48198ca809e592a7f11805fac268350b6fb4c1f3bdd8c81a89470438beea7ea6cfedb96ea1518c4977c8bb08d1242dad3fe32ca4545bc9fbe704176936cdf49826541daa74c802bd4d6f544a084a787a5cf898c2f91aab4f183a3a5855faa4ffe35d29513cec74ac1ea726e1a742d477e1ccbb1a8b2ecff429be5b4f86870b886855aef284075825cb3b068945f1caec3f3cd414e374acc1e9231d92943ce37f0c4e9295c078c9b38ee45bd45bd04b830f98286bfac278db2f530e4fa3fcf1f593af52a16dc625c333c6d3636aa19f9ab2ee903a5278b8d59a5908d54d4c59ebb5c9c3ae8eb3524e7e2b92fc5b8ee6852d6ed32ac77ad5632bb6ac1b6e4561a6f23a24cc163f1278785939b10ee8f77cf25ae56b8be703ec70672ccde35583eb4390f7a91ad68242879d8f08836f52ed858d7d655b24af1e9e66dd22cf959fbb2ec82778daaf85eb07408fbc7ee520e946a90b0b3e245d042f63abeb11aa6b12e14218441caec9e898dc99c44c6b8b0cb41d10f9bd7ebe73273ebc1377a18e540ebfc47c471f272cdb196cacb76fde78d93f166f35cf09a47b1258e923dd909d559702d5aef7b6e6c85e6a9def0e0a774d12ae55a24e23c2760cc892e36102fe20c75a0157887961c7346c2d7d338348325ee60d298e99db59bedc351f5c1c8e1a7780d0ed9776206becb67514e3a3e4c5fa2b881f638b8cfea4135bcddc5bd8c01389ff20c2940775ea6e39f126759622733745e4b5e0abaefed579530aabde9ab82a2743de923ed51cf53e304f4f8a4476d5c2509f6c40b30a4a4ed6a837fdd5a4a2742c2165424ac5c1b08216c220321558d433919c53fa217447eda523e080158a6b5a47fae256099f4de22fec374f52df91c16796697f88aa2005d14397b450e9e8559528ff13c052b5126352eb0c9317b3611b073c5d6921683012f826028935b13b776670e843b8d0bc72b24217c4a4b8a14d5f8c72ab7048b3be91030678dcc2a853edaec8b62fb3223071570202c9c4f97c975d04dd0b929657a8ed91b63c272528fe3efaa3339c12aeb5119f06332c6aeefdf9f3307f52d432a52ab843d22e884d0a55ffad2a518ea359f530f97bcfb6b9cb3cfff2ef490e52bb01a6bda88a8021f0efcc47888a18891de029b600149312dda31e4c73affc4565ab86ca68d99b556caa069d937dfb2943e3d40f34a983bb8eef6f75667a477b0ac232ec8564d538f89a84c0f666ed9f7effc7103fa4f2b3d90eb2893424262c890025835b3dd773528d4c55466b7bd153beb1cf820cfec483ea5249ad6ea0c5fe54d1c0a29a3e203432b8d6554108dc50e5d48a8cabdfd29d34a70b8ac87b3e7f3b0a4acc1818325659bfd2f3101552feb4634029254df073a05daae34b9798b585d450fa38f6a2ca9a6d4d04aa8439bb2a9b9d5a6d0c5f73c6334445192e278f5f007c1bff20650ac65ba3dc5cf96b41cae92dfe5cc028aaa7b3590ad8730752a0017c756efaf1d1f280f7b858a8ce8fdbaca0be616211459f9bf658c70be262829275a8be7913f5403c93fc96209054b0c4aee83b9201e020cadc59d260fe2843c682867a25896806677794c634500deda63e6cedae6f94d9aacc66eb70a4aa477c058aed7816eff6e183d89399e62dbb2120e20163e329b1e72d222ca0b420af74789dbe26bd2054ce469ca8fecd4fa3667c67402ad575fd6e87427cc24a33760c55138971d161217c32a73352a174bb480529d5924e7b4989c5491404fea8595fe50b6024e8e995a6f2b890bd6e889db64f8fc5cf34cc31aee545ef6c3307cd9e0a2a91b1f18b072b2895d10d729f4c99c6a205430d2f29b09318535da60035e57315c24f72351492a2c8876665e66d0bef90c48f13a2a0bcb3b40666b5a51f65012b7570a65afff52c9213e3419292fa286f9771e765203fc5acddb1023b684d3ffdfaa17acc4819a3083e5651c14c0fae35e50731aca13fb9e08a7c3dec29a2dea2abf3110342def1a20295cacff316a1804eff5f9d455aa7798b4e9d0317f567faf4b4fc29a391671d93deda1ad2c92dbbbbf1fb5d17ebc8ec7db458c9c2b46a2629718b092fbbf57f97db4890767f980cdb8c2238b9622341dc0d5a2f0fb308aa9cdd0134485635c1c1ff23391b72b1224a8718955787a6ed9b0f3fa11e3663a27c05b076012a5f21ab0e0551f14cdb305851b318dd80288eadfa2c5217f0194b9be1bc213b9fc8395b15def68132236f0f540eff0c7b22646f875e03438f641362d50804e102f3732b62f95f7ae64677b0b677f9749a98378ca8e8ab612e6fbdbdab0354a98ad0043c036535f86c0ba3b56f77e7a106bf775ec93ba23ac10490b9a271d96feced4bac13f7fb159850fd20d82593ebc730936d62d8ca0d8b0d5fff608204ccaae97f9a346b9548896da9bdee2ce550d3b738b380cefb7191cbd1b6d46346a800dcd2b48061918ae4003a719b31a508c13737b4fc60806f72f7b7e39b5702eba65ea1be7b18b6e2c4abb99c0fed5a659579ca9734caf1547e0365b09dde405239de52825c1419ba46be41b67958e5af480aff2527eef07e4e1dbbc50d46bb52b1c761f0f459bd10b9eb320cf33be3500a7e56ac87213f40e6a9f4f5d94538b42f43b3e8f38c412147bc2ba0d0765d9e38cbc08d145cf429569d2b8daab1e3ec094a4b2e19f4f7be5e51c5101b58a5c446b32a9b263c061b194e17f46507d53bd696db3525bc68830443fca229b48fbb2f32614710e045e99550f53180a0dd7a556374b946ae6a7bfc3e17d702765e7b16758795c4bb40707683121f190b614b0e89546490d4ef3b6e2bd476d184fdcfa014289f176d197851c539af5bd96fd4f7deafdadc844c3c9ac91e88618f4da752f3c530a2345b83ec5cc2a7bcb6d219474c88be8a85dd70d547fa4b4a29d1e46ac546923007cb51bef1d83dde5e9a998f01b42c58be20ce0731afd3e6189171fa95b83e6cefc243ddba93ff24accf14ef677324bbb665b2ddb4b68ff445164977e07501ced044638b1b86d78cd9618d2e74121e5126f2c45bbf614fb2864b81ca153a45b217807183689944bd49daefd8c6880462caaa46c50ec5f940f9928826ffc9771d8521da84756cedc77c5dbc56a90c8571830e3198c1f454227fb21ef04ac2bf805bb7b462a3b410f9f8ec1a27e80b1c3e54a9cd5b44df6e85d92b08b2f9fce564ab7c7cf06e9d068fd542b1c2e01831b4ac7f73e275c2c253fcea2b96c65579eb20185625a948fa5cf02ef0fa66d5cb1b6173f262be77ec1837772d97c9a5a8b3d54fa22441ef89d5aeae0e8eea0a9f156b8819d02eb611a1fbb10fda07846f146fb18270fe8bfb3a84837bf30a0cf42c9b8c4ddbd72aa67d96f24830fb3bfbc505927f8c0ccff5e4d03f6d9bb4be8edd951cd7c6a183cca29eaf1e847bbed2d6a9ba1682d250154eea975724c21f4584b32e5ad63f989bac48211c06e4d0a7f81b465b8d63a8744e19daaedf27101233f82cdd612c0b2208531e8e434199187a3ca43e2dbe5e0854071b69345f18a737914cb7fc777bbac6f1a2025b9852e7dab0728d48b1c4904be38f949f4cca99dd1c1bca80f7557f8223bb54d9137847f7f3c6dc7481427f08ec1153390a6539deae1d712dfbfca69c4ea390b64ed30f6b8fa90d08622071cff5cc8d6b94f584b34e42526b33fbfda24b75536da44555354fc22f975cf1db51cc71b3528d1d47b8a4536ad53ab906906230ceeb29c68b7bf9d20d2aabab1da157950ca72d85af1090d4818cb96f2617539f87e49ecccd9409c6ecf01ff88f5a2910b0cc6a6eab1dc0033ecd79d92297c0f1f40d238ef993cc49fd438ff13c8e14b5253d9f2d0fb4abc438aa79baadc23c753160526cebfb29f7523bb2612ccac7951f299cc56358b5af7c24bf23bbf960f88476404a0a8e3377940cd0280a37f04e45261828caa9565b05a9873f6699109a1f0d484c3cfd2cdcd845e39104ac6b5d500f0285199372732ce6d4bf4bdd391eaf75bbf344ce0e82ddc5795bfb21acab362fc2e791b7f2a608c8afd838e1c0b7304f92c04586c2e0d178f332bf2b65c34b3bc085b96466f61e89998a660a027c35cf63ba3215cb5d4c769c44a55aac99d6b026f3559165ac41b69eceb921dd72545d5d92b2793952737a5bc11aff4aa7bd862baf742ef6b8516a058aad26c1dced02faa82dd803762b8e276f8eec0b736e8d0f4d2d36af2ddb614b1e1b4d68d320efd0a56609e2b76fd8977b3b5461deb024df00808fcc9ebf17c7ab2383103bcb7ab5a3837a8f6dbcf1d38e3f8b959a046147046871ce488d0a2e1670a7605c3fc689fb9669e3c9d8af6c875bb1a6c6cf8c9d6c23d685bc5ab23c79509538d0b05014db12daa2e4c64702de88926ec8c85280084d540e5aa278d611e46ec2ea6dc1cf3642b4e2cec8b80c33cac6c9a879f7c701ab144633ad6a9e1fc26d2c210b23bfcce29da8eb2c40ddac76e42feaa96901a12b240f145ae24f7a5d16970c933cef36b9658625d82a5ba4e4be6fcfdc0d8165cc184af94f036e52f9fcc859663d41fdd0e11abd9225696afdd29bc84d42540ed50558d51acf99fe341cf222eaa54403ada10d24a6dba68f858a5ce48627bc94fe815e357cd5bbd554d2051bf0aaa6b8b3d9b540d6102d11140995623a3abbcc1b93dbde7464c00d5a57a51adcf5681dfdbcebc3fff685b83bf6f98e78a76bcd294d06b52cdd64eaa3d0a0710ca39d6242d8893b53bd173f41ca06f753e9f7d88614c7496fa54eac6464775a630001e62cedbde1b8e0dda9fa5987956b19e1ad24802939f72dec9d12882664394f02288307e29742b24ed600c4232744f99d2b355319280425a1a1d713285049eac99805908da0d7e1afb86a56889812db2e78896d99f9ba9a86f6acac651d588246492099e1edc1151c25ea5fe1a97bf6ddfd836c7706ad04fb26bf750cf381ce088d54800fd4106cc2600c97aaf29891b047c6f1437b0ca3b1989ff37c2b265b75ed2ca215e427c28f02d61e4579f129a64732f91f8382140b9e01d906c7a2acec1fab01076c2ab497ea4d87f15f8b63b4814f28ee938bd03034b03a297be46d585e07f72d1f4da7838846954b522945f46e5333bedc4f8e407acf1cf16600e7626ebd7cc07a0d13e3da1543de2333fbec3f33506a1a2ab17d8cb3ceca3f1227bfc4525fe638cd35d8f750b4340cf7fbc55f3a13745362559717ee41f3fe12d7e31d46a2d62064bc64415a1f87c62bcc04275b8d059388765b3ca5920cea230021375e1f91372563eadef131a5b2e182db20256920269de1f21f33981963dd5218f118dfe2dfa906fec26341bc1e2af3f5b69c50a54f50bc2e1700d31c6264bfe5398216f7f9f03447903f4dbcd036fa09c6a4702fbf300d5a9fb4c8e0c1f7b6cf31918de3a6b63ceac36fb9c15683276e465ec6830eaed3da2aebcd54ad147dbc0f651c12109c96ec9550099934cae13946cdb828c6f6bf4fa515b6ef62ae6643e07f593bd50e243f018985e9a83230f8f42f9c1e7dc9ff1e69ec1f8bfd4dcb4be1615c11b02b5eb12331eadb70f579c7fb2cdc372db1ecdece538cd5fcb1a2f678cd0b01063582109e10fcf9c489c87974b8aa8a2d3026b8de1997e4758a7c7a1fe9ad5cd312c1a0a2531f222625aef74ea2c9aff9871060e9e63f9cae9fd5a09f828229ad1d290b01acd15a6d190580d6c0c3db23a109ec23f6ce0af5c01ce4127769baff632cc23c20d43c5563cdb2092113426ae1c37d25cf5f3ce16e42971ad46357a6cb6786a506666a29097b921bdd4f92e0a7ae2c4b00509c4f416033381bedbba9b02e7074106e473c0e94e8e16f53d4517e26dd681c3d6c5a4f16f59b0710e11a63e4e0655eef0de70ab306f12e9083279a193cd3e64e04ec90f916814f0d0f0b90f0f75c03e4714743b4e9175bc8fa21bebfaf34098d532db5400504f6a2faf89871cb76856d38b99dfe56a086dbcfede221c7bad962cc42e78d8c9040383eec6e235902be11f316a2967b6f60831d5ce9ee6dde7f57ea640d4516ac33f942ad14256bf22c36f1e77ca6fdba2e7dd948563734c3a7a9108ef6cb448edb81ba1b392e8a52e93b4bc68524efbe58b822fbf0220f13fb5cca0fdc469df4306d3e8710094f8264f38024a512650b1780ce94ec730c351d9119fbce51ffac558abbfb19336691dc8d5e862599dbf96d3bf122b61a0522a684b779579f3568a1dfde335954226ba4e7050bba1245689dc0cc5b498428adf9762e1002250eb909740ddd5f0990fdc70bd1ce778d5c967a61bf03f0bf35de26a46ae8d0af3b2487d77022af8cc909aeb14bf0acb067f0098098d6030f069d7f23cd1e7c6ff7766a5ad3e20ec465590a9b1ee5e3d78869427e770180b64f2892e85e2606279f5c9fdaf4090865bf380b1e402e63b57d9a38ae7b2f8cf4410339e89475c7e141eaf5aa7c6b25ab3c27317f1aab1107db0bc9f0a7574fe4228fb9d17dda6f68a930305015ba6afc8e1b0bfe35cbfb2219be500d7775b007b379a3e63d1a7896c503d22601632030f062e80aa3d5a34241edf8cdc0cde3cbe770bde10e4cd97bf80440095abf01cff9d6f52b7b5e392e5cc68ca1f5295a95b84c64e777a47334c65dc7fbba343ccb311286b939a4648787cfbef4064aaea5d8dfc7ba197e74fa71b1f32dfd80e7464d7c37333f2d05cd38f74f06a172b8b52bfa3dbc5dee4f1f9b09d3f90f07acda0f0f99e39e8cc70b60a49190eb16dc62f74a973296b0aa492dafef1bd7d1ae8c39cf794cf6ba0620900a73b2c3ac199e7cfb3a10f1a715d65f1d9d890bbd996b1e6909b15e2eca6685c6aefd4559f5cf9e297bdf21eeff1f11da146097d2b545d258db744b72a8f28012184a9de7540b2c2d3a51bd3fd6ed1ee6f0a920a9ef4a04df3925c8d3229e7c8ceecdebd1e1b2d328905113f207409a9a9b91d10b1a38fc27d23d7010697e031c0de5dc124058745e2ab42de711b7220776961bedcb83b2cc169a8c633bd80a0f6aa7eda227bc5a97bb7cd0cd9cb855b35ae2f1547fca523ef7583572ded31ac33dc8ef000fa51a348e7c02e17cdad8c5f3869afd239ebf8434d277834aba318e4a3dcf2d6426a7e77c87daac8f4c665d1820d5e95f00dd07a9d1744eef8b4066ec648deb6b2f670888c8f06daba94b4da91afc69bd26de547b78ccb1767686281fd32e8cc07c2c8aa16a6b773bef386d90b6180a2fbf0c8572ed95cc7a401fd4801ece5eafe4f7c35207af7585854f3eff46265ed226a47736b80cdb9f61cab29b07d3b50383d2cb596ae86863146de097973f5b28970cc1c3562bc9277e301f9b9f63a3b45e29494ad0be1a4a4ca7e1ee2a9324866a28799bf3dafb1a6f810e58eeb6e47070e192b6e10d8298be5477afb84dde1990b9c4f0b6cb1d0739eb4b6244b9ce4f43ab42bd2a57cbb66863d69c8cd526a017ee93bc44fc71f4dbca37fdb2705976c4ba59e590f3b2ac54c684062ce305cba2d7128f8821dca7a585e96e2652ebc34ddce22d04842c7ac951d2b654a1181730d4320e8e404c712a671ab9e81d953f0f49f161dac4fbdb550a97bd473918c9351f1095e2c2d2ac2634a17921a06f7007584ca99c6125a364de0d03a66e67eca8a1a132505f506874c750e1247d7546509b5888513be53bee853de3862826ffb9e588bfa4e29ec0a351c245aa5ff6f7bf55b49b31426996ae564d897f50604b7687a96c0fbfcfff613f5e813a9f8792a2f0df4dbf2c542a20db316e1e745ec90c9ebcc853bc83339c2be0db644f655fc982829c3035f10ce1ce58aaa45a12dd964075609f256cd00520308fccf35b43f331c4062e0372c34c9f8db4c2d5ae821543725d708dee598003e70f905f771a9b75cf113eb5873138c7052bd2d9309c292418fa23531cd35bffb459bab63552373a3d84d93e5fd992813648b9f0b43401aaf42624e451f14507ea7183b8e04b7c76a58b2c1d55ae1bd7ff0af251e80fd37d4c9028919e8d07bcb2dee586bb49f5fe3ad5f9b3cc7c74c2db86c669a3900834bcc697d296db6e8fc063aba24f7dbef2e41087d751de6fc7a95d5100a432af7d8fe8adf8fea4967dbfaea1afc3325568b406047074a9f12263d0ce0b2ac76789ee30a99677102adf1644bc6327be8f13dd64a65f6870cd363f9d71f4f24b5973bf34f87cb75f725fd834f8d23d6f87fe0f4520efdfaefd3764458113235669c17b8edb06994d49f84522f93408dac8106a67bd2c365f65472ac9079085323f235fc2b85447a0baf15bfae0d7ce8b8b12ff20704e7f7ce175c1660a1462a8819867b5024afa80b9cd4f811efb4d2639e707305e8c39f8331435e8f9dabbb2a43d0d09eb9643546f26bf3ad8424bfe078869e380a413f866ed0e2754cfca1af3633b2e98ad372180a340773bb0adb0c0b491bd62b15eb99affafa6df4778b613548cb0ea929568ac076ae7fbb21b8ac0ee7c56b9d33fe6362932d1ffb54f7907b11d4f2b5dcd4ae717b4990176d4317fb6252c5396ed5fe5195370c366b9ef508a80193f19cf0286ac629c5c8eb205ab542eab901720cb1dbb8da1a1b231a6a550422cb4fe0db5968c63a08da816b5a3f4bfb9c47e334870edde9c3052fca9c31c752d229e55215abae565eee46ca3cfa2c84d1eb534890669cad1a18237bbde289b925898b5ade5525274aad996683a952a0bf784789b302b63e44708f3082507d82ef480a7deec11c7043a64cd6089d17b82cccc2e01f64d3eb3988f2edf5aaf74466523deb8b43617206000163c27343e5b46267b42cdd44dace2665115950936e08be39d49930a11306aa293d74f9c386b95d975cf6ec20df486a1aa4a474890bd8b5e70587089660b45e3a2e15f33d708a66e9ecf508b9a60dbe76ad30fa6e9ad4984e0778d768fb043e0d9dae6b81650fcf0149aca5a677c67741cd614196f72829b3fae385162183e93733376ef399a4047582746d8fe31d203501c2b22b43432099bf833242962fcba463dc83a2bf321fb0da4bec3d3c2707ac06a5097110ce777652cc2edf7c5eb8d57416406d966c38f7ae2f9f4d68d834a0971b1d1d8249370288d5b61fc666e668cc6af89a2fd3679f5d9daf9facae1dacb4734ac4ad7b188169b5d595c8dec531db54936fd0c5060bb7879c27ae6ece24c25bdc939898d54797848750f082075a6deaf0e553dd0101c2fcf159fa18655d54cbf7f7668151644336f52342472205e08d9f972db2b53e2ac12fd9bdd020797e9e16988d05576db9c053e4a6359466bf5d7d899281d207b7b4d1f515fb39c5be53d2de4e66b8118ffa4928436afc41f2a5e20b073ca0a3e79720e76c81142dd08ef445f65066c33d15a5c9a5c5fb0a4f74ec297923a52ab8af0184d1736e8c35fb48f2d02f6250e51b9c46b17bcdfd17a395cf88a7bae5cfb4e573406b3cc5b11abd97a4b223cc81cda46f08638c79dc760e801142ad3b5b6c2a097ca533c36ef8e05ea6503285915d21592be9074d0c21a85be25b088c2b155f6a7c9f4e7bc88b78c4e9a3ea699c294195de814a332af3ef67b2f5fca82dfe6456d723041179b65d69e72b431fd93112d388ccc46577cdd32100aa899b179137f15a445564b8a0494c0dd263efcb1afd754a193451817f80abffc31d49f97640a311b1cd7b337e872792e4fa797150736c397d5b481666f6e08fdca5c388540e48fb826df2fc2cc6f4be6cb23e9c7569b8f1401ad063894170e0a03183521486fc257b6efc07b3e31bded02033b13429cd3e7c062a92a5ea6b0a94d9d757ce60d16eccfe6d4d85a81e80024efe10cd8c8c925cbd109d03ba6a6c124cf457a289a11e02eb0d10df1a655728f4d260b6703ec43a414807ef9c9b120921d1ef01b64b0c2f2e51f1636f25a1c92d7a54fb6c84ef4d06b025de4c5d1b02362ca59b312f12310f01bb4ed523a246229334b2f6dfd03c9015b1bab39d2c5cdf8c1a91ae32c0e61381021e23442f27b31beb6d373eef46a2a8fcbd46b202f5b907985d48eed2c2fb3e3582e6fb5dcbc247661f102ca3aaa422a1b537288e6d58819e77063247b8a034657b15a54b429f762f3c954ef1323caee855a570f97550ffd4e8425380a62c92b6a5395b07296dc2a89e42099273f1c1668851b4d66da7568c8b89c90520a123ac36d9fdaa676050bf776718a7db28231ac67bf58773de704ba2e39a50743d761c3bed23c3d528ca1c0f71ce3b89b7d7372f08d5816fdd313acf27e4fd958cb382cc139afd12d9a1430dd4dc2eb014f93947e0bdad8b5f4001ad7dfe39d1470e162f03dd6c209921de6dbb04c16e41e40629433b1d9a7ee7ef2c3cb1c80b01389cb2c4ede25273c20bcbfae968caa2da3494af71f6cbc4f130293cd66b4beb5cc0da67f9998c24f4df8b2f1a35ed41ecd9b3916db5b579105cece2fbb761b2fdaf391554b1796b9b4618ea0fbcebf3f5ce7e530a8ce19dad35e430a11ed5418fef7d87c925cb84504a136a8b65a9beec094581e56bebc5fe51ad077016b14e006a83cae90d8909f1c11abccb1e00fb8203e3aa83f1f5e21572a0e9973eee722cd2ebe9c7e8525e1447c2b665ae86b0a67837ac7c38fe3382d08af714d5596d3612d651acd5e24ca97f245d517d7a6c282d12d629a6734b944608c1540f6845cb23ef57cccb8e5397e58536e4d03f6b50e35311e3322bb1aa3c42e3117591a33370a621e04bed15ffc9e09c8901b0ac5dcf0a7884ccc14be7b8a1c77b93f708ee871d3dd10bef0ae52b990c03fbfcc40c9c6ce9bbbf85cdcb0641e945cd295187e38e4031fff2e95b74127f6fbda762e7ecd8a32cc1eeb4628d21c1332ed22288bd5eab8fa5c2d61c794c7a1807cc6f5e3305afd8291ba576f5791b01a2b889ce79874dd69a9ef975348455ad1a5c431ab7a8733a0ee9b592b5ea47ea32825f1ae47a3423d718c4bec24c3ae83e6dc1cc00432c7bb8e669b3e1610040ed842e8071f578197327c66e60b059512a04e067aecfb117619ecf2262148f57d27dee319f8c34ffe3bac0fd43d6c101e814ba8343d6b04da0f63ee55feac57c02d360c0394b7e5d08455389c057d16738b0f614982d75795e64e3fed422050949a1251b5c2883570f5af97002d3c4046b89ebc56d1d93128afc8eef2197fb67d19f336389b02622eb72a0e5df7f6bf0d40b60ea7d316c654ffd4432f66f127d08bf9b79b7c0b06f93794de3a4c0b65eb8032d48273a23a826ccd3359eac7f92a680d5b07a4b970b3dd243995b4acbde8d5002c12cdb6b8dc313ab550c63166825f90559784a74400debf4e33afd9ae51eda7ab271728c694027e458b6e9e62ff8c86a1c51fd872e8f59e7fca4f8d90b10b20f8847927ddda1eefc8e83ba154fb60d3bb2f674c7a5a41dbecf3fb8e3980585ea5e9f2da87863cca302538511d24173f4383f379d2fffbb38dd31ab4db6c9773c03f4a20ef527365fccba69aaa1076bace91e8391e9b7cee3c87c743533098716c28ae338006e27d3ed1dc427c607126e5eee3172894e25b744e5b1a06e5592869f680c0e7528e6d7244f5d12a8f455cb296820a9c09c14f7db9607fcf067e5c9372c0836a3ae2544fa7dc0aca2c4291a805a107afd67e537d32e07d0edd6038bff3f20ed115ecc567be4ce61fadabe80be0b25ed759ca6a59905bfc270616b5c69a0eae30927aea1d1a6825d0f5a62e0a69164634e44b698aca6f7aec48f6529f639fc6e450d5ccbb6d0d102cc37acdc1da5f5ef477320fb2ea78a798e634c9385e391f499a2bcc1c612dda50945230c738fc280242bdefc9a5a9f1ff58b78b042a51b0afaab8da578681a698e8e76796517854d4d8dfc2e790980237c92d8e6d616ee7f40fe353f23fcac558ce39f093ddbf3d7a3d1fab925bbd753f1cf23c51e068d8ea8834198fa9f08ff68edceb88fc88c189f61534cb3bdb6672c3e36e10328d04190705ad53fc2a9519091d0bf590547214592d6f5a1f3978b50be26b5950bbda3c12483ec7089e458ca475ca74bc4aefeff7842fa641d2ca57a391e1c2a39e5769434302ed5658d2dc890f6aa7c33bafcf80c536ba9f729378269a335ef2d56af4c551294a086a47ec653afe0a4284db8267fecd3f1738e400579a9a694be46af4851dfc6eb100ce99b150c6577186532e8d63c9c320c581d310b0a9f94d3b75873a5ef2964df27279dcae9d9aafc6414696c1e382e746cd94d9165029ed87ab1c752daa85f40f83fdc9754ebf02301b2336a09e37d8c74f32279d80ea424043ec811ce6683e43a52759228ef3f032cb679b08f33c18b9acfe0b42e854ab47aee47e488da0121da691a545e062c1a672542e9faef5e22b238ee86899076ab3332b4190927d21662f9d77692aea19cc598269f6b06658ff23c3a3f4afbafb8ec61e0c5d5b80032f3ddeb8f11e8fb62f364cefc29dfb31ca5daf9122b60daf8af74d09fba251355ecd28c024df64e4551d2f1b1954b6b57c799edb6038ec56cd6c70aab12de6eedd0d3221bb09b8df0b04c0db924e6b0625d185ea3956730ccfe719f40f7d5bb2d6c458df2d795acfd1adf80dc36f3480f7a4c503916ddfe038ade55883f96a41be753a9a20cae306297544d532a2095887b49c27ad67646757421d1b8bebcfd42b26fc2f67e5df282e508254caa4d71af6a11771e65dc3b9e05219f4bace5c67778c11601612513b9b3b6bf549c43173e2adc27c7aea76190dab7a020322b6da69a0769931954142384f720bee04b0b93bdab471337815372bcd59384df821ac418b5cd3dd078c3eeeb23a9c75392ce677ea44b724d8451598cb4dea79a5f4627a8ce001435de24cc3d6a35b05c3575d2f21ea3ade57244076cc3c43e3b217083a81a5a51d27a77bef1f4637506abc19bc65b115e603ae6036b35fea2f9fcf6c706b8de6fe73caefc5498fd028887f82ab18cdf60be4e50d688f17bc64b48d537c0d4ef2bbbe6bc1b9fbea4b0c5f31a36c03787f944a8e552e33cb7f3a6648aca8a002db74c6890788228534d84adef15060c31a56a4fc187b4fcd8a215e183387372ab1d9dcbfcef322057061e32125a73e2bf75928e6c1c19cd56fd98bfc77b6a93390bdaaf1373778077cd8d42b1a9c703aab9ed940ae71e8e1a778fb86af7055b249595cf3b590d78c0a6623c994f1a9429cec2402fb2e09bbbd614591598c2e4e7c230bbd95975e6660431f93a95f443dcaeb969eca9c1dd5a718d0f3a9184b3cfdf167555d11c8eeae13582f7e5fc1ed277d0440c8fc124870e916623ce66d7d00985fb03287fd525d5b59e1e7ca124530effafea7a0e2e48300d1477265783ed269679dd4c458f93e6ddf012265c717cd0d6feb053e6421ab9ec7d6d2a768e8e825e716302f679dfc9edabf585c7845d8885223501184026b1398b8b70438ef72eef5784ee65172a0b8ad6e2a89c7a950630ad5ebcc14e885a34da804df5cfd1c760bdf87f75df48ba944c08b92285ca163a24281ad4ba156934aae8d0ac065810c7eb1c3425cfd1bd3933d8a0dceba6fa7399714d3c4aa3c0331921c14d8a22673993e6d1795e2ab0484864f21f7483852005d9cd4edcab6220ab0f2e68ea4b7fb9049fff011112bd3cae16654b6593bb822b8ed9fe2b54d3d08fa10c873ca3230c2018cd0d8d0cd1aea4797b77039701b9f434eac7613ba7165a7a13c3f64d8b12e4390ef896e8a126b6bdfc129df16501767bee47fa84fc08219f2cb55dfcb4641eb03a80f3580d87614361f891fbdb80dd9d3128afd92df3f81b8681d3bae40c7e4b33e917c8ec003c05c9972467ad50bd0eb5eeb7c8ec03da98e8bf8a19f4d8d5558bd043d1ea73c7f5c1382f973a3c9ad0687a6c018d327574d1073a007886571aa364a024cdb9c5a5d673166ddd13283b856c0e6950f1fd9e2901ebf79516fb97402bcdfc8b91fd373d7168112772f65525405db8a80d2ab76c326e74ca655d54861be9f873661c440c69084ef670b049970af5f6c6ed6f9dbd867e53df29380ac4ec5de88e7a4010750550f69458471586d250d12bb79a66aae9ae3bd3b60c0eab728f2bbcf86fd23dc40c87bf17db917c3ced9146abec9c93a5550dafecf9dbcc5b433abd621566b011701eba8902eb725f8d3e4b134278c4d4c4e77463e7dfaba04480f5d66b6c9aebd6a6866fe389c5cc37d8137a7aef23a97e94395afd82876547cd02b2fa90d79c0f15ec820b634072613b388d44764892e2847cb89ec1427123a90a4c45a4986ee7ba27bfb6ebb7c27db045b4529c7db53ba9f2b35fa2eb215727d99a1146da2350cbe350e26ec191088e90cb4d2120d9325c4282fb4107af7efc22ce7aba9d8a697feee634d7cedeaf735cee1e5e456a2770029ca3a115ff304495d162a983928b62f3cbbe63b1021f42d851cab04d6c2f92e7d0aba09675e2fe33b223c45d42ca5f0d58ca3acbdbee53a8a2434a0735adc86c8fb9d785a91b82fa679afcc75bfa3cd8a0663face3fbdcb4e51a2a80a853dfffac74ad3bc529fcbcfd332d19e78761b4663005cced064b3675b158026e8783ed518a84381723ec1ccc271734fb1497907acb1d5252e515ffe96697c400242a33fcc542ad5da8d25712be8b007a0e687322aeb178f5d9e805961bb55ccd6b4d4f6926f84b61573af1e61a4358384e0931d2373a809a758e499cd715532aaaeaaf64e0fe9f23e43a4b28f0ab6974abc045aa825b748647147d09a71e192acf59829894e5df5353d1fa3143ea1fb2d24a522401b7999db7aaaad7c3786f3b8737fd5ffb006aca5ed39d8c1d3319a9fbeefae3304cbad76c1d2de0642f1e981710ac3906fea14d032732b09bfee4e463fe48c54ed6cdcb9cdfbb0069755879aa3601127cdebd0e17c0fe4822d07c1d1320cbf3adb1e01a6c46dc1091fbe9fd6d06a3b28196c241efb9ca636539b93b2ed61ee498b2a40fb61aeee11e6b95f9068d52547c4f1a9560ac3ad019838dd2c7622c4e24155307d25d235c633f00b2d0dd2b10285c488da0f0757f450acc47b8c655442fe2f4ba20fd58ceee71718f4561b48761610d9d0483ebca8bf9d518688947e9a2d939d879a87c800099b0d807267436f71fd67b9e0ea9bdecada50e47681126042fafd1841db4a5332d50e504033b7f2d7b26a662d0d1f93a27debe0e19d667f579f12dba2fbe4511ac465e50fba8d5ed4e7a9b6d73f78147f0f3a635178ff76038091082d314f4424b4ec4608e5ea4fc519a77244a4e82aaa4f646e0058876876f1f73951ddb68d681d9ac6cd612f2e8413938c4912ba8f8e5d1167d93fc44a02612d1740a1f2e41d645beca6dc2c41c72589cefa11f223e1792f65f113827c68bf824732b2f81983b49aaddfff4a40132d9b7b3bb1079e063f17216232a0db99b7afa9fe16c80ce803558b06c61c9618c88ebd1f0c100ef52c415d5080fd69200971c5e64af253ac489f69a180f8670940b745d237ff8aa101d6f00472b6afc475014d322220369f7e067b76540d85238b964af323773560c92f5bb2d08c8e7eb86fbaa07280bda2ac39025f0d66a0638accbef9760cd439f72d9f02ffc7bc74f21a84eaa35b5a782aeb16bc73e7f524e7c63b94394ee44f67ab4c76ff60dc6d14baf35c437bd0e8ca61e4328f10fe90e084ab4a2b91b816632a2f583cb934f0f6c7a323b748a018f3d634afa048eafb75b6ddd757523c3f43ffb91008efe6299f40b3021cf1772051d9708609f8712f7d199ceaf105a88604442e653905a6a056652861409f84e6f2fbcc909a15e49f6e0a0e0fa038992f7e74150ea8c4d756ae5aceb81a6de58ad1f5be1ef1f4f4689f596f3ea137735c4817665c3cf5ef82ddc090edf13a25882ebc133dbd6e5d7dba2fc4aaa09b2aa0657fcf79247d8ec90270936ae0ed31fc0c341e714434517ad4c06c5956aed50db42b066f1e4d39d4b3aff6b2b72a07678e08a5de5889b0f534d2b345fc25bfc8699fbf58f2e1acdce2df049b8a7b040f589c898b8d482788fa216fd1e2873b074b452a13fe1a7c788637b5792f2a9d788d95acaa8c519b33af0b57f7f9cc1c6e5edb8d3f5ba580bb4d61f674d48b1d579dccefa95250e9a78cf318b8d388dd61a6658ff67ec6b6d726a522e68554d22f56965be03f8d3a00abb6469b28f546cc963fab0d76dbfbd25a1203b02d10103d73e525ae3d52b85fec811d370d095995a53306d13a5366b7961d7a584fa39053ff50b3f3dc50894a9b76f08aa2774e86e0ca1e13ea92fb9f040f11133d02fab7ac1ec0ceb52b242b8e720c2e569c65994abfd7adb93dc9dcd3e751adf5e49f39d28789c7d82c944651358d4141d0c937b2a80b338b6e4b729379b3a46d9de11e489abadd789b63481314cef538eb95427630827d1fb300b98d77ab43e7fd8daa938c506f30db58e0fdddedace817bd67aeb50163e1d63275b3d286ec798f7c1c0933c72050db04eac1f554bd2ea93e8492d17ccad1cb5727ca701186afdc9ebe3598aaefa0e2b446dd344ddef86ed13fa6582b208c6b25523c7e17711e7bc661d8a637c41cd6e3969de2e3edb6c29bf51ea0002afaac346ab466337741ae15d6a4956c831fc91867e424ea37c5ab279f02dc9c1ed8fc4248938c300ddc34405ecd8dffbf86a88998f118494a54125c090404be79a120ce6cba9c30c8e7185dd4c4bb2011bd3e52c378dac6ae726648c3f5f5ca5f4adf8e1bd2b25e5ec8e5724fd6ac88476edeb79c54dd87df93960f922f6f177176fe1b04d178b324268c914a0fb1f3d22e53dcc9ebb449b103ff68be6d4a18c8fd00ac97183f90b1b18baf884c7475df95ce5adb19f17040a84cfe875a330af460ae17273701d07f515265ba6afefe35d343c5964126d4db39cb82eebfe0ff623290a1b443bcdfb998dd7a37b355aec4903e169f27ea606f56fa752c31f9728ef0e72c148422b68f0243638d0fc71f705ce5949d40203ad650e2fce0f1caacb5cd3774ab0bffecd5a6c50a181ae8a0bef745e1b2fef8abb8963759ec731f1d6830e216316e483b742cde75551b19b129b18bd5d1ad05e217d9ecc75154d5640c91911fe02107cc553c169da09dbaabcad624ab01ac51f8ef645fe19a30f9f1a5dbfb09d48c8398925cd800dc5a157f3134868b903fdf53bd354822332bb4193359751424176bfa6c2377041c5e095c535ceabac2aede4a72eda3c9b101040961127ad2fd91c00b914189d8b617dacb78a60296e8dc3756bed8b4a157fd3b35bb56d47b4d0e60a83facad6071a277b4a1c41bd306d35c5eb04faa4696b80f124db40a08755799de7f2bbd377fe0c4b0d9b218071c73a9bd7b526b166249ce119393ecdd2294d78c62246f4fcdf76a778cd2d13b49d1589c0449d60ba97adf5acfcbc56804b85192d6bcf37a1332826864678bdae1d495ccbe7ffa8ce9445c430fc57dea830423d21d5c62f82b6ca73ca176205c45a636e663a53ac4ddf739b597214a24ca087544cd465f9b93bcbaaf8f02172f2fa9f829f4e27289159c621efabf73d81668695a712b4925cfe6ec3d3e16786e9323c8dac0ff347168e5fb71f82d010f585e23ee4d403ef25a07df5c5506b70fd113ba8a03f3cffb10dfe74048ebead98a2f3dcf287b5ad93bef86da23eb028d8a63787396d81d5a8e810b29e3737ae43fde5ef595170c7f78658e3c1ba46f66584e19564b902a9d460fab47c21ebd7c835626de4e6e80463022712a3dae53351aae04914da09900749374696521506827794202bca380c56849500e50e88ea40b3e1ccdd4a7260c075750c14935ae35e67698eb19558236fb4f2ea3717bfce7c4993e588ceafc8bb0e6b470b0d7406a45cfd2a2dc6f38efaf083719e606de5049e0798c706f6c8ad045121575127555290d8a8380665f86f44184214acd256fb3c0242cd3e31d763512175ac96146350444f9f2313ef1c07fcf36ada37e72295302ec121c5c10226e896b511c8f83dba404a3267e8c625fee37ea263d725c8665c4dbd90d9269828caea4676678d3cc2613396426f4cfa74718563a00df87e7d4d13fec84f7f2b0dfeaaee8e1b9ad57bdac681f93090711c3a0610727abdb734ab20404b656ba3cdee7e11c7b1de09780dce6a48f1764cbb4349513c6ae5455e4c7a0c8ae0ff7a8d624992bd950455b74989fe282125f593d16f6e06f90e6288407999c30b5034aa27e1783bde0f204cd8fa1e4035267155c03a3fcdac4a6d2dc3e2df0c8f76ba699eecd749225b40fb0957d769894e13e9ec499a3f7afe23b9e3e93748583581bd177a7b26d3169045f756b89636340183346be3c2c2ba0818d0b3070e424ae1b6e2c756b75ca9bba191e3c3bb6d58937da942dc846dedd97524daef52295a774707c147ccb54a9b383521d7737a96d83ea30b764e78283bbe7e9c8fcb2edb27b974e1da31092cef2e5fe170ee41d12546b6f6e4a395c0f6218507f4f1a84e2ac3119c0846f66d84b21a3b499eb63cb9c824471eeb30d435c858f510edcafbe0eff1e280b3635a7c310c902078e61922539d5b1306ced1a4d09fffab8a779e2277ac1d0d08f4146cfd87234382ea0f78535a1ec63d81a78eb00bba0cd477443f049c1111caf3633483e3ee75ee2ed70fe9a6f1bcabbd369c0b258716f1be7792b8df94bc28098c7dde01783485f35948eb2d2ef89319bd9bde995524314ca35a75bea4166cb875422ce6d0a1175a0e363db484e1219c055e3a29afcc84eed98681d8ac7c40bdc7f97e716b1393a174e499b04f5234c66eca1d4adade701f84b07a906e9125ba3f8dc6c5aa06ea2e887b11756f9fb42aa70b70a419ea7229dd6415030a2a74092f382e6bb711a125845ecbc3954186d00b38d9aa6bbf95f8a470ede3951082b07bb35b82519c78c7fad07e6dcf2a5e691948eed2e9c6a7d47a351fb087eb0074ef5226227cc5395229e7f458c27ed46bcd5b56a2a89a4e9f70465e4f9bf1fde5efe2afada7aca84da302e1a4624d6a5d253e642f38ed9ee0aa67289cca4eac1e7817cd5890644728233d03b7c0e558a58096fb385a1433c01f499ff688070ae1ed1b5d5712bff2c52a0a6e76cdd5d6cd6312c3da6039ddb185fc678822e704d680cd8e85b2c4d7da91614a0ed6f0d245c011b7c62a6e1e86cebd3616b49e568200f96669ef98bc706df8a28a2c392ab0f99e46ea130a881244124a9ad0794dcb712f34a6a208a65ecdcb6742ae35da874cba34c7d4c0e9dcc00a8263237475a7911d460c667ea81b0c364b81b3677080a8d972b04a2be232b87d42b5799e50ff168c96fab0378f07c6efb54ba382d2805d268166792f9f4d1bacdb42b3682bc19b7bcb0a8e2b8dc05340eec5d3044e90286bbfe3eafc339aa9047a92d67b05abea5192f5a37228e9cd7db8853a9df621061d64632c12a16b7e668958cd7fa54903f1f5dd557863fd70db6ea17b001735caf013a2ea54985bf2611baa875d68f167094022c388820bd43a5302b2630a04235d1fc3276e5aea0c340e7d98d8d211b41f2528fc911ce77dec1ae852adfaa25e377e915baee8682a53e9c7f3ec9636d6c210c105b8d138b68be25d14082e74b401e114a119385103992892d8379f230e12058436bbdcd78272e61ad5b9fce665ba2ecd1b9da30dbabfa30a9850010ef7367fd3d8f1255c6ff19081e485eea0df68761dabbdec5b1072d49337584fec477d8be9105fb752bdf712c70ad56b2096fb7fca72da767b78467c8f5db9ff59811208788c1637d624bc88cfd2c830dbe442d143a072fbcbe64c10ebba1ccccbf1717fd75e7494e0d64b1c37563fa74686b4f7657827fcb233a64f4979b7d952e80424951b17e196ce536defc7af94d5f5720aa333b5d65d79ce8f8d138e9a3cf1f15ddd2d327b27b14dcd0be48288d09e774a37571347b86193af1f6a1079f4a8c884d237c6687f1e17cde600124fcacb1b8f3b5f9f66ebdbd2c52a30557c1010e29e3f80b0c683b787e12ee222e6a085da9bab844839f9a3ef3a608d0b6c2b1aa91da11434d387e162bd02fc45376ad36f86b66337e5537bc38e9eba1385055d63f1ca0a0db09725509f53d1ce2cbe3526744d0756e3b39427ac9dd0aaaf43f08de1af3b281572ecef0cb295002c3451a203777da72752c6f4b6002da977fa6abe6a37e2668cf45ca4d1e02fb4d907b3882a1d518828bd0b7573452c645bce4c688ae0ecb44df4c5af89c39ff89fb21b7b21757f36e2e7015d5d0edb172d474b3b73f91b11c2a03740f653fc87f1c7cf43751b0e3ffd7283bd63121869145da7beecaa9bc790f80a7d57077647b6ef2feae3f78e91ebc0f09e4509459c42131fba86e9fe70597fc00ee7c785aa3a408655e9de88b7f85f4f32d62e190f23e1462451976026f7e77d1bf673247d4f4ff9fdd0fab9c3b714d698bb841fadb3d9ee50bcfb27fdefa658003f4cfd974a3e314f73e85d17e2c3f91b871c4f65293d2bbce17b87abcd8bae5d6f9e84a9bd44ec3b3de27b663f3339019ea371ec88893a7fc8eddd3e15de710e1ce9397f10acc832d2ebd8c947c1c92c29f566956f79747c2d4c9619ed546aa11a1d693cf997ec1e9f3436368acd10f48ca984cc8708df2d3591016c4b215cff38c1defb6b341cc61fa4e0417e1a51e513d59560be0e259656b2347b940098715ec8ab13454de6b013f07b8884fde43b108645bbfc15aeb43498c9e1b7473ddab03836714b9580d77ed8110ac2e27ed681ca1636be9095d3ea8a019ccfb8158752629373411e96c7743f873db815d61017af20cdcf823d85af46fec73df1cfa2d3525cc7740c1648f0c04cf7869dcba21713646df815143b7c39346527ae80d66bee0ad07fe1b752ecbee7ce504357768fa192644b61be2ef8431a894270e4e8a1c2b32000efa5d3db91315d4220482f7cbced1b0c148af0c382f0704307a245464bd2d3b8e301019254f4290e177392d39525b39291a66976fe8cde2a9b622500df2157384a5e50c362320bf0bf45469487ea80373e23587c80ea1a4195acc7669c79f5aa7a45402168a620427977cba9702338508479ef6771e51ba8cfa81964b07faeb38e0039103bf74dadcbdbd84f2b381e91341241ca950ae8ef289309b04549a6c7d0f3356f22a65939e886b4d0eb78f4df2144d6f856ec2c115be8653aa95896e2e3e7162bb950d7dd92a1c0b2bde0d04c8312b5c8915dbc054a6cbac89c18759a55bd416ad4a3c3783fa22fd4812cc2e87958eb5a754c5f7c31de69d6b3a43a0a7aaa3124212afed28b6d79e1c479edc541cdb2027614464fee3fd3d9a35b5b986af3ea5fef4c759c9acda85f713a7c17102c08853dd225d1da84484636b0b75b8f0f12d37e19ec4b00d6509089eb8929ea6e624615497ca5b244630a4467a06e6f3ec91317ab203b300f58b45cf4a393bd8aa66964dffa7013100cb36c57a6b505a4838743a86aabc9ec7563edea14b0410eac98b56007fa40c1ce836faaddf8be6f3bcfc642521ff14ec75cb0b091761d51242ff4a2a9248d859c814fcb95cdb878229a961e1d51f9cd4d67a69d7a4384aeaf352974801b95405207f32024076953fec85a32dd6928fce36a58872e5a5a39ce31bf920999c24b0260475d1b382ef507d5ece7892cdb3c8271283fea325194fd2c81804df3cdbdb7c697fa8e43deebb2f5d3fd473291ec47ef86d07164d2901f9074f6caeedeb62455db810c1f7f42ca10e761820b4f6bcd5b6117272075bb0de18be8fc7d54b5945dbaf30ed37b84e45e5ae5b361684357cf65f1ff69b0288e4d6b22f5c52d23b827417d09f6a9d651b8c5836a182cfb02f45a1868aeee95f95ad5176fc86a3d96d9983e76ad920ced59af7ed11b04211396d044448b7d7cf6af12a7b2316a0ee3204da7574c57a4351cf3c3d80434e4d25b01499e45c9e55127fc043181bc427ca8aff2436dd66134fb7accfa6b5c29864f9d9fb554d0eabd6f056f7ee7306ac7b0ec18249804d74d989022566c70787663bc441ab9df8f999f5957b087193cb96114971705d24f02177a8c94a69a50ab72c96f28090245cdfc76326cba419776fa2f5b09c3c8cc446a2a9b78265820a26db2c372f15be4547132b12f53692a61671ea6b493b3b6cca18ada4dfa557a4f3de9e82dbc287722c59d2315ad9b229710f1052b8cf4a46459b9f61302ca06b46c07d03992847f11ef045c4a57466a519e3fe956f61bf84178889c9d60f9194b78ef9745f20f4810c3e1515a57cf56ceee3f34025ffd3eabb987b9498ae3252e489d66273921a81487c114b00f01b59ee7e06db48138b76d10b94a8630e7206a828882ef3bac487869e5ac15aea2562024940a9e8e9c19a9c606fade52e91911ca3f4a83e326a45065c0b94165244e8b699cb84638d753574e41f5d2c58222a6f19d7b33babac32d2f5eb4b2bc6f231668276de96fcead90e051c18d61e71f37890ac7bbcc657cf4eb4cd5c6a2d7daa1e764b417bc5ae66ded77a330f29af4674e0fd97ed48ed34bffc5d32ad68c7edc69364bae0ecab64a920113035f7f369c8e25de92e982cb34d95c89c0b66cb4e2d26097af9c6050655aa306c076c480fac26fc4f521e27bb081e896d6b0bdfcfc260b597092979a41f2de45511e008f53392ae760e4e7a06e4a2d7dbef1231380e4a885353f57d369886cf29df074f84e49464848c2501c72a1bfab5022a0a0bafd118b54ab3a7128dd600735a8b5879a06b8f986fd028537ac07f780021ed028c1eaceb60c48b305ece8e42fdfea3fcad03e55bb81dfa07a63879d98da8d6fa77937bf65d2cd95dccbdd3591278e74c770b2309f9f83e3159ec94efb907834595bf9ec4d69cb6ac32f217b1bf0c27cb3dbc0edaca6a74df955e99bc99d30a90d871d7326eba53686b8e73a53f1c5b069b8d4ce3b25049d88ab7b58fdb739f34a678fa2a9b063b5f18d86c88b5a4a9adb3fb69c0b4ad68509fad9c595ab58554c3d18a3df409872e470f3a1ab394e05bdf65e91950473232eaa334f8ef2137c286eaf323ce72e3fff621fff92bf5a300ec9cc4184bd19d574b01c21088954e8652e5da86284737b96e388ce239362da25572b01e412bc58bee8003449b71a3a44fe63055336277700f0ab55c5b77a0fe20fa533eae9c10493fe399bacafe35a39b917e1bb1a4978cc203834c66373e8ae6277cbd98149ad654420a8e109cec022680fde853ff4c35609122a8a19b0186873b0a43b7fd601fbaa92fff19d826e676b2ec35ace6feb61c3fc6fd1188e2db04bead25d8559a4c669d8d558311fefe2269f843b7010d12d5977da70865bdac555e5ea4983883b45131943ad12acf4b4c58100570273b7be4b778c52516def5d22e0639e063f3946afd01731f3ce6a5b1d6f10e4070331f629921000a7eeb1369692120a84cda81562f3eb740f29924ae28175514ed2d130bb98864e647bb32aabb42dbe7c4082f3b2c08f9e5801e3f5c4e0cffad1d6b767da051de63f33f2a005841fc72f488c5fc30fbe17df6cdbe007ed603961eae4357be4a6900e489dc76614c9306435d47905a2b20a80c12c3d0f8c51961db1e9dcd182157d7b1bf4d63e692582e372d6cde60ed3cfe7ce24da4cceee97ab0ffb0c6008dab7936284785412483f92757fb54b85c56cddcc829329ff41918ce6902d961f8bcfd478197f471c7ae73e4a7a066bee88cc169b2c1624fb81ca31b9682f47c252931a1c306a2a54d6742968b7efbacc7980e9bbd3b0b3f82c135cc3f173c35d3c592dd430153819ca05f7c240c20fddf9b4a0ff08267febf780b96e2a4de23956dcb9079db112b35f3dfacf2616bb2bd18a6ef595df628c288fedd4b49dfb2b64c084436bc5983edd4d0dd94391b49fe9d814fe920d7a60daa473a2537c0603ea5513b1f05cf33d9920d112c1e09370cfce2869b4e7794c9dca30de9310dad06a7d6d938789bcef25069251d0b5adb95830e1f44953ef578d125fff056cbd450e63032e9f5baaffa3fc6ea129f3b483d464644ed5202058d29eee32783e15237086aff28ac66593e19d3ec8605db188dfb1212f31e3853a1f2eeef6a3c3155d10be5d89cf07c93f6c57a8349cda93d0a3300be87717019e92a95bc287ca45654979d9f7bc7ed707540009a7ea900345c1cc04f0525d169041ed8e5905dace873fd311ae12015907ed6f5ab5abf74db39cde121591dbdf0049abc2e88fdf253895d93f0df9612421ea6d5160d300ba2b5e6b2681f8ee2a753bf7c5f4accc7bd83535612a336f0cf13c9ecf64a6df2d6420dd0a1a1c2c9ed77be092018a8ad045a65f6582ab9fe3d7c595e7e1a5bfd27e5d520b292ad7f2f32b46af163cd2324be18320f6b92172a430ab02e8faae76d677047caee3ea6331006dfd29cc7431e991b0f40b6f2cbd07b6af99d2acaf483a8bb7983dbac7d2d69b29d8ad25d39e39fcbdc332547e0d467d1f3a5a2de66da2f80eb9cbe46160d370a1526004d261579de39a744b16a98212962c84fd791a2a376653a3c174acb75a7905efdf84f1fb73b3ef219cb6d43fd2b6e8d575182527e6fcf457f34039073bca1770a33ad9f1996ba0c6d44bbcb22a4338e8a3d0724e1c9f8c5b7eab8b2761638fe8e080102d4ffe0a25385c1a1f71e425acdeaf0c0d8d110e59c0b595c14b50a965e02c2f907afb30fd3277399d0dc852a036a1220d0e3b31729e85dccefe236ebf14a173c72dc4e7703f77408786b6b7fc686d21fa31244337fbaea99da8fbed8ad1dd31e652afec878bf17e40e3130da0472dbe5ab064186b55a2a3483ea9af513b07f56ef1da930b7708dd71948e79762264f6075df9c6f748a81367591a553dc5eb1fb2776be3fa6371d2ad03bba11f176320f28eed976acd7ab994c396f450c67a845d06a99356cde759a94a79d7336e1024e81db14295b0983da3681f7643d4b6f31280d23220091bbe832e9cf129ff10cd28675d359a9267b8b3bd0b096bd6d6e892c0651c398effac35d906ea7014d7aeb062d7b9a9a81d0cf57612ffe0e8ca6d48832ad944ad745b442acb8a345ca7289d3b67be0dea54cfa894b275a3596fdc8c6179acbd48f330f590694d94d574a4af149cf9de53261670156580a48711e15a041d8c2c392a4829bba220b546991f4d7ccfddd445e2d04bb65151a9f6cc5ef2ac7ac02f0729651252890d9ae73d1a067ade05b5f4b92c8ad9d881ab1703cbeefc488e1cf87a338ae70031a5370b1e2014a3e41dfc36f3a1d73531c7171dd886de3ba5133185ba15a226e10470778f2cf781e853c8364ff8b3ffd8c29f67a3925bd4de126aae0c5c99be1ceebd8ae6d1018c3c73c63fa26a87f09b2b982e3a2e4b00dee5af64baff6fec2ccc78c5d7f6b3d3d577011bfd4ab1bdf18dab5be56ea50e199ad841e44d239a75d33ce698e1ad32f6fec710132f4fb10cc9ccc9d5b6a362e8ec624fef44beca2e8479c8ecbc7c3f6216ae7a507833420175003350428800b88aedddd32e625f83335348578e297f298f93671f87b2e7a53ca2e35c7635171c209a397fab0a67879a0afa07d01236c45f361670ce94fa2e9dd928510a4172eb70fd0548c3ef480bb2326d9d745b21dc7c3ea7dd4df3c0de6ac7aad80eb92bae9d1591a44cbe2efb2d8e8e319e808728d8946cbce1eda5b127ada2c6a435a4ef8be131ba8544ee628a27b2ab5e00489fbf9e87dc9e459ca48a2700dc12a2993247605bbf5f61111b10af17bddcdb0f390fe561a71f6191d108ed2bb04cb8950c5548f503faa60280a22df9b83f47a6802b8df7218cfa127c78c5ed140c8c6c4d80aca979f29838e96f3f6feca1b092fb2ebd3870a1eef0dc00cc09cfd905f0ae280b57e8733a5bd7b44842c9cb26f51813aa8c6caf570c96ea92c860a982301f4389edb24a1ada749c47611bdfe3abb4d340c8d54c3e99fd752474497cdb9c17f4ff1a937f4446804b3085a434114c63cec395b9e7d8318dbc9384efc68fb077d478beb8a45a4d4c3fed1577970153cfcfd979ab6c0f09dd06902a2ce5f7a846826e4815d634bead5830623256d945a8a36b6e9683553bdad44461dcb81a165983e743b0421023d7ebea1f7db1a9802d89ed7b8b5c07f1e168576cd03657ab6e7aedb64a225ebd08c9d280fff20fa2eb499794130425c67c8aafc594eef03ece9c7b99bb53a85e92749557ffb6a7d81c9f45c2e167cd784b51c7e55c41258e6444dbef38a89e704c6a9bdcfac5a384f2f3128b85152a2dc753a64cf8dd2bfdbd5a8d96c4b5ee26d58106eeb9d03c0a9839f673c8d463eff9de526e35312670824eb2562abd0307214fd912edaf53579da050dd53f11178c46da78d10dd0523f1675699847858db96e3b1ed96f9f43d242c2ba7222a757ff4a12c8d6fb0c0ce3f04d3d1ec557d0270b556a37655f24a56cce704afa4b0d26b9f6bb74597969ad82ab35bd7c8f62da50bdad7fd43f70c2e933af3c7c4a4bd97ccb2d5edbc4ab204f0b63dc5a2624a2433beb8a7250c893f80666636d7433b50a21bd75bc5563756bb38185f3df5212abba0707aadd75dfc2e62c48f10ba862a9ba55fee89f6d8f672903460af26be70a2818f8323ef30c874cb532f927971f96fd3145b0f423bb332201dc55fbf9cf9dd98d589fb9d6b54f1e702e01a1ae26c88b58b42863b39bd150d44848cf8150bfb6c972b5b0c0b214229003d6ac4340580bb07fbeccd6edc860258f02b1d16fb6d744ad545c8a55d8b20e471e63adb664e05779faabae7391ade7a60e3243269451da191bd881f902a876458dad6508fe2f55203eedc02a50ca3e32d0dc15cbd65c8ed714bd8837fa47cb4c987e83f5bbe239875faa2c6064dedaf43dec281dd863378dd8ba78a656b8e0fa16b8ac5ae11267cbfa7fe84b20575a62c175b9cea9109666e8f5c2086e067ea8d9e589a096863f33c0db2e6d30a04629ec1531979efa2ec9023944b5b85e8f57de9123e682fbde0ba643893b0c49baf0cd6b110f6724ff000bccd29cc110dbe7c9dd3de548d28ebb58ab9f2e8c082797490e16cebb91abc71c169224f4cb1b57a43613691958965de233edc5eb60f77c5e182d7f81efea7a47d97dbade96df854c09723299f0059d9ff5d8a3b10146b902ba4d1528cb6e830565a836963e11268b82735d3748ba8b82898b0fc5d3ea87f3d82b8c80b3b9172e954cdb0f497b84aa43916a28ec4e8140c1e5c46815338edd829b7c6e855efe8e919087b1c81a3bfb2819a3a99cad074ece1356795f2dd4956e0f85c7f401811d6401e7846d08e8b450df421eb8553262f3a33cd790bc349e777919ede5f597fde70556bca6bd780be98edb458c3c9e87224f27e66ba09c920710e2d5ff455f5e54ffc3fab378b6f2f8d22c6474bbf2ec4fe151ba60972469a07fb1b3e4052688ad47939aac15674967a0cd59c1d2206ad3e9ab90dc0095f6be78730ded9ed0784b4990b4397a21d4da51a61a0df5fa9b95446362a23e8375297ec88437db1dc2d1c6da0fbefa10313e01ae1335533e775645ecb46a8976d83b5f886a31d466af3aea332340d05e9beb9c1cd7bddd88dc58f14beac8add19c8f9be842a3ea2f7b1323a4dc10025581ebe8fdde46dae06b27097631a96a76159b758db5bcc9a389659ea4a536a6accdd14708a2a6cc176fd05e9ea8e06b1cb9aa70138d1196613dc78ba30c2827dc140c113718899594d2590d2329d78f464767664e3a3ad0969229b2ef888a8a2754cf25f18264d9f8f017c9dde8eb2065646835484054c9ee6020038a8a2b7f9a46ac26674f47f2fec75c7d52551ad2335c70958b42708766b559f6fbfce9b8c7b6300b795bd3c69a22361f94e451c803ed66796e1867add5c9637a378c621576b5f2f8f81af6a5ba96e81d7e823df5b4d0fc7b90a0ca1bc545e497bc0c2e3eb083862142e81cbbf73b8f4bf7a0a94d6afd8ed24ddfc6b29ac193866a944bf22851ea848139eeaa9eb5730a48efa40e45800f699bfd746ebe909284bc01db1c39d8d2a5322df58873efbfe3c421cde3b5cfb4b48b15333f44b33d12d7e846a7f7050d9eb9863e35b3bb10f380a0d2c56a43ddff651d6fcd98ba84efffb610f11d47ffa26961b931fa67c665c0dddcbf8a2830febcccdada7bf7ff030e177129ff80516e99cd04c49dfe3abf8d37ae1806d6363aceb0cf26ad3bda60c7d57e3cb7424e805715b162195f3cb615de5b78c1e54919b6b12337a6cf99cc1a358c8614bdcf811103254eca279d9e723eef1e85dd3a11afbf22be6cd9a60d85d7027ea134774a25e45113acf90c873b8f437db331e4ce3452cac15da614f13a46d1cd8bba9c614d0132858e56612cc5cd7f4c0c9a8e5a6557c968bfd71c66e5118bf21df00f579086b03dfcb101fd655f3d58ef501d1ea62cc248a69b0304871b62a8d607394b34c7a88634c2cdaf166843fd4239718f5b9744756c9aef2614054b43bcda76eb0ef92e1a69393c6e53c39e018dc95f442872ac3ac9269e1718e14867236decdaa4806a9ab7248dba0e5d9147d94657aacbb07ed30ca6dacec124d9bba6216a26af236062ee58141f43f41a809f8de7c20323c3049e7f5e57b09900d401737194adf8ebe0181409bdb8fe820fbdc6526a72ec43dc0d6747754d806ec6743807a0961234dac35eea72ee934774809ab0483d9b1ff18a811b36e1a1d805e86f20b8af2220ac797c59ab8a98619c34f45af6c0b2698a0f86afd4ce454fff3b9ac8e23eccd1e8b32945b338599d6a8494b10e298e7bedb9b269f00c9c1a27065ff8de1b0c73928876d7b6f109b4f7c2819abf422635a4730533b17e65b09ff77bddc71e4e72566c85139a939fceed96c682d08a63eb3302b75671a3bde04dd37cb652589623c6ec6fd09d6f62fb6f4f1e6d7c79bf437927291df936663a507a56cfbf06d75599c093ba31abecff2b2a49491b194389bc86d4decf0e8699bc62e48e01d8de2cc0cfc37018e8940580048cad4d0a2b519e1c01da21061ab1d355b04a59765ec89f03e820016924423af14c41096d7ed194a15f6a5d9b7e297719d910981b4ccb5b6ca4147e844fbb7081a5e450f86099ad20521b9b5e3b2bd0c096f844883ef6a0eab259778f00936269a861e3bc3aa5c90c11a1dc20aaf42817484b10bdfa925fe9af70911b49c50d0e9d4b58f1ef4012cd7c7bf1601be262ae133656fc5ccd0f71a61106f63adf9fbf0919c7f544480206562acaf120e7b531d86c2b93c7490ed0caac10d975d8e0ca57c30db86494d76e55e0b5d44f7719612ea700fb22727b1ef8d3c79af781a973ebb877f1896b4c72dd02a43c5aa38f55eb41665e5d4fad62f1aa1e49c40d98da880f1f7dea273442880cc66d143bb42d1e5b69eddb479a5428a8be6d00a4d002523c64a4928a5fde0d67111eacfc3e10b94033090a84c8e445cfcdbaa76a7f130e474c485dfaa2e16cbf3136c374b0b34b2703e18f1c85ed9f56cb95019964e601eae872f59b6ff98bb6d102296ab10417d2d29debbf6857898ed64c40d899280d027feea896fd07f852e0d93d2de1f15dcf3402dc8d1ee561e404d6ef81fa978b29ca2aca79e7f1e26cb5c15c4b76d19601bd21d4baddc936ddb9778c7301ac18f581844511f8e9b4dbec20c5e5106b6f15a9e2ba69560e49fa7f36440e7cd21dd6e235e7e4e0107a1033ed7b8474fce7904c20e40c8d5510ff18765225439607393d06812e02aea7f41b3241920cc3219623d4893ecae03945ad2efbb9108967eff2483e0365a14891dcc62a7b1e6f11a74e96b7560cac445f2c8572f03071f1e9a9bfdc30d9b9246a0d7c0024b910b30f5aadb0c7839f17d553d83001ae6debf93785ca32dc0a7ee542c8e12b360e84d5adbd72012bdfd1c8a346e73ce0054edc688f8dc8ff13d83bb6d93a274f6a7ec086b1d511a4ac62af206c265081f4923d80dda5879f3707200dc13e28ed5dfe3851392d37fe783aa3ccd8a4fa0102f2d57433307234a4d056c848b2fc076614db2076837011c9ed6e05f87e948f971a9f1fb2824e66215ff6ab7b3434d608c5291317b3ed95fa8e1b24f6a0ea743264bbed14c6c3cb5fce75945c5277cb7b9ce11781e490b297039c572dfb35e266385ea1e3d1044d48dcb256c5480a2382b536301f3090639e746a15cd6163ea57a332229182638b8392c877da59154c53c77ceafabac15e852550437abbfa67c01bdeb3df80b8aa4e0b1efd6b6a6eb6ab6c0b924ae0dbea15a44f628c2a216cefad643e06ac0d2e2a82304d63b3617c433511cdc5242ad5703c70a831df01584d900b126ea1a20c300e91e875ca6e987b45b2a412bcfc32c81fd6e3bb47c7e8a696b4706050077169993c445a47fd555fb9cc0fa3d481cef86608b0b9089d580a5764faa448fc7bb6e70b6ca362d91303c82d53614f9e8210966a83e4ffcdcf8b3afdfa5b0a26cf9d58e16d26fe31b41bcc576a34d96e1b4769d285d811f5a6ce147f206536107469b8ac1fdab1653ce85ee644d03b68ad959105f0f6bf3166a381976f355523de444a9eb69b84b0d87c26d3ae7be01c8a39246473a89b7196ab81da715acf51bf19c3fcf3f594f16949441279bafdf5e1cc2f36784439619c9839d87cc434a3948386853f5e3509570b4b846f9f8d89471947cb53051f37ef8881212c72f550061eb089bc2db6b747faba1a21cb510a563380a2839e9b301fe1e7b88045bf9881ad260af56c0f51af23b8c68eeb9ba8e1a8a28afd2a8c0d8f0f4e9331a14dc1aa98545ef0b797bf881d5c77f67bee4e1531c64535494c33c44e811eb4f7b7f6767e37cebbf8bdc97c6ca1208c354a54ab32fbe413dadd5d3a0325da806a14a32518d4c5128b7e8445c7d71cdaee21ce229ef594dd5f0da663c9877b057a696aef5b408a14729adb03b5f9c900342f6d8669a96ef49c703a81cc70f83611d862338b4b16e31f79d75d411a1d1c0b92550783c30a0810ebbda4764eb1708966f52c9d7c8c721d7a0e978b2e34b9d37a11d67b028b23faf49400ee97fc619288a8d0879dcbea6ffaa247fd238c520393baf090c9b8f1c94a19bbb5e751ea4414b40574b1e8e8656d4d57178fe14fc28c4102f6439322de961e5f0c7db9d5f8f419b9dc7064e43d8df342a6b1df3f44862d76b4eaf548bb72852d0c45b4cc74b9e5f48da169b5f4b7a1e0871405ef369ade7782a85d5cd326fa59b7a732f93ffbc57e09169b25808c0b71042ceb2a8281a3f1fcfe0cbfc168a167a7b7d87f479520b7d8558fd84216bce733741fbe5f7499dbee244f6764cf584a73ae2a479ebc8ed1ada73ae2272746a7e11097c7d2023fbc82f83ac55ee650226b2f5f364feaf273f49517af94c7fd7feea3f7e67b15b98ef716fce5fc7cca7937ac38235eb7dbf2b871225f4983f6c7d503302b9a726fca646aa1648fb471708b56f8202a5bb4e0aa7844d2560a498749469dc939e1809054e73aeb34fbbc0809894e616c8b89460e234e15bcd8800f7466709b86c2e6f25fb4add1f8075001c1f7bae5bbb07cb0a4385f0fc894a68313cf12d184e3f9cd752bb8a8103098a89ede5a33685316e866b77cf36d95d356929d00d415acd077e9460f3f1c67a4245c62e267d286540c4c2163de5a37182feca02bd612261c8cf5cc45898811ca5e387c7a11cd3013d9110dd935a573c818e237c8bbe276030cbdab057639c04beb200daaa28df78dfba59b7d154406088317916ea316e81b5c8a72141bd74dfd719cc2630810f4481216c17a5bdafc61ff45cd3069090fcb05a55d569715ef1a7d99629904aee02fbbc536dbcb6b8f44f38ac85f74a3b95b5100f871a77ad4f71600b2f11546e120aa22bd57496529ec371fe216064092fd344aa2b4fb0ecefab9ba585bc355b0fcc24d0c1595de6cfda6eafd90915f576e0dd583c9594b69e8a3de2074ecf2428818aa2bba690aeec11535d84fea0a13616ecf237c71b48bfc80613b354b63fd69302613f4e12f46afc7570d6ac7c27ca463f9d257e47512603a09e9f67e3106afd9d0ca7f22bf6880dfb313859d7652bafd5b64390a3fea318e33b25b5c6e00678e4f6721999ba78d9d493921ba8118049ff971b8a26e7afd892791b983566e08894f8c60a7583274c464f64fff77375988a717870fe6c32fa3d1a15c0b4f937e6d8d13954b3cc686633ec6e27137f6cd0b63f1541849352b22b3d862b8ae4f600fc7f04910e8ec9cb92ab0bb55ae32be924d3c17c57082b45f5d61343f347c34d0b21e2254598bc45cbe8ae52fd8ecb74c7ffb95a1346d4c92695fc1c4d478ed00944824245ebe68ac0e9b73f634ffc0f1357cb7ea679095f7662e604f5aa715b6cba27b93bfce28871f5b691a6fc4546edee8fb8f257d28b41ee0d9ee7c3c779398512352a3c6f038e4b27cbd454daa9c77c7e5650d7449ba208531cf14c1baadba5cebb2c857791b7dc1c712ec25f6a1032f6e52f4e46d1784978dff891ff140511215989a13f376a501df4b9592e422501443df0263850cf164b47d3922b777417d89743dabee6877dbe437dcd1dc0b4f1f75a216ca8774c59d5c0f1ac822c8353c1790a3ee8def0ed7d31ea28b72e9741c92c7c622a33834d4310fe13f1c3e9fd158daec1ac201ece984da8f178dad7475311a2aef1489a992234bfbbf8afb560ada0ae4e892a41aea71da2fe8ffdcbf90611bc34aad07ec719c38dea7e4e47c7325f852d9742cc98a6bcfdeb20dea7464e107193829258f17ceef31120fff110d96a7d1759942a601c6a067ea1efe5417bebf95dea98d498d4c4261cb6a2acf66a7b631509c391b32c6f53368098ec2e0f5025f317c4b1daa48b76c9280dbd960ffc7176cc0bb9bc2861fa72006854ec35d5cc27d3bdaa61b35c6990559fe37b3262807dcd36e365b81c3bb568c5d5038f5ea299a3e766daad754f79311ff6eef00852bd4ba78fcb62fb2b35e98e45487c11b50956bfa98a54945473228889748d5562381ed52d2c3965e1aaf8d47b530f4e739f960fb9e718d603dcc11e645149ac99523f5d1e968996494ba7b32f446db60b45aaceea59fc732f3547ed55ce2f9af8177425a08ccdad396fc563c1855081634e81aee4fb6f546d1149582325b09b31c6fbe29b2680e65ac4fd816ca85d458d7b49430800b5d36b66a13ed3be371ee2c6ec1b684756c1501b9b3f6ea0d0a66a1d4ddfadefd6976d2e7c391d40fd7fc53863469b62d77f7cfbfbe23a1002bfb14fd163b805c2a553201b27c6abae0342dfe77e72740a1aa551b9c108b01da4723556c10f0192acb2106002a1bb320c137014332f7620a9740aced14adf7dbd928441b662d1ae83847d8550505117bbf3dec0b4bab20109c86359746b98445c5f0ae9a81df8acce712cbc8c738b08569051f672d099bf2c56ef9ecca88ce022cea1e005544d7aa7d515d015a772996d201c383d27447473537518298717f77ced0e84fbcd108c5aee139d4eaf6831263f847b1eb89b45e815a8999e886837d33a899c93aa39be12befacb5d3d5cecf86c517c7c82786ddbc54f451fab927f707abcf9e66f810a3383f5d495fe6075c9723e39bfeef49d94dce7f97961681b4334f57028c232f88f270252d47d2e3399c667e9425743fb2a3dd0f923b2733becfc8534f7083113bdd8df040f3d149800954111e842341b5f6c7ad0dbf46b0ecfaa8497aa1378b55be5f58da208c654e2e4cd579f88ed2e10ef5e8750d84ad8d1601a1ba7cd9460b8b69a2ed7071a0a88838f8de5a21acaec9a6cb346bdda060158940047bbd86fa231cf867630c18352c86e314d7e0af743efff0ee8acdb7c03f2eab82a9d57f79c2729f0eaa68bdabb987702d6e4a602b0734cdd53fc688ef919ef275aeb29fd09423462d61a51777b9251bd60d80347ed5be62faf142930a762355b62c3fcd31a8ee89e0068d4ec8f7ebe6aee84e6716263246dc6106b3976f201bb06252d7275b3dedc59da8c408633af88147bdbc7cbe89fe232d5437d95315dd04e33212f64785b70b6ad00360cf620b9de3fca992c1ceea2ae1c1c6f1f2a669cee53d1f7220259c8a02aad768b45d3cb20dc8f41d02d5795a3f075c05c2e232b8952a71dceb1a832c0a3056a1afd26656e93cb3101149f8a546877001f9ba8357f7ea8097c9dfe392cbac240c39fd418988fb77aaf1991da10ef9b97579483c6fe29136c67c1e39ac2969b40a8164701b42f41814226adcdf17ce509141f8ea97f62b8203af85f0fa89c3c6c0f0e7be9b8097e41cc44955a9dca70f336279b811a4fe5367ed2d95035b424b06cc68bca2a3020247d420ff483c24435c859780f0892629ee6034ceead9504921dbdc0e3c936af1e1686de12295a093ed363496a9fa193130768c0a5c37799a4a46ce6e2c1df988a8dd19d3d29e3618ef47b688806c0d3693d5bfeb1a5d94a4194e63c720c605670a73c406bf739bf59ec0fe89e0b43898304fd7ea49614acb5c1768089df3a2aa57f8e388ec15791d4eb4f525040a971f4128bd9e9a29ac7b6ee67ae3c6394a5579a1ff0ce689aa0f25f5c0b358a2a4e8013285ba35e1f43cb0007636b5d415e40e4790affa45a5cf19a9fec013e9b5989603145a4fc1242806bd298b81a3d64bcb01eea8abc5a559aa9ae18051addd489055d0cf9da1b64f96b5855986f61d6bdcad030205b603b3da4c6a2847dc8955134a2aed0b899bd317040f486432dace1ff15540ba45364d3f9d4b103be96055f484e1bc71d6dedf565b6c448096ee007cef47c4ddbf598228c60861bf26d58b423eafead4a0ed0eea10cf8e1ba715af7a099fa51920c5d12a85a05e44e5c7e5c0674c491c65fb4bd930db911373c2f047c16497211b97022ba0f6f931da161ecdd747d06f75b6ea66fe37f05a08983b2d97f5008ef21ef94f0a5fbc90593a6810fcef4bc07b15f288f158f246ef3faf1f7b84a2b2bffaaeeba0bf9f8517f250363bddafd406381bb57fba566db8fd02cb536f44685ecb729210daeb06fcfb996bbe38c324c60447c3b9b13a3a30a525f86022b61dc11cd675e125656ea9e59534500f010c9909841ec58f18e9c057a972548c316bbfa963fe61db0e41c422ce41b364f585d2fff96f173ea91016bac57757b1ce09ee025c254e0d72e87be2f3559806f1f8c89a6820a2574a2f644719c15cc57ce3a87e66eb8290fd30154508ded2f2c50acbd7070b7666d37ff8571e017d9bcefb6f2bc0feccedcd4dc045352ed0a00d86f38dc3c777430a511a75eb4800add51cb2851c8f12653aeb845776680741b72fbeea5818db8338d6fbbb38bdab55dafe9fa676bb38b34701d450da8ff9bb14a6cff03d4e88b25f469b0752750a0178e7b606dcda41de57b14fc9c6ffa534fc79d3723d4c0edb9701b6301976523494b0312609d66d68e630d3dd245f7a2be982b6e193447267281d19ee3069f84c9949fd85fe6972ec286b358d2f3a58352e815a9c3bfbf4f8be227220658de71b2ed19c143de536914b7acfc56d4ce5698d5074087e964f89ddc39f0afce90390b85eb8da0a14320e9523d23a37a157bfd0c65ae4a5b4f22ed6170292223fa86b3c82af386e9c3623c486e55cf97c7760b4661383b6f7fc85b4c08f67524337e12f0b35b0d561d92a587f8b7a81be5c3fd449d6571f07aed02a95f498c06188176bfb7e6cdf80abb724eb6ee240884ddf84f1b3d74c3f0cdf0d24c8263f587f76132a47b499087ffb3bffc19de754e9c63561040ca839923f368a46af180a81f12f407817026441e62d0707c5effa8dbb3c38a6560906a367f60e829e0369e165d439762fac50094e9cdceb09fecdd4322db3b7d2a52fed7155fbd42e8d4a32b4ad5adfd99dd4c9203df5c4aea6a0b04d38660d39bc4bb759584e2adc813d69b8d06cde95c0589e2e1cbe5fcf75c5e41e7b4d69ee08cefb27d9bda0f7be25e4b9023921cc7e1adafbe9fffae377e3d0b3746651fbea8ecda75c5192a11e0462f9ba58fc022c814e156f9bce2e05dcae025392ae87a5545cb5a12526f1c2e9bb0cb1119c30526a982dd15f3796f5ab7485a476cd8bb7012abd6880fd479616b1166948f69e25fcd872ad4b3e384230506bf1c216917186c29ba8abae13f9ec4a574bdbbb7941a0785690b242af4eec659582b85f5d86268be11dd4aeed6d29bf64a22f4010ef71cbd150a51029effd5b3f796564e5bd18bd5515d20c2002a0ad21f5649d28070143a0ae2cf3315c9c58f4c60786323deb510e58d40acd11aaedc9a4d34a7c8a5ae8c0d78360cfc4102b93d788d4195562829e113417fc09c247237b56ce3ba0fb374c6f1235e39968c4e63e5b612e1c1440889e5b6c9cfe6cdb8a6be049be3078580ee152e349b5a35ae444bee20f496473e69d99c2881ee0e69c4f75ee5b04e63667f0f4debab2760ddf44beac2731f276bd3708666882cfd39bd2f21291e0bcd2d60c3d9e15ed977d0c99e8b189ba215aa7a8620e5469a8d3b709e34c2f8a491d7219b02b889cb998ee5a69b8b6b10b5c487b474b86c6c4611fa0e991608032243e87293a81cec689f2b843958719e626ee20d4fa59b9a099eaf435488dece8254c5052454a610806448a71050db42207b609b33d2e2c950167fc36d5812b92db00a78d622a89b35a65f8a0290621ed883c5ee515179ab9931a57efcc40c4eb83a596ea5769e204061f95f0fcdffe7a9715088750e77adf8bb9c5962d8f245ef7173899eb591da97b69510fce8d92ae6b1797c57734973fcd58a3b4665b29205ae8a1d1399d88f90d04c42e7dade9ea4a29df3dc3004f21515df95aff8338070d08a4fc09fb4b3140fc73b4c5460890050ba486446e2aecc63be84b6abe77e478506b6a8c063457a0606f8f0a61948dc95e8e53814bc78485a29db814c1f78c0f38bb4d97edd0d64d8cbebb3179e67a3e0b84f1e8979e5f7a1a64821b11befc3dbc85b77d00edb2372246fd785940123c87e65d27d59563c8799818a1b9db9c9d18461f2bd12eb878b4a54f292d74fc904ccc39df38aa47bcda952a17cf2e0c246bcc008471ecf567e101fe986897789fc5e499b0b6e69d9089f84b5e0fd4c8bff7aa5d9d667c65278dab9e58a53c74ba34ecd89c3446cd1d681dd85c97b4763ec74a23c7d748d321418d8f6aa56d0463b6977afed59b547c2c752c0b2725efc57b36b79c277b20bf48c4673f8022e6c1dca4fb592e5f370e54c54a259e6d638baac99cadf850e22b38592ea4f9f077feef20c5ce624fd7edc4afccd4aa25f9ba879d62a487016d9c72fd9dee2b05a9685f88d2c3ba718f6ea40bfa3f45eaec4ae6533128549e57bd5e1a7a33e00948f8a932874958551428f566dced4312098cd5ba50a755ce945c45224effd24eb08dab0e984a4fcee7e15a0009d37f513fd08f5cd3fc8e26734ee0ef2392aae675a0f951adfdbbb5d1cb9c30f85decc59642cf8acf66cdc389639394659ec0107a540e60530b0603d37e0cf600ebc9a1bf526912dc6d2b3c034bcb4f2cf491d23fd566bc76f62990b2bf4de643cbb6d9ba0b4be7a740e69e1ae0fce6ef68da59cafd26b3e10d6e303fed16de5b1c8249cd5d47ffd18d6d3140bb11d31f85cdbb0fcf827fd11559388aaac66daaccc44f72db53499cf57a2bbc188c351482a6cea96164565a4c243ece1d3117228c41ff0657bf60506657562347766341513fb40654c56cb5e74fde319cfebe235de4626ba423edef400442e8ef90ef008f6b288a4bfe9fa39aa4dba30773b03236966ebb57cbaae011701a2f43b87552ea834b7bec9a666d908ee7bac6daf2b2a8a4fe1f8cf8620aeaac62fd90db6cb020dd7f43e5de0717b84220e160ebb9dc0e7c24ad41ad6ce30c6bcdb0c6e93382f43017a90522e96dc84766b659964b4d589fe607d62540f8765f3f5546bc305ef7535c89f64439cc30f61f1e5089cc7432bb6aa7348a9c54d1abf4b4e1dba52ff0a3db5776ffc2de597034c0eefac3391f54bc7dd61320b7194c6c3518c8ca2469e08329a6dd3abc12fb9b1e82433894999a5205e3833de20a71923627deb9b189f245cb40666e64d3fd3a1d538c8506ecd8b88b0da6bde7c2684a5230383ef784ea59a1b591890f1c50f2ab6dc90a29532ae81675dd8d24e90268521e5d7c609a10826cae035ac9324a5e1712b8bcc3c6de01a7685c52ea8120bd195e0ad2101cbc22b3ce3d6d0b7ca16b890c6c2a63fdec8f3902ef2634b186866238625032e116d077c9530511d53a311e34a711bcf09dc61821f319a4a8566246dd47fe94741633002190972181d147427d6636164500d77e97a571e26e21f890e9d2a60694ded6a628889d4529ec41c8cde4a0a85d0a60e5bd1d5da57442519edec69f0416bba00074f8e63d2ecb03d36983967a9ba24f499b543222df1a35d091d26a106535e97404b9ebebec4f78565f7b238a094210d2510ae3254b83e9483415ccb33eb774c46bb4a99f825438349060402c5351d8541faf23685d28411f043a04890bc714b78f89dc8b5ff0b3234f75a3e5a262aea48732da7556500ebd4516bec50b711dce4003be7d35808acdedf7befc29b2c3ebe15a1223ba6f89f921599109498ce4a754aa97d1d0e1dea3ae0542b88057a4da79f7bb07fdcaac073178974c0d8cd294ead2b1208cea8404c0758568b4de9238391a1d1be880e6d4fed167b198e21dde3628e7964612298a1b9530a5c942833fcb218470316ab3078809885b9627a2ebcbe1ceda03c84c8d9436d07e6bca3e8dee3f6200771adf99d778c6f87732c516793e109da9c73ec8ba551e6ebe3526fbcb275e76c3c31b2e52da66aea54fcf57012ca1ba7373749e400841da9aeb6f5ed31312fb7afbef6de3efa2233840fd2f6e7f5c76c8a49a52e7b9ee47b606c50d3728b2d6c41f662badf061b7172dd810f9d88a676c5bb1af96b337e8c05adb3df2793edc83ba7c847ef21b2221ac7fd4b1ee269b5228f1e878b7decb08c942f782249a9e023605d5437215a7d74509a2d0f054710c3c6fc1d961391aa4dd89f6fe1d8fb1c8af380d07ac30cf91f92748f6c5ede02f67ffa27c90f231420d5e2fa25782931324c1aecb0777742afe7aad8a5b60139332311e1dff1c4fbfd1bf81013cf5e4cb3defde9d3da13cb29a8978473ab67cf5c6ffd62a64983fb2986a8c45bb157daa77a54a272c35bf1ce5661e5e590847053dcb5c172c3f53f270b55be232809b3fa9f108354687233506895272f3832016a60fd847182af4663980e9b4708d7cd5d78d41db16d798985ae0ed5e69effcbcb7e272927cfc65118491697f74c93bf71625a23b674059a6862e96a7b9ab643b58b963c7ef2eb14098502bc8dbea3241fe7e9a83fb89ba4f312f2a57888a3aa9e233590895097b8b7bfd2055b543ad22dc0e423cec79b51e940473561c93871b2de73ddebf68ed031090c526f20c1702ccbb402c03e51a4514dd866fae6549a06a40ca2ef0c0c638a55c2f6859c0e7222f35876fd1d64b1ccc81910a7fcfe4af6f4cc025c52b4bb606573669448478d8b3d24abb58c9588bf81a7445a999cb1eb5c574a4aabc7ccc7f040b787ba416867ac72303e55c5fb2087523e3e7cf374e13519942fbec440cee88751622dca6ece13b2e0434cedb66efa8592763de7618b1cd0cb38aa5ac0aa806d1592d428e7c78898c891bb6dd7cfed2f45743c8a417556db28ecd2b99a2cd10c34d5ae0f6431f998847aeafea30d98d7c18222041778f9821ecd72fd0bc59b000f803da6c91ce42093c1913f4f1c06d9f430f95c909b5ba8c3e3f90e0dd1fdc1008f79e69b5fbd35ba183bfb293b8f4b6718f26613c67949aba477cf5d45ff2cb0c9bc64f9c5f626e95e658148e458e5dada9a925b87a87e60c13efd33da341338692b1487f86807f0f730073679059c01d99356502285b686319246b107c407b5aa4a387a19dc3e2fdc223fb76dcf289ff1657805cfdf0086374486abeb9fcb9bdfd3289bc83073b47d9dd606af22cd31ee112678ae4c7156ea4c5f29ac56ee245f24e0f0f3d68b111c93baf085b7c79f6ddbaf13f2920279181097da52d3b6ee47e74179321758d38c373aca53a52f0a6049969d5696b769ee072df5fa9f71e4a25e9a5a3545726f91e438d98563124816daaadf3a6f1d6042e98991a0eecf29b3a1da1bbe2fd1ef345f43ff9c5f9cd069128dd202cdc951f23a9be691c661f7c15a983c2600bdafaaba6fbf054da411338b1db68c15e0d72486c44544b0f997bc6d4a519138a5456225741e34d26c3a8bb3457ee89e01abba8b6d24a537ad0864ef7928fc3cda3750b2e23d6272981ce372677576e2675a8c89ff78bce65ea6f939eb76369b1148afeefe9a82d33db245307165fcc6f2ccdbffc33a8c2132843b61e2f826469d09bb1bf894327eb7e84bdbb7e2a01381fc87fa013e5d8637bf442a168e9199af4169ff42904488af9b8da8d119211c315e1b18e75d0a4405d1ca6ba8df8b234e0bd04d455346b0ecb77fe4988c8798dc185ffb5948e4c0359e1ed94fcadb38384ee296097145a9a990bf9557f455d6b984ba2e846e863ee94f0288a57d4cec3e40c4016012ae65cb705f23e0cba5c0c36bdf5748aeda554a9472bf014d19c12c7ca340f67b3f5156559e26cba8c40379eb0983e4c36f4adb4e40d132d963b66d6be3aa935e78f44882cff3ac71b7f7a1077508dca1825011f89332e5d0277989bbb9118c59cea4e72338ec7fafb73aa2e44d872d0d9c4f70c4fd8f68cdd4aa264b6a4c8c322ab1c70fa7a5bef294ddeef19db1371bf930e56d9a1534b23f7bd5d7e8495fc6b793f16e34c04ec4e26f349dc456d8c902fbb0da88bb87150385a9b91307819c8a022c7017003727e8dfe3d5155c2949af4792ad0e1e0257a95630dc4618cd2fee5fe97c159e13c1cd00fe3f8fbc07cc431dafa35156a00ee8c25a36105df39821e237480d88db7bdaafbbf1baa5625e514de4c4a7ed0ccc003cffa119aca96598ae16dd912a379fc15084d7c0d04e5ebcd569e43506c281137ab8a0cc396d7a95470ff6928b7cba52cc4edc6dae8639199da12b6c452bf4dcb8fbb0d41895da419e2bcf40f483683d00bc49b52aeb47e8158863c16df1a59b2d89deb0eef964578e3f8d0abd7bd60b7abf270957de635dbed00727ecbb3be2e4cf8a6a1854e98e8a495fd482a746e396bcf64321b03f34dd81df4943d2abab330209b1f80496cb7d271d459caf6104a725b617e6e8b66ad144e7948419d0adf57ccccd63c4fbf568fe25b7bc846ebaeb0538bde3888b7c709bc4e5c0e6ea284a9871865a69223295aa3a6622a19319a4d8d573c0a0fd566342d5ebb88d2492ce0f0d1c4de3de88d2715b31694bcf518149461bea0ba3784450ce17a70bd191cd976b2bfb94651e0e30e3a84224fd221098b2b3300ea7d926e8628a97a33fdecba6ae12054b65352b6f05fc2c601be4de83a9c6879a5dde4c54d0ebe5bebbfa5dc4f15bcbda43111d208572e09366d17fcfeb77beb6746e98ef3ef06e8c119596105d369869cc07cb0365b86bcab7c1c9c6bd17b9d4b6789915278fb0e6682561c405b0b92066fdf9a5ca88c5e5e6076bd6102134d18736f43589d68a4df1d6564200bd3befa95df26c54150a5f0e12baadb74d77fa15b4496bd6c1a615458d6f4404722b58faa4ab8155aa33f55c70db19b6d7721e65ad27cca8bba48d3b590cfca0b2a170e218c400bf38f23f98224b801360e4dee36d9cacf19d2cf5d0e7f2b330a4086a0348a286b89eb342a619fe5bbbb4513945d95e1321f51c4e69f30298702636a43c67d681f3254618b27c290e841b457a0a8b18a9ff0d438bbac85444d24598fe8309ae1caa758530992e69089b43ce5c73e2a648e9bf49fd8ded24b7fd6e6af8b42321dce498223d202a5bfdd5d68a7d6ad5cc5d53004c674625727ef72ce6b3b771279f10a4e49851d12932989a08f8836b6f1744e38be19ec11d7bfcf39c5e8c89c4a4ab92a3197a5837ac7a9e8e6746cb5f240e9ce6002d7bb80e584e3bc25959763f4fba626e015be4feea3dee0e3f7ddd169f59a58ef4cdd0ea823815f4f8c52495222411e02b4a4a7b4a1218d202365e7783a694063a691391da309f625dbf5823bdd8e52a67b77b73f9a4bc5b18e66a95010f32b293a674bf17be53ac2c48e8d2ed585916855f0bc19f45333e682b325767fcd428c1df914c8591ef125d9a0f476d3a63e2e1351fce3c30a73aa89d60ed9f905ceb60e8b4f2af9fad2c3680c802a29d7a4fd8cf8e275a9cf4a00bda4592bae868825e5d9eeda56bb364030b5d2b287080c01f6b8278aa833ecf44037517f8a9699975faa91db65e2c1f276fc2db983078f6bc211281ed6caf8c5cca57d94726c1e7c4248d710c8846f76022aa39fce07c04f147349aebc74a5c19d32feb25785ae809d9fd4596909542f6147d9767575d22b01e5a3ced296f0812fdd4d9baf5c89084c9f6ad56632e3543d5b52047ac1ebedca2e5efc52eb601cac0307aef00c2fbe8aff6f2b861e9f2543a9396e0d6aaa55b004fd46ebd2f970ca409f2107721f25f18671a5789a24e9ff3f6faa933a5cfc212375dd39b8f8a66e31ff434fe41b792eb7b3afb8f6a437efdca3c9d3344a222f09e580dd576ac00095d66e4acc8af3dfdbd0362e8c85c2f2018395f15b9801a03f04b110656322995284b617b6145db232239b2c43c2fd0d679d307e9065bc9a8b409c10e7f9fd39f3d6c9a607717399a20ccc30dfe6987c6280cc7b32def5a0a29b6f886d1e5dce5ef275de9675a0f5251becabbd9f142245f2dff9cd5c35ce59b7d02371de2ebce5c774b2fd81bad5428b65bb83f92af43cb2712272e393729381b941aef1646d315b0633f78bc9e177652f80d216acc070b313bd0be2c0bf0cf29be4b734d4323fad91bea548e073d4fa1108f89555d843c35851d06560260e0db25956d7db0cd7828794a5abe5832d6f1c9e90c8cea9495f78bd3e773f8ffd11c8eb6a08f12be8b5dc4ce4ba9d6e2f31d0eecbf8d80ae5de4c3c868e74e550ca430d705f241347a8d88b0df03423a72bb0e79a8b8d4e0364458d24f0bbd69fb22df898ec7ef92b378717d96a6cec2e5501716b8c8aea2db493dbe5404b5d7dc2a4a4063ea90f362cc7726f9f3d9f01b2138620906835a48d3cf55177846f747be94a9ed0afdb5d55f8ad907336a59faf4e4ba7a224b66f431fc1cd2a458e48d4b1569e94e1099ccaa638b61f3ef9eb044e5db5e3f1998f73afbfd0d13a0a20af06819a5e75620e8fe95b6758dcb18ee35630aac20fe106e4e4e8ad82c2b7bacc762b6bdb71517f9cc3dda20c8f1c4dea38af228ed33d61a43530603324b575dcf41cef3fa1f00a7c254151d45c8f3a69cb8d65ebeceb8038935f5531c179e40a13b9ddde97baa6343f9290bc67b7250e899655f030cdd43efe984fb2d6124c7633a76166fd00e11f36bc801f4d3455ecc48e89d3b45378355fb8e97d5a34bfc3666826b2aad2b0b71546e6ce37217e9f21f1116a966ed73b8c6ee2778b4919ea8c94103c554f30c8441e023f11f24ae244345ea7c29effa9398121963ecb37ab7402defbe5b5134de0cbb0a052e4fd53173298640d4fccb07f499e314567f633853e689bd5a2fca9772eba80b3994debc08f816d0bda60517e1cb6037f06135c4207d24997b4f3d9c21e280a6d862dbe59661f86445a859e5430bfff2253e5259b5b92231f1a6af2d466e0163595aec2868b75764617199ae4c01c9f82d76e9194fb659321c1f8b965f878b13d0404c61c65f6d18fbca7d288839573a11df572242ee2697e87bebb81341af12faea7cb7810b0bfff74da797497ec555cc34722bfc9bc5cb7553ba96e0a6d70c1fbae514c4784649ece533d80ca4d882b5db45674062d72b7483768975cbfbb0fab6eb41a149f70c89a53658cae6efa4cc03270cb1db930792bfb2cf9561e3b23977ed104cad9dc00ad72e104b0138947e4f6377c4373ba4f8f73e5fef027c4b1c447aedaaf29309da0e3db5858acb13b1b9ed48e8a1e17b15666c98b60ab48fb29a95104a5c9b5354b5b9a5e3d7e42bf09d063361231abb420a7b5b11dc8ed7ea7165846838824fb7f24cfbb799732a6c1d1d86c610777888de462f221511375374e90c4ea39825a3a1b33fa5ac087786fce8a2eb4fb29af350544d89b3cc965d300125866d1cde0a8f76ec4b6c986d981b905405f300b541942315a68ce933293784610686273d42e3633941996d2636967ba6c48658b771573a868661a13ff42431ec15c5c9faf888f05cea444f5070176a7737d5198b1d2a01034c5e9384158c81abee9f67e4623255a95eabf1cd6e70482c8d0a6b5b870828a569ec970bde2b5d94c5790f72a77373e260b91fbac1bb23b871bc87af0a862c0ca2a564e08df6fe306c7ae0bd45e2f36954b21d8594970668ecb1f2c18a359ff8d48c0e6083516a2e408cec9e3d21390a7c3b66151825276f10b30f0956720bba04689ff9f06c2d74fbefbff3801ec0d285437bdc27bfb9240d315991fea499f2e23ea8348a4176d4a195ccea3a9da1de4005edd5dc22cd4e79f02426ee876c62675c353922192ef6ef4ecce3a2a99d718aad0a1625689b32effd0495eae8fe4f04d35a8bb0ae4fd79d0eb5864e4a392b4c3534795210a4f6d84aeee948a048d19496ade6e3527f5bca150a53587bc13cd832316a9046fdb463b993b87930dc19fdb896b42f47fe5cc1f95a32bda5617c512e8427ed5adae046709e4810d161f6b68ecea07f26778af3f7bbdefb49438794440837ac5893f652b537e3024ee0062b04e4ad35149c0cd07ffc235dafe6e46d6e3d33599f1f34cbdbfd75d96c651dbf091ccaa61e0d3f51f75a918c94039527d6623429c4c87f8eca6c6f532ed4e3d35c57a365f7e72d2adef57055a87cbe90fb8a2187616062bb66cd473dab3afcd411ce7add774c338874167f70562aeff11b209441e07fdd4d8d9c1dcf7548d1f57a16043995b840a1bb1a27810cd6211fd3c1e2aaea6a2a59afa50f80ca7551cba2d8cb63323f86804e8bfe433ef578a217d203b9a44a7c89b50d13197b8a68363a7365946a401b07b818c1c52fb11ce30f248baa7e9e743e4c9ed79d7b367bd83b7aac98e32dce1531396d83c5bd21c2dc54589a5bb58ba0b8ce0b7e229f7c9b06b8bd6327ab2bed1192ac5a8f42a70996c9a114f29067ecd18527864abd681689c4d920e3a0821e0b5a05ec46be0371a76749b142e5c7925c4e8e3880a59054c43e56a0533de76024d1c104cfbc2d45cfd23190dcc2f36eb331ded21511146fea5ba99dd1af305f912e8fa5dbf8918ac999e2cd4f6573bc51e98a9fe68440f75378c697954bfd69eb620826fd267c973092225665387dc163bad639e7963e900c4db5aa9db6161bdf4e02cc839bbf584bd6d4910f2b7905c68270805d793a3325b5abbbfe01c1311eb36f2addbc08fa34c69ce825aba2b7754dabf53dd2b09256ed313a2b1458bff1b6e012b2b131c2fd0215ee254a94ef08661fe99b95eb3c0b7bb2ae623c89e3081b88d0941ed5d77582ebe5e6dfc81858c243ea99e4c66e2b303c967fa0deec5e67fb7705288e4584310f7509f5cd697f40b0a7e2b5fe0724e6a6556755d2c390e098dbf99f0634a45127dda034c612fd2456930c5cb6f5b7aab5def52f2ffd5332050e1a33c0d1a82863903d4f46a9fac25ac392bf8da3d05b9d4c9de96d96e94277547f570b87d2be0657ff0a537597759e0334ccb3d94de8d0118c163f37d4cc4166ae43d84be2d11fb70eaefa97e10a0a8f2aec620e45ec81853688b4809ca60684f8da4483046bc84d57d2522c744d89d329cda4ccd0c4864d7f8d1d746042c6ae47728b08354f4bc57da95ca1a4dced0d8a6d9420c16c197449cce9e7ddc56b274d46ddd0eba7a01df75cd1061d084fe0e7c1ba4193efa77707dbbc388273b6d6e8591f7f529681e497c5d4a9b00aeb5db61828b9c91a4dbb9ca39c1c78dc97c8940d2412657c5fdd7e1a00f63d61768e90b4682235a63cdfdaf957c8bf72fdd6129f4796f9d88b4e4c2912642aaa6cf8b66a8b9086531a7654578d424784134339b198f702b9db9626b763eb6d5bb55b37f6ed7aa841e0e3b18f1d755e495cc9272d3c7788852403bfc4894dbd5dfd73c657fc88a528a13b1f2e0d075c21a70d8beff602acc3b7b33a7123dfcb4b2112656f244344a05b45496dec8fa088ca565fc45f54b2993891080bd9bb3104bb880e3024561067743c29886cde2906f22430a990b00c3064b1dcb3b3d4ae08e673fb9c4bcbe43dc359fdd2c4fb34c001e8e68d9e7a7f20cb5bac0c1d35ff33b341329e89f52f2e00c49d1c6cf21cba3407aa3deabfdc660acf45dd616f4d02725f7a7a9874084f2cd6f5bf11fa9fd2fccb8ecce56d69468e50c1754fe4ddc9475352af21abe277404e3efabdccab3683f8db3ef09c023a9e0b18df067db51b448d2ec1f2e676bb0cb596472e8eee0c29ef9c42395c7a0b912c0b89b288e6fa92e5fd28f0d186ef99274c3389e9606b3b309eff1d972611acacd8310fa54e60e529b405f5f804741165c4d9ccbfc68894e4b1c57c5c464cb1470392eecd810d16d6c9d6a69652d11995c5a7531cf1e7e7f043db362c333285e32b265400781b696c30bf77ce7389d621c68863dc38a2067705717ed04e6c6f9bf83bf61d8184b0e7b565f30606c8dbfd5cc11f43ef402aa403ba916762f5f1925d73cf30829926ee57cd31a47a30d8cb0bd51e911f0e6650e401871bff64db6010c52f7769a866a5ed18dafeeac930788a2e9d3165d162e471dc464d3bda2e9d7be3ad01f7274e9738d49cb265019b8df23447fbe3e63bfc8880f3fb497941886118a0fb59c7ad1f8b340d3b469a86ecb5205944eb64b238d1f6e9ab2c96b81193781676b78334838cc96986a04b909d66128134752d9cc36ae9cedbe005f0e4c36062e6d4b729d7fa8139e1effaa61681bab314652bbb7977ef48a641c7ebd89ba04d0e0bb8d1cc094963ac9393fef4440d77071d4d0e93934c6a22b66b85573dcb639a73251b5318d8dd75d6afdaae99a0dc924dc6902cc71ea382c501c2878bd84963a08012e92f9d1f8361ea7fe3c86378dda968b8f1fd14911503e604df2684a4f98873bd2dd8168af1f8ef823294716342651efb7eccbf68f84268ed92689fd76e2d2f68d12476ea40727b3c08a61c69b10c6231ca4d932bc8a4d6898524fdaceb4591bfd9f40cdb1ff97154480f9cc06000c668b31d5af3cd6639ec786b460894ba9ebedbb9cc51d1d847e43f6805c582e54a238b28ea0d8efda9dc7ca1fee17b162c65ca77a7cc1bab0aaa20644c4ed2806cec43791a6c2fefb92e85648dca7ffeb0d87482541bdb4437a711f89e8a600fd6d59ff4447e3827b87316d1c71f9ac0c533b774bdcf5a8b83c1925b06ee21383ad95738d50e7faad8eefaba1ac9835074de1b01ddc9ae98bc97f5b90a55c8b156d04df82318249e0eea338cbd0a52cac756cf8cd68a85bf855b628c76d0cf950cd8c1fced7cbfa020bd10d53ca15cf50af54dc9f7aedafe20a466159d1cf5ff67b1571d2fe7d977b028d246d41eb9bcf1fc9c7c63cf35d25d56da7e6bfabb661627e6ef3222b6988bf3f0a57c439691a33ad19b1f2cd8538cb077e6403768834910603c6f7a03740e475cfcad657c10e40235919ec6e52186d413b1a18cc07d2382eccac86ab0c4794c7c2876490bbeb7b0dce4d25f8a7ae4b29a3fd2c2584eee0301eb3cf983b7492037f95d2e4aa1bd6b38d7765e61a4e38e3d1e33ebba578d4013114990aad33298f0bde42685a3290cd8cd58a685c5d24c19e88fecaed7210fd001ce47242282bca5d21ff187016cbd9bea10d69b33ac8a0a8e070eb5ed6ec6790179b433b5cbc7828e11b0fc9ce013dd739622dd909d7ea4ee63c38154e9c1c53962e8fea1991b7c24910b4f1578bd2bcd9b96917c3d4bfd28e0594339fc653abe6a6d71577e2c540b1f846dc71c15c75392ee042a8880ead6a5a88fa756ab8d787941414fbff032fad8463c2430b85961cc9fde85347eb602ba6435213ad25f6b4b4020dee2d24532da349191b8a2c18411b6094c8f9ab113047bada45b53b7683c5fe89c34771eb9fdf987f2ae9981f339e089ae2683a93415dc9a8e2a29b55379658b66db7c4fa045a2d47f0df570c73e26f77ffcf8fa04387afb4967e60506349bbca93b75b1825025b7edeae8fe54049c0362a8bba19f78352f7eaa8a9751eeda00bc73c458363f28dd20064f5b84b4217e02597ec4c84a6c200822841eb857dfd046cffd5d061ac66ea5bdd8f95ff8470a7927f2aa7ae79895a5dce2b48f4e5c9b72c1f3bbf223716c97dd44eb38eeceb9f258df312c53305fd2c14969c8524f8e3a84b00988d5f1e30ccbeec95946cff4f117266370c76c72ecf86d8f49e06dbb0228806e96170f1d252e2c34154b414dd305795b067360629b3c7c8bd20aafdf2dbbac01091f093438e2f5c6a436c421cbabeb6543f441485e5959e66dd84816a943506f0dc5504b3862d1308000b99533bc42a9081906b343d37a9775c6b279ee9b976fa8bf4fcbe1d109d11b7fd5daa3c2e408f81c75fd505cb071919421f585caaddb9e48bb8b4337ef0225117c7a93fe0f60479c8fcb4b5effbf3a721df969bc7e10cb5c66dc7e1c0d4f439cbe7c88997b0c82a6fd81b69b1af9298f60c215ef1dc6325ef94efe9748ef997629d0ebc450712c299e00e2b6f60439e5042be7278c994bd146824eb5ca9ce8eb3840d2e417aabf24fba10f8c83e07e6a51ec9336cd7cd76f4dd535bc36f4d2e29e7e6c34c6d870389a1ae64b601c05aaf7df69cee1c6f80f23970e9dac130f502f152ecc1db10542fc46dbfe8aac4c5d85eda19f19e5d4f37a4a200e72dec14e423339d593d71944cd1a64ce13971b34d7c389c3e476d2242fc8591d6e061b21bfa067f1fb3063acaadf2bdb2f4c02b6ea029b608abc52f21984643337f61d0617afc1c0c3d6a7c80da8d2a19c1288d93d0d9b30c1a5dd938fe8849692a1392bc55ac9e05975800a6d5a251bace79ae18f4706dbab0d85d9b2f811f8efc80b71e579542409080e379adf59fb72c208657255592418cb26415422b09aa0d1040a52e4db797f70b59fcc045c5b985312f316fa9d3cbb2eb4babf61c13b934c270c3b62bc53b0beb332c81b017bfc94cb43dd89ce96e742cc90ede8512b5f3cca89cfadd3267c39c14a375452898d5da608441128529a3da0966040f11450b5a3db6da0e104fd3842d24931635f90ad02ecf82bde0acfce276bf1d7f8ca3936baa79864688b3809cd94bc975e9b9ee12d4e122689971ad5a56c9fb008951075af0d7e34a69a75a2a012fb46654e42c8691436634a8c31dafe3fd0ba5b97cf900aa50877eeb9d4d726aa6b63e85afd63bcd751856bc19eab4682073aebaca2780aa0f83516bb70a778a6cdf27d60e83d953bf0a6d48cb649a68a612ee36d10493a0b5dc6fc9ec934a63b9c9c777187fd97b9360238a7fc9624208859270444912e81314071dd0904dc8d9316b8c4909736428b2b32b25270175ffa90b4503aba7e19c56e2f4d840184afab6fda2df6c56fa275b6ad8a135ffd4d754056b0f05a49ab25d14f34f1301d2c7a2aa13215c0140918c70e16a762ee3f0a134c3a8f4d0608a46b32cfe543a62e23ee090c816fff29dcc4944fee95f168c54511c5617e95a3e0193c8f8ca61b3b399eb82e83282eec8814f7fd108166905ea1003d2cacce75ac78a48a819af632da0b611e971383dee67b6c9ac4d85a526e189a83732c178bb1f36868d2385a833141cd3cc5b69848e0e5fd72bd4ddf6ac013a7a6568c029da4edc1f81e8f54ee266b7e4b790f31e3e7a8f8ff701a7af4f181ae0b8b763a9a358f1a059f8d8a6b226fa718d6060c5768dff61992a308744b8136fee1ac2982bcdfe0a617409960b0b62019274ff7564b8e761ff0478c432ecd66ea8f2b354b6b355318c813e67c4462abafa2dcfbbd2dc90a7a5b0612ee86cc00eb4d9e922822569d68e325829a2e087cc6ff8a0213a030933d6684105a56198f035021f355311f96c1ea3dfb5f4b0db7fde83fc30aa888fd135cfb7efa88cf0ecde6cbbe96eaaa6d285caa966e8b1ca49d4477b0f331fa5917fd4f96cc8d11e01e89573483d57bc85ec8fcb8222ba554d8693874cb950f606932fffa04481c9aeff229f8a55bf2388852f9977307d658ea6e002a52cbfca73b49f21d62f113921c0909125b07b4299701b3b1b0944103e517cf73f4a82eb6e6faf6a4f431f6c116bcb8c301bc6ba35bf2ff0daeff70c4d7b68e401b6c3eb20bdb852d5349cc167227b1b0299c8083784a7a351024bf4850308b742a7ff79aed242c86a78bb8f5f9a3f021b19534c3fddbe5a2ab80e8d569945e4e91ef2b00448480c271e8c331af044abf41acef9e0827d25f56c2e67edf63895e41c748f4f368085c48837f90bddc975ec164e6b414b308bf7e0ae9d79195517f513ff26a99616433c33690522be5862e8a658444de91c823505d721c3e73e85344f0509634155230c4713202f4b196ad1fe5968711dd546199158ca4fa72095d92655553f7c3e18143206f7dbbcfe000dbcdde43af306165fb9848bc90e91a0e5da8661da1e5e17ce86cde0d8c1a338c86c7dac26b689faf50ef8e186fe0727a6d3700b165035235ad0cb206735508258de45bcb0236bbc72dfa0e825b3048c9bcaf9f7148ccc4a2f4782c1ad8daff7c9630de608ac2db99defcb56f393e7119cd789b0004c4a5dc36f5f6d5b060f467732f058d97916840f360257eed5bf68e08242202059565d30837f60a94af4f136a599e62eb0ab80f3a27a9b6ae9e7d4a4fa2c5c315f2e8ffae677511fdf7c43775bd461a5de1dd6f064e8bd72f8384a17b369d43412b2b7b153b2f7f747713a9c679577386b696f1b016a08517b3ab9ba48ff2ae7ff6238a4b11fa5420cfc4276830014c0f449ab738d8f5ebcc9539af62932b92c0173fc263f2ad78930f41b4125a9dcc090b8205907d020ab902238007fd9e44b6f87e258b69e76b24d1b06b213db62118a9e7429b770bad5d823e197919484f7b681781ff17a3be28b21c91c55cd6b572390e393c462157e6b67c0b04d5cb22052ac9f5179f30d48d63e483948c930313eaa7fd5b45c1c907736c3924baf2c96c529afd5d3a930c679e05d1f7b2f79a47efa04ba9a52b43eb95cf6e24eb333aaa2fe623f90cef8fb3609074245492fd3a504006c5dc22ec5eab375cdd03aab099d215dad13566c90f6cefd74a7ae0f977c706ffe363c9ddedc1dddc7301aa084cddd5cf40065d4535dcad8b6c610173aa34df0ddcd4c89440ca1f7f265ddff20fd58e130a7faf33c96ac6455555997e5a829001dcfe55efe967d14f2beac14351a8cca6435debbf05a892dc2791c2e1ce1e9b9fbc4751e26f9819705bbf53696f35a3497eb8e68397e47a794cd2e6363bb5f43a84e8bea7b3d44a945212b2d8f9c4860f4e38ff2c1916f6f76382adf84afd085bd90e21032bc0de56e89f9024723ddf4b14dbe57c1163bd871c2a23eb4097e7c850c492bbda72104a0180fd3ec56efcb6341353510f062dd398ab87d628b63d4ae531e212ed025b9a2082f744b613437a5c07d96658503288821d8b7ed9f4429978f4b7164ed9d0926874e80f813ee7b6cc732e9045494a19e80a27bf8b623993ca6d64f55d1805ddafc8f99ce0d62df44a1f9fe0e2bdcbb9542d5f8b1f7adf9f570e26391caa176ed3e42ab17839883e77a523fea95ae4d79395d7e13b0695219dfbf139527ebdbf4f228e6d34c182265ba13866712c5ef21312c0dbee94befc198f691fdb6ccc545209ddb28577d5be807d3e2abcf7e51a675021a35bb99c8aee326c64dd7c32b4b4687e7e408065f106cceb2f00a701b9a572b0fce8f67f2fc1fe7d0dae8126d3d4853d7363eba70a8d02fed362faced3590bde89259bcf6f252c2623c124574889cd1b4ec80f95bc31a094d6a7e3446a2906ea4b110224415b6a41617b37e5b4ffde73213162e1f1271150af95aecdb9f9d5a47b84584784b232fb98d44ce4e13a761eee7559efc8fcf8c761212802c6221c11f691640518ca89ffcb0ade87a652930209f1da8b506aa5b9323b3c8f58e344a973240fb902d3f182be715dac0ec6d4225515a115724ab9d8f44313bb448014b4c68dd3918cb869e12baf5ddd72eb03e0401a04f21b39a3fcace5b8a0253d389b8c3e942f8f85d5458560087c8036b63ada911ca2ca03db0a8327c99632bfa3046e4dee8ac03894052ee9d7c38feb4e2f2553feefdb969a0adb3d3106f97167f49f6ba142a83ec7781c9f64435e91e2c5135ec2e1654b1810e7979c14fd3917cf3d7133c4b42b616c73b08e915946c64daa15e87391068a0d33f0b8ee58b2265f5a83af3df428ebf9327d7262372a07ea39177a52ab0500feb3ea7aac41807c45ed1569b8305dcd6961edeef669001716fd6eca1efe9b0e7d576d589216fbaeb2d1ac2782b7fe4e13d241cf25d5e2102dc12e7b850ab848b0a6c7905f6955a63f3b544a9a9044ac554cedcdf870d89a800a86338c1d91cc1c9b7a36962bda6e2bad7f2565fd203154e43969494e9fb25a6ac746ee0d9ec40557854d42e18b4255b03c08a1040885aaa6418e4801756ced99ed7f25a8a4c66a069a8feac2309a5d866749039b93a342fd02558be6647c5f0824a0c9bdc11a964253389d13c95f40a944cd255bbeb8750466522e79a098f0fd498481e8af940a9d5890a21790e5fe2920f9c636ec13f46ca726c8c68f4d2e75e245fcdb7c76219b5ffddd055eb37ba46e284d72250ffea5fe05506bfdffb8e19f2dfe8325ff0e4cfe5a017abdadd60f7df885ad313b4768b8d6577c959ed311c79e25665fbd4f4ce49a7359b592a61e617d294df46d205d4e301721c809e522b85d559948404cb5fa550a2e30a57d135b59dc2b343bf387bd81e8671989d87cbdf69debadcbbdb11a03503d17cec2f6a8e8b70b482db032d5ba52390fa29f7d581059f9b6a1c678aa9f4b68f7ff9586bbd25b8368bd749f768ac9dc54477a6709d8e6644ce515cad0ff02afc94f8fea0849ad47bf06528b6e2f8da308793c596e1563302096ba6c51fdc1c034024fc1c534584cda7913e244a8951eb3ec153af8e8797531a4f02377281b92815526e9c7427e42bafec5a036feebd6c884193a17c56ac7e3951128218158165377c94828002a6f6093532bec94e48c87d58eeaebd944795313fda6c4c9ce228a845affb11f58c480cc790573c5d213fbc5e2ba3cf5a46eabbdbe9a685aa513851a563d66a49c1419a93a45d5ce3e03a971e22287285a787e1bb615de327d492e6bad8bcdbd2a3ed13d6aa013d55f5231156311a0da8c1ef6a4ee71499c7eb3763243fc3b7e10fd254888c4cc5186e97041da8baf6d3666b60a7e8443b7203ee9b3f34260b98f8b4d991edc72083aa37d77409e6ade47980c14a19e27cec25e86b523e0b95e182d55162e1655e8b757ac396aed8c8d8ff7c663854f6d92d0adbeb4a17177d458b409545184fe6c996685bed594ec5547548e3eed6bab2641b27f4165a535e3061e1ef8224367281b64a5770b5103e2567ca24d06e42df36d954d998ddbd68cd239c0519b21ebdd58449acff35700956025052570485e7a6ed35c79581b04aaf2bb33bf22d75cc60cb7dd0253fec6dc9acac616cae1760cebac21a62d2f3d1911c9279b1113a088c3b3df9b36af8dff14834544841370701d944c6befe9edb0b4321d1b8536a4668ebe14b11fd2ed7e9fc756e238cffe2711308d58aae2924197ea54db40dbcf4f27c784e72f610860dd3eb40a10831ed6e9f4f27658b71ef6be83aaba8859a893a3fcea4993eccbcf6c2ef22f521b469e9b2b5cf517258a596c22fd680755027f205e13876719f1d8448e04e16bb118b08e7f09248c4542446a3393c873efde6078bc2043f40e91bbd8cbf570ee955bb67bafbcbac2417a777ef4731b53bd28c63f1a05ea8ed545c5dfc53cb28b2f080621572805c071e66f383edfb7aff225d150f7ca8215a62fc932baf02dd65e0b86cbb736f0907b3a70ec73255ff6c9b247aa7f0e6d550ff9066a70f0bfc793594e8f1ddaedcb137556566752b9bbe6b4f58f3133859fdfbf69cc1b1febe236ba7224aefcf0534d3d64ab65714382198dfbe0faca03eb69d228333f2c748dd3ded3ba86eab01d74adecbe9f72b7f94b72ad36894e0d047c6ca9a4bf752cb9ed00503f1c065dadc8029e0bb531e1a5d647f75becfa8ed4357b78e37791cb31a5208d1766b36cc41f1ea5c35170b8b0ad23284dbd72105f1ab0ed1281bb1b8a6b8975c4a9956a72d3a63b40501416697b4690c3f76a31d5256c089c10095cfa43afe378f0cd54586669d997d912ada309281f7a659a23161e08a46ac1114de1257bf791431ceb1ad31792dc207bf24c5be28ca131797f49c8f4b2658f52a859551788f60a5a88bf40f255b432b4f48c51829caaa475553fcd41aae8b06307000adc444422c68226fd8bb480f476a4362bc14d34184966931ec5dff0ec0451ab7594959e938de1904d24217511091b04cffff3ee76bd4627eb0a9052a29016edf65d42aa4c11e8339c0038e76fad139f320fd0a648fe7a66c840ad4443b0a32dbe66c4541ac652a70aaccf82bfe9881a1ba68ec593925107d1c5711e28a7ee6db18c48383ff6a99369baebcd2aaa5b1c2e5d0de73ac806c2bea6e21af3690fdf69c0df2fc46b4d066a462ed704c362b6a61d0845e69c086958bab86db92fadcc87c766c0f4d5250e2bc1b5bc299092bfd660b326b4df19883c5f27660fd27828f252168e0e5508e1cd34b2bed6c6d39c4b0ccb792ae8aa26ebc507bbc829af27a97d6f13ac2f5edab5e8f97e99a6a46ee1d2f802278023c74d0afb9539c967bdaed89474c2280ed005cacaf465b2ff0f4f072ddd8e6cfe51b5a6fce15279795b39207f82624af78da912c90281ab4b8060209ca325ac25d4819fcb6125ee873690cdbfa5bb46b9640b13fd60ae4facd4d2a9c7d8d47b10ba6f56343777a52a932f3cc0844751704c2f4e8b00901e9fddd7d27167ba3eb352abf4c2a422a9e6f6b20e99e2bca59e13b5e7bfe82fe78ff10295c871b4594087b22b4fbdc2226bcdf6fcf33795009078954b6d9dc4c8102c2630b1ac4cbc18ba497d61910527cf180e0a293200c1d92bb5092d59e1fb7100a0c237b6471b2825702f3ff0d8ff4e00309ced66e1ee1fd054265a4358675a2dd8876d1751e01a3add18db403fbeaf153f7ce3b6431c719492236bd26faf0cad55b3c0696e96a20362a9bc89ec5b004a659d4cdbcb46ac0c33b9bd6bd30326f49ddba1bb01625b658aa630b713b40deed185f6fd940c6d9387aada57335a1c6320bddf440fbb913476ac7d3bde92362e3ec1c8e7f051309e3d65116aa6ce254d27b432e96dc574e8011c6fc8d8d01f7cf46f3fc28864f14a5cdf5fedb16c1f1b3630baa9fc24ae9a7aa76a29bbfc9004f396adcc16508c68d9aac1e567947df4a5891c9bb2031d7b5e4e3ed16b13b76817f3b6e5af6c08bb00f3dd17240a636fce8cacfca29ebcf895d988a75957df88d9b84b59f509929f5be81fc5bc226ac4077e3553db17334b2e788e093325088b47551efd03969640725d22dc1fcbe9bb36538f3d84abc74522a05f682c7724791d996bf147e8555b506af8779e135b6a3adf045edd76f0634d6772629d2d1ac3b0153de2a66791e87fcbb89695b7ed74f4d9aa22106278c5c97e3bda59be0e09edb6681ebe12116f0eb27db7410efc571abaeb2376485d7b29f08d8ae8b3d751a8d3656ac848ef9a1115a673c7c85241bd5a7a1fbe9841134229efc26926cd56942c29a98be9277da86701edc5f5438322efa9c63d972fcdd2585f8299b4a1850ff12e98d25325ace589d55c0701b6176f1c24c5e8b409de1d1e92b8782d9b82c9a7dec43a73f78e1e432bd932d1a47848bd3c0af8079ab9cc5bbaa5128be0a168baf0883ae665e23a48bb2acbd820dd7bf7561dd90ad65fbf142d3513b1f7ad8678eee5afdaff8860a21889514de9808092e39b951b2c51e755484410902b0876daf6d6b0a8fac582d96e9c843d3cbec716073d7347aada41bbd3df3f652d935aedab73aabc769593c4ac48c1da792459ccee52398206a8e6e2c6f5830d345f0868882ad5879306cb28520be4526b3bd5be6065f63991ef917de0ace900df1247d04469c00c35b56c06e3c03fda24f89542f208fa2861cec850ac1daf0a46c7649c488930baf8c804caaf6faa11ed8eac0ec845702eddb3980463d98d88f42b958557ad9c08ff449177badd9df291b6b7c06e20d6c40c99ff63b924c3fb0ba3a6d5383cda5296e8b39820f4e953a720fceddb5d194b12ade3224b39498061a9d799803afa6ab41e3156714d98a103a1e2c41529c9a22a4e50df168959dfe1a8afda0049d01e5f8cc64eec7bee4a0bc74ee4b44b973c6c7ecf238476f8ce749e04d97e6cbbabb55fd93df6476c02b36076479ed49ab3d4e96bbbb47b6c39b05889884510f6a4693bae4f1c0d9aacf6371312c3131be2c246ad7be719b6aed852f7ffd33f5e4d29179615a1cabd71c6cea956180438f68e597b22421f7a41ad6bbfbc463afab619bdf848e25c52dc442c388b6e78ea60f7e01ed0a478ed54996837415fc8b56d787dca79d9921fcd67b240d4364601a7ab99a0d83c9d4681d41a2239eb5475a981fed8ee9d19148dff6b4e804527d8fc708cd623f789a150caad7fc6177f0b5eb7469e62607b95d5f443b85b60e74d6a6fcc2d98b92ffd2606f113003aaff8b86bf10119dc8cc84dfc736a4e08c92c2af1997d33f69949d3a39646c2af52d77284f5af3ca1bed7fbe8dfc3ba512f8ef676b7ab82c568abd0d36238221294922e7b24b9291aa9385341c99180fb49fccfcc4b9683bc51651270931925dd20f017cb46b1270dc3bfd09d0bf5e015777268ffedbc9d1629d556e75bb45a3a6ff86c7150d68ff1fe351181344a472c34f88b8b4c9718b281c236f251ab4321c2b39c258eefd23ec89f7a36bd8281cca9376eb4f9773d28486b3a45f03925ed95e2e967477d8947b074a1723652d34946881afccaf0a948e7e118a0b0ca81417facb73ca8063555260e377bfd1af2187ebfb4a3253ba6932b89f0d2037dbc7882c3bebaa2cdad24aa9577622d0e891fff876239009253fafa1d27a7c8eeed0e2e7c7aaa47b72f2fb6cab7251f9664fdad9e9ee40128f48fa6d2a8d445b548e748567d89e437ee6d842d32e59af9e84a840c92ce484fa53df167ed5d363aa5d624cf9a229f7b5b590230b1726ead0efb4be88e6aea14f420e36aefb7b2c5bb66767db75e489139ed0fe4a969f1cedbdf5d27e462a2fbac0881c0bae057dfd003bcdce278f55116cf40808620be8e0b9efe4edb1d20943f7207b6e660559b3eefc6f8511122060d87118386c0b64228ef6dfcea2aefe78f5fc0278d953cc198b0dabcb94d35b6f22ae89d1c93e864d175d9e18d88117fdf318d14f4606ea390eb7dfaf8851d4608ebfdcba83495f91b3c99ee45ca789c7f31b55ce7c9a3ed832c6be99ac709abb6e01eb4463229a55f7df72369c1da9e958e8ae0b9cc41bdccaf78782d1b6e10ae9e2adaabdf94c8b77c7854797669f47aa571f40fabf9f835fa49e7f6d348e8be90eba2a6de2549e2554dd674fcf97a471222ccd859d7274bc60493ece9795aba5e01849e56d77d361455dbf5115a2eb1882edf689bd1ec8d2d485bd6f8522203e880b4d4a55a7265bc9233b88a59fb6848ce551e806bc36236e98f6320bc28778b96094cffff0f5d1b643d5b2e3f830446b1a96c1e02eee7c1adf0e21eb21a23dac99f79be1fbb86ce682fbaa07f4893096a53d10c73f8f61602d0fb6a76d0e54ceff6387de973b79fc37afdf4c16a86d8d3565476d925e218c7e85b4eba94acfd9097f58c3aad945cbf6c380973d3b95a65a982b390df3c2af2dadeebcaccaed7d388dc235db34cc9b7d6c59fb29a0e0d3013ce785bed475ee0b9a0f8391a0c1b450111597295a901e66bf4ece561a4d4b3191bf31f56a60419f163412f99ce7577096996cb10d6954b6ae482fd6030d6c446bbec5828ecdb2e7041c77060c084e83ec94d29437d5cc78bfa3d2df13f19445b18af669a597f62a19ac93958e0c804c0cebfb8bfc00c284783b95628556b671c630523d889fb046064fc682d1d1e2a8b0216aa74191e5d184cae9047bfe1df655f8804371da713ef2521b1fc1ce584964a401bc5e922a3dedad8dc441269dc96a11f9eacad9c98e1b7b29ae550c4efd4b64c1fc0dd6089731b7a098fc1080b6d1b215ac75371e257231f8ba60d7b94627fe277cfcdb3ee7598b0f31f4300723b31a980333ea1b61a7865a30b2929dffa1fb06c5c835f30e700749c497409899e3abcc024dabe82f17ec93e920902f26e479e304e6f92d335705d6b7b330407c340aad9b145bd824eaf2471f7ce9699d7e60adc3f3708d53eda779141c6d8eb787367e70de0639493f960813465b1f877295755fca1bea69661aeb01283e553827af9764536eca7b6c75332a6c63daa6795702d96b977e6f445f75e58cf5d82942d8be052f9b6411371d1708bb369010c234ef92ed4076c2059544b44c5cb21879ac6e3bdb77865a8153314176cf09a51f1c8c0a57f9505a0794023ee614d56cb9e452776c8276bac1e6e11822de0bf66ac724040d23106e5c19802f653d5580a2bc402430d8b1707b12c846b03544953d3713b2f75e162b49877edf1e5286264e021f10baf284042f2386d10b9c9177f5cf67c5694ca91db8e2ac1bc90bcdcb72450f30afd0f66a2de3fd98f207a093bc9ce4b136155a23f1fa38ad850b37c3d5ffce34111104ddf558092c0f732475afad0b2a8ae62cb42f6b576ef6127e0a0a82a4bfd632924ab094cf0c08970e62d135fcc334a3a07b24422aaa2258c2ef859f723aaa36fe98402185aa059374ceef1768eb1c304f0d442b0fdfed7933c331ac25fee8bbfbac12b652377c3a7174294087ecb05de05ea5ee8b7420d4a35d2b068212939dc48467f0b006b64f82a2a779bf893d7c2e3dbea60c94492c8721fa3acb66f73e0edf0dbe817252014a4607856ad1d7ce1d58b4eaa6cfe0c7897477d3d45562e15855bad3156541f42ae681fc7db11ce420a491507bfb4e8fde2f3163c4991f4728910ed201561da4c92f70016894decf068d7210f611c2b8a9edad8f8ec5cce9ee8d99de2f1c771e91ef6917955e077c8e19efd686aac89e4f63926242e48adf053f6f66c2a7c5eb5b9b46b17dc35f15f7d4507fefa3c335181f40b44cba92a4bd0528935af9ab3a6e89302338e682af2623bc532fdcc4aca0128c9a7970f81722bd6aaa7ce3953ae937c9cf702eef91b7edb9452cedfc8b04985c4ba659b5df246e93ea3f689e5d3fac47e860a8e134e7c992ca12dee7ae4ede33305eeba0050aee85c0689376cff03ba2ab4962d389ee65d16c35edde79dbd707226d6ca2769733c456b1ff51b9916bdca2f8e6b1757e8e0b86838c23c33756c06f473f7e23c44e9faf26f505e916ab616e9c0799afa7f409a5b807f43b368438ff4d34959365598fa8f63128f8294c14ae166f5c48a1f2d27580b67f220904afaab3a9a560334593f6f33d8da55bf44cb6fb353982ff244d6817056caba496c360c5e275775ff75f226accc9375229e28dd438e479c7b19a411d2ee99eec108e9da8833a3d4ed2ebf15afee8fd68f3f81ca21418002d7415e20234a80e7a6c131f2bd43a38dc127456e7b18d48b281b6d557fec493ff23df3e8fedfc7b7909c02e9d6584ede1c6501695e2611fb5ef889620ee1ebdad87ba35bf992bb449fa18c4879be2d8d6298033679ee8e419ca25c7c82fdf055a0bcf6b468c69ca81bfbbaf143874c4881a46df24b60ccc158087f525901ad088b27fee7ae99cf5403ba8d5b166807af0ae40fec8f85b0f240dd21c73465071d16f5b96d0cc9f734167725cb77101ba26f4bfc6efddb9e90465435418cec53001a25e458c14b1b29df8358ecc4a5379918e578a08c837137590dd5385e30209958603340e0205b7171c66b2447700382dce87144d69b69358c92352d4492a369e4ff1348aac78a6b6811d69e2e4393e2b0166ef537e0135c009173e97d3e38795cc6d6877c6f1b91cefd3b1de404c9695fa152646fd27f9c59746471279a957a129aff5d0810d257aa1b7c0dac95876536ae86a18928f1bd51f773b4e77d454844e63d7d38b044b254bc0f57905e0f21efe6101be4e342614d6721ff275ff076d2aa8d1c69231033f0ba9f931233b5cdd88837b7d5dacb0e690b30c5628d1e5ed474e645b7f46f18594756ebb402f0491417b441da0618337204adc304e850d9553adc7306e652c64492a77f5d67e10dcc9ac2a0331f96939d01527a698a7456ac6336dfca106411659aa02ea725a76aa71b2fc0a186de281599c37cd36ca642641f763df5a7d02e318abc61706cf091bcfc3cb6c6e6ff991498a18d03e162baf34fea2568aff207cfc990d8026d24a89b525b2f86e666fdc978f8b24b16d4d1db69bf6f08bdcb81f04b41b168b4e544f8b45471ad8353a12a5c89dc1f2553a6b243547dfae459c13790ff6aaa5cc979c5fe3cff63d6bb6e028ace405d8144a3682dfccb848ad514042a21e39633b07e4bca0e7af80f710dff76da3841dbfa865f63dafa9ea002a8a8f875a6974d3bd448805e75ede700e8f04b9aafbc3e32034f2036725dab341399603a3f25c2c1beef48863ec8968651ed171b91f7ab63cb5ec58b64b14876735edb1f1a19def5f946ce1b2b1d79f4ba57c32521337b19b4c77565ba79a43896d18965cd1d62adae3137716704de470d4d848771519bcbe0f3bf3df6af15ca0d040613079f17eb82ed1cb1301eac6cff33977abaddb6cac5390cfd2942c6a7aa1dfb18b4fd1b854b9902b7ef92763608aa956bb9b602f79d6ad12d79a8bc56cae6d44fab3bf3da3ba9a562d67177f214e6d5551d54e9cb9b55a95813d3791bdcb6fec6534259fd5d59a8c01a5b2a06ada7b722cb832a3acfc3fad275da9d16ea87733554c170005fda3767412979d21673b2384d3aea7076ca853037f5ae09777aa5f3fad7e1574a6a7b76d73c2d76beeeb30b8066ee6adbcc0649a224462e0a8d43fd202c05851ff93357bb6d1dc3e54f65025c9c2be7b5d33d26a9ed1616bcdea9f0081d61292edc3fbd815c759cdd16eafab568086bcdf98ea445c1af7c0b6cee5ff42ec08a768b37621243b1d4c64f0776ec0e5bb44dad7caba0779fffcf3d1629c4e6fbd46fae8ca40c0347514c092ca44e69c9badde91cebacc87522ebe79ea9aa0c4b3b5e8ae708626c03b74f7ad5acb6736f210c949a9262d375ea520c402eb4199629fc26523d53aa0da195808985722eabce3168cc4e57bcfa899c5b14a1720808e2393ef55e918ad398ce696eac45d3571490b13374bfaa8843a92458d30e196b468e0f45da7006f9556ae8e9fde37bc61efb7d1978735f990020c018c3871c29aaf47f8d0448cf5f6936fbc7b75067590c162bc91bea9c223bd120e46f507b07b4f09d0e4c99f6d3fa56212e57be111195a9d248a425122265900e0b7074dd72a24d9cc7b9a72a0a6cf9b91df089e7451a0df20d5ae307857a6e6bbe66a2a13bd0ad8bfebf47c66ca7a3e1c0440d0043cd929b7e40d7ab26fb7a2ae0b83b1356d9ac440ebace2c57d1d7f7b53d0eedde2e5a7e6007cd07455409edb433e0969c8c8bffb70e32bd8c04b1a218b9d5b5a18b523ebaf598bca5ab660db7d81d52a863f5894f2fb935f2293fe58f4f0a6eb4d11022c2022a25475cf46e732e46dd9003fd23d7343be0494748533537f04e752389e6c42685bf3a7f917da4bff93232015ce2b2232715a5fff898e42f53ff15b5cb29da22d5c3465550c47e7d2ee9f7ae1713ecabe9856dc8f4b8d27e7f92b086b6bbd22613e299886b8065c8becabe9565a4831ee2f41b303d6ddbaa1b6c847d7e1a792b704e5b6c4d56f7cb3013d633e603f35477279295ef0c60d7c2139d08881e6c53042e11eb8308f5bec1076f3b8f21d4695ade05427546eac73e24ca3b05320738784c1fa6495a2af9be0f5c27714e1e8cac2e255f9c7a4fd631d0613ebce068f5b31d08474074a4620689d1134040c95bf6269aa365e8aec21358714d239e8ee3b039fb9445e244b55757cbcb1d6010a216273d3fe869241b6889f9650968024cd7fd0457343bcfbce6a5747b94abd69015aea80868ed4e2729b6fbcd94703ed89d4c8ac12639922b023deb9fe8bf79f108a7c97bc80a39779360159986bb4ded8131fdfd5de6db95a7e9eddf5b5f538a1c417f67abbcc42b98ee5b8bd83a7fe6513ee0b5c36f3968d493e7d69ebf9fbf33ebd2c3c855665e7e8d63dee522837d0f3ee2dcb3f2c6129545121b433f32c1b3a84311a41fe3b9a304558164867bfc2e74eec013323f13ca0661d44e0040ee5628eba0d69f87b9278298dc549e5ad75f331ecde40c77f49309f1f1f2e8551c3416bc5c0093cea4318e2becacc2a73866b3edcd3ec590295414f85c12de0989134c1bdbe82e223435580490b9c5e746de6a5b61e6e4bcb6abb8ea5bbfb046542792d50d05258e4219d1e68f12f34dc365db74b1cc9d62d4dd1407a392423c2dc38023a28e8beadb7ecd0b880c1ea1cb4173d15a8ab7d6e4c3768475ceb197e83ec210199988ab66a1dcfda55ee7c4d9948a3b85d2e34e7e7d29735c995a44ecb84eeea70770b39950e5c3401f403c6892a229efc1d2379c71dbe9d6dab8416c7d708682708907d2d44caf07bad9e1e05ac1b45bb217422820d087e42315fa98f6c6ed2dd92530040b50719459760330f56ac9b6cc20c46d173106dfd4e0d21aceddc45517548fdb087435b8678b2f9ab1696c7a999001d173b5ef09e24c55acfcc77c6c55018ad06dd6216a8e6d6041ec1ea5495479d22dabd4187a50174062a03e4666a26f3853049a315be3d707696deccdced2f079f4e4611dca9359e48dbed57244513bf93b6101afc0dd8feb84d0cf6f661e280476d7fb1f14f3a3931533e4bb053528ab08a43d178491458e53853bcd4177f7df0350abd36701b408e8f48254585ea3249348972d4fa13a159bd704910719337069b5a9bfa48387d7243bcc0e50d8ead470f893ad819010093cf172c8e0d5cb35a6817c20a59f2376095a402b0a1f0083991bf34b92739aef198dbae678335ba637a29951d0c514b044401bcf9b2a929aff8f673854214996f7f4d30cb9776ef17f69fb3a346c7ab3e363671833e33e32b934f9949d67f2a9759a8863d8ed8d4bd1478c865cbaeb569b29826d6a93c2e20b030c24b8d4331ae3186f146c1839ecf1e567ce5be21bc333071b439622b4fd5bcb03f0196206cc8100d94d41eb1ffc701912d03b53ac99ec7205cb6c9dc7d7ccba8483a866922788fffc32f3679460cfe70d87418ad3ccadce4d0368cc9b971b1440620f2ce358ad8683e9b13b4e503281950c72d53dbda47f9a35913fc966f33b1b0734c3207e8bccfeec4f65f7b266681549bddadf6227d5ba60cb6103fb0ea57387309597e16f7ed27afb4b5e5bd18d123341bd1914f4e98afae539017ad321ffac8970b75d31a2a7fda6cd68215d0ee12dd4f6ab64e50d2ab76fb9971e6161c11f411a3933f560fc834330bfbaf3681cc9a7186cd5d8998903a7f74f35146fb894f9cbdb0b76b351a8e10539b543585088c85e73587dab2a999c9259331f90d26e7993b9e60285d12f36c54e0a0ff680b1dfb0fc93ada498f7f407d0e2f36debeb1a4cc50b1229cf981b83f47c9554223ff4b90d43d2e5247dd38f59368e42884f6ce70d0f47fdc17245ca929689c7db2418937dd16fc74f15e9a74d9de0be3dacd29ed43cdd96f37b997498ace6636cd8393e6a326961c5c3084be0e967b2d936c8be7098cdd43867ca720a20f182caae9ca357a69bd8101bc11564b19bb48b86d7aaf8df06570ed09e269962cba00ba2431cb476bf84f9c50b6e37764a3d2f8f20d16d78126d300a363f9a9e09e79b73eb53a68d839c6d1627c0a1f9da4c1146aea490f7af699928059e577828a2e0df8761c5adc1dc79f9a04cf0831eb1d8c993f4a63a49d77a0e326fd7482841ec5139845ec7d7a63d7b30e50cdf404f5ee1f2f242ef5f31aac9e28e055b655e4e25343e8a8bb9d9e46427e97e5c566ad33ff9ef606af6b126f4510bb949199d2125ae49b8053ecdb4ba871ba8268e3f013caad884f41051db8291690aa9e83ad688712e522946b2c499bec99b784637f4f90f810014200a671cb798e5c6727deb08deae7fcd6e769f53eafc5e703e31b3a04ff632727b384ccea897bdf7472e17302a1ca9692e110fb18740d0e1adf9da8343b5eb752206b3491e126dde1371986b8bd5de9017c8a8001821274f539b64c89011930aaeb3aa517902081b8fe96f834b59f9bc25afd4729f342626923afe1bee303bf1b3ffa149fe81650c6b66f96a2589dee117c0d39e0fa8f01370ed3d9c1de44582c1d4a3f640cf0407e3f30290bee5f2fab63b219351ddb8330857a124e94d151dcce1daed09faef3b2023383f98432631b7c22292a5d7bf9f651e0a356b373b0b1c90678fecf62a203d7a6a7458b9ddd770a47ac3d5de9cab454e4b908de8f5423b17c3807f4486dcf1d9a2e3dd457798b71962c839b9aea6784efb7b07fdd584d65b36a269f9540b45b2fae120ac5aa37cd362e99578f61afef1b85c28aceac1c2a4410b8f3471a199d8af185d823176e14c144a5d028acdd1b53280879218c4ec3924511701afb8ffdd7122961bfe76ef47ffe4e5003bde9c257f213396d6a2767fc6d738c19011c613cb5a905337e82aeb7345e1f66bffe802a0bb99da2fbc87911b69a148880bfca452e0336903039dc851ff6f7e86ae322c36c5bb7437062ff1c0a9dd5debbda44c44021ea8c1201b34500628be9da4658b9deffec94cd3d80e7a08b266790fbf0c5c7ffb6573f30b98e9765dc6baa7169d93663ff7f46ddad1c85ef6860ba2434a86b2f82bf36ee4304c4a64af7e2e6a635b2f8b17fae973f6f0f1b2308cd0e31f229f094b79b71726936eea7f8c175161b9e19ab54e1e382dd743f786659f8a3d5acbb1949d70a4cbdaf3f0425e71d4ae9e530c858d8b6e479df8f5013143a181974bbccabcfc320475dcecbae97a599b5d9055738cdbe473870a29db59a89d14b67f8c0e025203f92c9a429d5ef0363d96df9ac38abd1bf77df82b813ace6e030086a34580d148c6d6e0bcf3cd5b26ef2fe3402b0c2081b380c15370f5deddc046a327a723c490b278dfd599999f93e046104414813728c8672e308e6797bb53a349c6f1ad585a2f2318526605dd7fb29b86ce963380644374f3bc4d4ea87b0c7bb5ef4fa0853e0eadc6117379e100192510a0e8957ff451b11f973acdeeec91515bb198996b6cf49eb5d05835e0caab8618af234bae0f45778aa29170b7c8e88f2d72cd333121fae00fb102df07c7ea936451e6840911911bfbc28f010f6af1b061687c762e584fd4acba8eadaaf5ea6cba9c1045ad9107a80e1e23e302ffd916bfaa01c3eab6fe6820b0e1764ed7f9663c657100e55afc454b7ddf9a446cb576b4a988d4dc3b552c4ca5f12cfb641ff93e0f5f672373a0066f32ca0426345f9afc51cb3486cea6e1875015d59dd0d64d9f704fab67c3c28234a04ca925d921ae262af1f8c29d14ceb12bccb196023481dcc0dcd3f0fcf04d150f2a49181ac363e5bd7a06dd31b5cdaf78fdec83c0d133e58229c90b03227320c0b14990ee4d971250e694e1a6660d4183cbfa93f42b3171500239bda0ab5f341d873e29692eb1b7343b16a81c44072b55f0d7f62dd0cc373b75bdd5be8fd88a9e54f972f031ec2d39597ced6b1379e1a13d66c1c442e18874a6eb70cee4733119b6923fa43ca3e7d755deac716ba9f6afa810bf9cba09e07a9954c6cc9dbf6180de44805e67158d63d9a923652aef17d7c47f211fd84c9d78bd93cf28e1d9cab646e0e58310db404d0259b85ede7e6b53e5c5d561d6d411b4d5c6b4af312eb8d7e53b5d102800f7c96fb5d9ed323e8124f61f71954d2a858952106d59716b1ec221e0c234a6cb3b19bbb57f21ff056bff511e662110181d1710ef26512b4ef3789eb8dc13f2931d078314286b1048b9293bb8be9a938b215e3af097b3144c2ab0918ac91e61a438f81bf590a6f1b381a9803ca55db6c81dbf7acf0c6554423b41cee2a755921031bb3cd14e40c0ed342575534d11200b6206d7f935601b0b7e48f339e3f7c41b5d54f6aed319cc7402affe4919f17a0d1f84b0d17e36d61bff7e9696515ffc925c8241823b872397942f60a33070c8b434b8d050d9b16bf8ed7f09a8eaac7a0eba577235cf47786e548c17caa51173c72a01ae5cf3a1964fdd4eb5edbaf311dd5eaa07d0490e3d45fc445c5c68365ca7a194643cf5d56c3b5cf65f1445ac107ba016443dc351db5ee5676e3975a3131f7ca14b9db40624b7f2135c290a0aabfe8d372f0e8db356e923ba18344951c1745b95e7ed94113968605981bff63afbf3e2fc426b30fd64fe82cc5ca1649c546d927eb7e99884ecd020efe4e9ff0d94f54965dd5d981479c71ec6b533305a6d3536def09bf4d09330aba2110f3ceb03b2254a6798761f596f7f721701703ac9a68ced98b2fb2e78d7893be9169db382517f4f54846441aafc8a6f13e9f8c48f06fb21a7bf8ce7bbaca313a2b3c98d947523001a3abd0e0a44be18b98757d9a6172dd0caeb7b2346aca2fd7712aa9e7f3b7b5246296d43b519ebfea98370f162f083c8cbb51f7a5d673f1c1acf1f56f5a1659128bde2084945e6373a0bb7d949f100c2ac63c7b67ab411e1914c75dd4979bb96a728c23a12be438e82308415ee6c846efd8d758afa9fac32be6b35cb955eac3148586a8bbed70ebae9184c8372fef49620a35f9d948247720428ab57f8a659bfcb8ac76a35c6d68dab147cb9eec999945bc707e7dab10793ed56236fc843e0f19bbc720d6e2095092ab286aff56b6419841da499314392804db089aeb06321f1bd5e9ca51a6c1a4287c06be9e61d1a8ff4c1f546afd44c3cd69e2da42b2bca54a975d2870b41d413a28a3edb61dfe3c858284a4356726e071b0f8eb05745a8712bfd1f4892515dba6d6f974f8f963f35e79067eb363637040126567704acf18f2288effdf41a0b8bcd90000db441881dbc99a433a9be727fc8eb1efb9fb1b90106cd750b41527e314f4eb663be1681fc4e62fe5aaa7fa793054b23a96d96e63a36a0b651263e9f5dc97ba9f10389c8406073a142a9c14e4d500f0743156f1eeb72a123cceb913b3dd6075476de46f5070b48a2d895c65867f9735c263fdb19bc613febb6f44123a1d0acf0cce00c706ce6a3e61f900ccf81196faef666b2693a040751c4b917f0598b8411ff26a26fc971d8cf4d23476bf6a0d20976489862a72adcf8741a88810dcb2775c8a4512813c7af504e484c0864ea37f88bdfae21f8c6779eae6576efddc4ae78af564144511ceef536abb997923559bcd2c72c28520217274a34ad1ac763a9382ec909ce71dcbaea0b8529918f3a42149a5952471c52958c1f9969332c3925e71918917752320366ad384f4f93f27d16793873ce55f5e6496927938ce0065a87f66f57dccff3c7b284becabffd55bfc454726e3361df72dcca65ce8d9caa4cc4182259865f04ce78c441719a797c2c497fbfe13dfdf413f38079cb8f41763e2a26e5f6f1f9859542bf5ac2dd2485cf6fa871786671914fb095ca7a3c8cd8e74e7f193cfb06c1157b9eb78879c15d3201f195e86ce355904c0664db6d4b24dbe734feacee2b1dca52f4fb8b5225f049701cfb4d444dbe706a67740ad2066ed41a3b03aac8ff86b48425dd7f6d37823d085e1986b5631eb91d443ed51f9777aaa5e0881b355ec1caaf4c2a221bfd29027e9046468e084535bf14bb340f9d704b8dafb3bb7f86cc87b9acbd746526af80a129027ebfc237fa6e69e5afa9d9463fc355ce801b9fcc8d2e7f4135607d0355f80ac6a9997c8821ac85afb872482ccb256990a742e87d5cdc39716ab34eba7ba75196dda4a3a85c9f7f12237682b1f072f9f34b36049a1edca021e05dc5ca685e970c7955f018fdfa850701009b3a0f9921edf3469555c06dd4df8920069847a47e3a549f61a1fb139254bd86e4b6569608d01b0e9598f79da1f7d14145ffa8b881e00266b19b9785657f68d081ca4e95be8070ebb8131bc8245db23516d37f4d961bdeee33ddd0d94d743a13866cc087e8f403b4b907f0af257540b562bb7190638c3df84d1ca531237e071e3410e7a000695448ce11ab478b31bc2606bea96e17b1c4cb30055a3ffdd0d17dc0eb8b578519252a134c1de828fa5fd282273bf678b4b9b0536fe39dce052b27387d1ef5296388556990403f24e8ab482a28a71422e3845076bf3e1b76d990f209ae601615c0bee65108db71d18e489ce2969df7ce3cddf74ee8aaf54e2e5781aa99e41ea6debfbcd1a6a652975faf746b3921a283b6d1d04f0248e5c30fcee33927eeea84bc79f9853484ffff2116b4cb4aad331a9a197aeab71a39a96c3ad41758546fc7f5ce0a102678dfe767e361fb8ed9d98141afc6fb6a17355dc8d1719171d7fe24f7da9733dd00425f445df9e4a115df4e24795eefeaf086415bbb488e4b26a4321ce0588a3a0a632e3d77e81a4adabff77395b0c85b36cb126ea71b0a81e380c947a6579bd0257e8efa0093b691b0ed1a12200fa2f61592c554214065176b6ad94b26b26678de0f602f74c34552c5b27ce3d64280c1e48f0d966952ba4dc857701a157e923f35c8a7e4427687d6db6b584be92a62f466e776d336fc253063d904d2edeedb3a3bb1a25fd34a59cf2977d11e826e8896fc0bfcc77018a22c2ad7d56a86997cae7477ec8fd51f6051422823700632c0d422d603310bdd16c02f490451d62c49832954db58c01a4f0c503020c0e21359026fb76d9ee4a445a87bf8ca34f5cb085125cd7015186aeb96f58e0c25ccbe4b3940cfb0767349ec3dab73c94b0aff43163056d13e7b004a1d437e973b23f8da5b8a666d75a5d6f62e65aa7f6389676bd5ca73ce6c8dc7f464108b62e85155b6a543ee42ec61125c1a0f0136ee7ff8ec4652428a53370f4b5630a23a244087f7b5a1106779e247ceb2bd22408314b18a4895494d825fbe9992463a13be6ba6cb9ed90a52b04803233e1e7ebde17b6244e679fd716be805910d5b10d63c072fc0eb13bfeef36e7cc75ab50530f46ccd2b88b2743cd5387df27485cce70140480135e101c04be2f74ce39612b4135697c3d6e1b42b80106d6a3abf1bde0315676bc7b16343ee6d6437d90bfa2f7947f3591452b5bdc15be5c3c6b0befa9ff9dfd94b8572acb370f81df6cd05b125f4c4db5959f74a0086c3949273b226f52b472d6b07e51f2e518464ce2f5563bd7266db23b1ed54985b5d71ad01a5fe5f199f74becd0bb6cc3e2ed68e2ee5a24863303ec941b328d217b527d3b834680aa7f634cb780abfd65d724ef8d0b7e9eef5e73fefbc8508d1eade4e4b74abc308687fcd4c0316b3ebda8d8c87394a0cb1bd486a3f1096dcb517eb688cfad8f79affb233d4667c828a1d05f3d3e629c5084c601c9c1e18f350a667787939173d414995044343904ba99f4397fc6ae4c26f815c8b9471aa384962631e2c091c54d05c6d8e4d7941543d2c679eca2e55525223b9a3487bacf50739d0d42e948f3ad4ded38323c7ab1b1758a092df55a19aa35d265672963432739140d602660b80b9731791ffcd34c5409a45f54bbf26649182286a77216109bf8bf18ae0c6edd2bf9e9e1d723e2b5bb0d6788c72addf97b2bca42eecf743808abe55291c11a19abb9cbf10675a6ec5bef43cc51ccf3df18dfd9d109af6dc2c7b4f1287b85b68a1d3be9ef2170d95a1a2e7aad1e81e44beb94e430a341c2170bbbe5d775cef9555140a01e07d72eaf23249ade8cd51eee4d61c29c5ce2ed12f82e35293cdbb259ece6bf61266fd73e655c7630a087ab8c0540e1800aa52da1639ffe6fd622cb41deec72f6c47afaa0beef0ba53d24eb2200e3fee2a76a5a04dc99f79369af06b1f1683a0960b8f9b323753ea68cf2a3a686352b51fa5e83c66278f7bd4dce5904e6905ecb6285cccac2e6b5404c48d97fed1f2568303fb6d416818c700b1f4bc83121807b35ba505d920082d5aae3cc45b025594a3e55ccebdfc729aa8d657b0fc00a728d5fda93052be4c1f5bf3ec5fe5bca9135ff2fcbf3fe326c2bd39eb2459c424edf728d57bc8bc24d64669f2ddbffc80f55e8621a6cda5affe83a796af8e840449d095d8c8adb01e52b31a11e0d26790f513d8baaccbec227f2402552a3b68c5dc63dbe9a734b5d77d74359c9917245e482f043e1b9d3012122237ab195b0f5a182d627aabf10c3e9ebcda7f8543cadfaf94edd3e5ac5ae562052a71be5b77c8135ecda3766cc4701200af00fdb1b11e94de2ce9c0b35a98d3647ceb61d4a5764a0696df06ef16fe4efae04e297deb16b64ff7116c0430f88bcdbc85bc8f36016606acc109805a9ca547b85c22c1822e991359456df87a56940e5adcc4e0d03ec0dbe661c2ee630a431d5498e916afc6fd2f8ccdc356c92c136bf16ca5e9326f329f12819c65f8a3dfb253509600e12b7348225bb35e5b0cbf2a9e2946b6ea033e5bf356915e0918342f690979025faa992a8b6a361e91d11c71c6342b27ea539c20588fce6872bed4d23891e826521b37dad4ca71af20f68f76481c0579fb785f23a79160f27dbf9a8b6b61f0a44f1314f96676a09a78606700a2909c4eb14b7ceae4cceafb4bd8d84c6a6af007658a1baebca3404c25df5454355ab8004a9fb3e8c076d79ce585772e22c245235b8978d83acfa26968b652c6f9f204003ac563277926481a858345cb66a2094f066e85b54fae472fc99afe949b6a5189305268facd8b147d0da89a157741a3d4e6696ca04</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ARM</category>
        <category>Cortex-M</category>
      </categories>
      <tags>
        <tag>ARM内核</tag>
      </tags>
  </entry>
  <entry>
    <title>MDK KEIL的部分基本操作</title>
    <url>/2022/05/15/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/MDK-KEIL%E7%9A%84%E9%83%A8%E5%88%86%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>MDK KEIL的部分基本操作</p>
<span id="more"></span>

<h1 id="加快文件编译速度"><a href="#加快文件编译速度" class="headerlink" title="加快文件编译速度"></a>加快文件编译速度</h1><ol>
<li>Options for Target(点击魔术棒) -&gt; Output -&gt; 取消勾线 Browse Information</li>
</ol>
<blockquote>
<p>取消该勾选的后果，点击函数使用右键 GO TO …将无法使用</p>
</blockquote>
<h1 id="map文件中Removing-Unused-input-sections-from-the-image-未使用函数"><a href="#map文件中Removing-Unused-input-sections-from-the-image-未使用函数" class="headerlink" title="map文件中Removing Unused input sections from the image.(未使用函数)"></a>map文件中Removing Unused input sections from the image.(未使用函数)</h1><ol>
<li>Options for Target(点击魔术棒) -&gt; C&#x2F;C++ -&gt; 取消勾线 One Elf Section Function</li>
</ol>
<blockquote>
<p>可以通过该设置选择map文件中是否生成未使用函数</p>
</blockquote>
<h1 id="map文件生成了-局部变量-Local-Symbols-和全部变量-Global-Symbols-定义"><a href="#map文件生成了-局部变量-Local-Symbols-和全部变量-Global-Symbols-定义" class="headerlink" title="map文件生成了 局部变量(Local Symbols)和全部变量(Global Symbols) 定义"></a>map文件生成了 局部变量(Local Symbols)和全部变量(Global Symbols) 定义</h1><ol>
<li>这两部主要是看与RAM段有关的数据</li>
</ol>
]]></content>
      <categories>
        <category>MDK KEIL</category>
      </categories>
      <tags>
        <tag>MDK KEIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Text的部分基本操作</title>
    <url>/2022/05/11/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/Sublime%20Text%E7%9A%84%E9%83%A8%E5%88%86%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>Sublime Text的部分基本操作</p>
</blockquote>
<span id="more"></span>

<h1 id="1-Sublime-Text设置中文"><a href="#1-Sublime-Text设置中文" class="headerlink" title="1. Sublime Text设置中文"></a>1. Sublime Text设置中文</h1><ol>
<li>在Sublime Text中，主菜单栏选择Tools-&gt;Command Palette，或快捷键Shift+Ctrl+P,弹出命令面板;</li>
<li>输入install，点击Instal Package Control</li>
<li>稍等几秒，弹出提示：安装成功，点击确定</li>
<li>重新单开命令面板（快捷键Shift+Ctrl+P），输入install,点击第一行的Package Control:Install Package</li>
<li>稍等几秒弹出插件包选择界面</li>
<li>输入Chinese，点击第一个，自动安装：</li>
<li>即为安装完成，可以看到菜单栏变成了中文。</li>
<li>如果没有自动更换语言，重启软件，可以在主菜单的 帮助&#x2F;Language 子菜单来切换语言。 目前支持 简体中文 繁体中文 日本語 德语 法语 俄语等。 如果要换回英语不需要卸载插件，直接从菜单切换英文。</li>
</ol>
<ul>
<li>步骤如果没有看懂 <a href="https://blog.csdn.net/LclLsh/article/details/123500847">请点击此地址</a></li>
</ul>
<h1 id="2-Sublime-Text设置自动保存"><a href="#2-Sublime-Text设置自动保存" class="headerlink" title="2. Sublime Text设置自动保存"></a>2. Sublime Text设置自动保存</h1><ol>
<li><p>打开sublime编辑器，按快捷键Ctrl+Shift+p调出命令面板；或者在工具栏中点击：工具&gt;命令面板；</p>
</li>
<li><p>搜索框中输入 P 找到Preferences:Settings - User 选项，单击；</p>
</li>
<li><p>就进入一个设置界面了</p>
</li>
<li><p>在下面添加一行代码”save_on_focus_lost”: true；代码如图所示</p>
<figure class="highlight plaintext"><figcaption><span>Preferences:Settings</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;ignored_packages&quot;:</span><br><span class="line">	[</span><br><span class="line">		&quot;Vintage&quot;,</span><br><span class="line">	],</span><br><span class="line">	&quot;save_on_focus_lost&quot;: true,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按Ctrl+S快捷键保存；</p>
<blockquote>
<p>设置以后每次修改代码都不用手动保存了，失去焦点之后自动保存，再也不用担心忘记保存了！希望可以帮助到大家。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>开发软件基础操作</category>
        <category>Sublime Text</category>
      </categories>
      <tags>
        <tag>开发软件</tag>
      </tags>
  </entry>
  <entry>
    <title>全面的Cortex-M内核资源汇总</title>
    <url>/2022/05/11/ARM%E5%86%85%E6%A0%B8/%E5%85%A8%E9%9D%A2%E7%9A%84Cortex-M%E5%86%85%E6%A0%B8%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<blockquote>
<p>全面的Cortex-M内核资源汇总</p>
</blockquote>
<span id="more"></span>
<ol>
<li><p><a href="https://community.arm.com/arm-community-blogs/b/architectures-and-processors-blog/posts/cortex-m-resources">所有Cortex-M资源</a></p>
</li>
<li><p><a href="https://www.arm.com/resources/education/books/mve-reference-book">新:Arm Cortex-M处理器的Arm氦技术M-Profile矢量扩展(MVE )(参考书)</a></p>
</li>
</ol>
<ul>
<li><a href="https://www.armbbs.cn/forum.php?mod=viewthread&tid=94790&highlight=%CA%B7%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%C8%AB%EF%BF%BD%EF%BF%BD%EF%BF%BD">参考文档地址</a></li>
</ul>
<ol start="3">
<li><p>主要查看这些数据手册: 数据手册(DS)：电器特性、内核；参考手册（RM）：包含所有外设；编程手册（PM）。</p>
</li>
<li><p><a href="https://github.com/ARM-software/CMSIS_5">ARM内核软件包</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ARM</category>
        <category>Cortex-M</category>
      </categories>
      <tags>
        <tag>ARM内核</tag>
      </tags>
  </entry>
  <entry>
    <title>VsCode的部分基本操作</title>
    <url>/2022/05/10/%E5%BC%80%E5%8F%91%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/VsCode%E7%9A%84%E9%83%A8%E5%88%86%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<blockquote>
<p>vscode的部分基本操作</p>
</blockquote>
<span id="more"></span>
<h1 id="多行同一位置选择"><a href="#多行同一位置选择" class="headerlink" title="多行同一位置选择"></a>多行同一位置选择</h1><ol>
<li>同时选中多行 <code>shift</code> + <code>alt</code> + <code>鼠标左键</code> 向下向上拖动就可以同时选中多行</li>
</ol>
<h1 id="文章位置前进后退"><a href="#文章位置前进后退" class="headerlink" title="文章位置前进后退"></a>文章位置前进后退</h1><ol>
<li>文章的前进和后退分别是 <code>alt</code> + <code>→</code> 和 <code>alt</code> + <code>←</code></li>
</ol>
<h1 id="vscode自动保存"><a href="#vscode自动保存" class="headerlink" title="vscode自动保存"></a>vscode自动保存</h1><ol>
<li>打开Visual Studio Code,左上角依次点开 文件→首选项→设置；</li>
<li>搜索设置框输入”autosave”，点击的选择项有如下：<figure class="highlight plaintext"><figcaption><span>Auto Save</span></figcaption><table><tr><td class="code"><pre><span class="line">off: 关闭自动保存</span><br><span class="line">afterDelay: XX毫秒后自动保存，这个就是我所讲的解决方法，下面会详细介绍</span><br><span class="line">onFocusChange: 当焦点移出编辑框</span><br><span class="line">onWindowChange: 当焦点移出VSCode窗口</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里说的是焦点而不是鼠标，移到外面去后还要点一下才能保存。如果设置延时自动保存，建议频率不要太高(也就是设置延时时间不要太短)，频率很高就会导致CPU资源消耗增加。</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>开发软件基础操作</category>
        <category>VsCode</category>
      </categories>
      <tags>
        <tag>开发软件</tag>
      </tags>
  </entry>
  <entry>
    <title>GCC编译器关键字</title>
    <url>/2022/05/10/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/C%E8%AF%AD%E8%A8%80%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E5%AE%8F/GCC%E7%BC%96%E8%AF%91%E5%99%A8%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<blockquote>
<p>GCC编译器关键字 <code>__attribute__ ((__packed__))</code> </p>
</blockquote>
<span id="more"></span>

<h1 id="GNU-C编译器中的关键字"><a href="#GNU-C编译器中的关键字" class="headerlink" title="GNU C编译器中的关键字"></a>GNU C编译器中的关键字</h1><ol>
<li><code>__attribute__ ((__packed__))</code>取消字节对齐，紧凑排列占用内存的方式，<figure class="highlight plaintext"><figcaption><span>示例</span></figcaption><table><tr><td class="code"><pre><span class="line">struct test1 &#123;</span><br><span class="line">    char c;</span><br><span class="line">    int i;</span><br><span class="line">&#125;;	//占用8字节</span><br><span class="line"> </span><br><span class="line">struct __attribute__ ((__packed__)) test2 &#123;</span><br><span class="line">    char c;</span><br><span class="line">    int i;</span><br><span class="line">&#125;;	//占用5字节</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<ol start="2">
<li>指定x字节对齐 <code>__align(x)</code></li>
</ol>
]]></content>
      <categories>
        <category>C语言与编译器关键字以及宏和代码</category>
        <category>编译器关键字</category>
      </categories>
      <tags>
        <tag>C语言与编译器关键字以及宏和代码</tag>
      </tags>
  </entry>
  <entry>
    <title>DAPlink源码分解</title>
    <url>/2022/05/09/%E7%83%A7%E5%BD%95%E5%99%A8/DAPlink%E6%BA%90%E7%A0%81%E5%88%86%E8%A7%A3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c047cea25d6562ef412501fecb3bb51ca5693b2166d09b4220b7181084dde9bc">dbefc7c589c75c7c2a455af83d8d6909dd96b9447461a2966f2073d0e380903c3d02860855d6d7f4dc617e7c541346eaaf0e56a3e3e9d705f8d212bef35615f3e9f74e500ed877cfa73bd4eedfed67525e5801faa01a81c26fda65754372fe427344629a20376d0a64d9b3219f49c3edcd5f0c546c102c2cc6fe5cc9382949002d386ff42031dbedd9aa8a1a3d205864f673d2dde9a33b0a7d528dd6054b7190ff4913a4ab22608f0e1bd49e67f68c17aac99ee14e7e5f3a2d89f5f73e29e02f3c2645248258f71e87ac89da06d822ede6bfaa3ec480ca9bbe59417a2dcf4845312d51441541b60451d7288254d2540559a346a2ec5bbcc8a7a36bdd46038fb66da16d7216416729fc3b53d7042ee8d5</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>DAP-LINK</category>
      </categories>
      <tags>
        <tag>烧录器</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS时钟管理</title>
    <url>/2022/05/09/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E6%96%87%E7%AB%A0/GoupOS%E6%97%B6%E9%92%9F%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>GoupOS时钟管理</p>
<span id="more"></span>
<h1 id="1-时钟管理"><a href="#1-时钟管理" class="headerlink" title="1. 时钟管理"></a>1. 时钟管理</h1><p>时间是非常重要的概念？和朋友出去游玩需要约定时间，完成任务也需要花费时，生活离不开时间。操作系统也一样需要通过时间来规范其任务的执行。操作系统中最小的时间单位是时钟节拍(OS Tick)。时钟节拍和基于时钟节拍的定时器。</p>
<h2 id="1-时钟节拍"><a href="#1-时钟节拍" class="headerlink" title="1. 时钟节拍"></a>1. 时钟节拍</h2><p>任何操作系统都需要提供一个时钟节拍，以供系统处理所有与时间有关的事件， 如线程的延时、线程的时间片轮转凋度以及定时器超时等。时钟节拍是特定的周期性中断，这个中断可以被看作系统心跳，中断之间的时间间隔取决于不同的应用，一般是1~100ms。时钟节拍率越快，系统的额外开销就越大，从系统启动开始计数的时钟节拍数称为系统时间。<br>GoupOS中，时钟节拍的长度可以根据<code>OS_SYSTICK_MS</code>的定义来调整，每秒跳动次数等于<code>1/OS_SYSTICK_MS</code>秒。</p>
<h3 id="1-时钟节拍的实现方式"><a href="#1-时钟节拍的实现方式" class="headerlink" title="1. 时钟节拍的实现方式"></a>1. 时钟节拍的实现方式</h3><p>时钟节拍由配置为中断触发模式的硬件定时器产生，当中断到来时，将调用一次<code>void  tTaskSwitch(void)</code>，通知操作系统已经过去一个系统时钟。不同硬件定时器的中断实现都不同，下面的中断函数以STM32定时器作为示例。</p>
<figure class="highlight plaintext"><figcaption><span>tcpu.h</span></figcaption><table><tr><td class="code"><pre><span class="line">/** </span><br><span class="line">  * @brief  This function handles SysTick Handler.</span><br><span class="line">  * @param  None</span><br><span class="line">  * @retval None</span><br><span class="line">  */</span><br><span class="line">void SysTick_Handler(void)</span><br><span class="line">&#123;</span><br><span class="line"> 	tTaskSystemTickHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><figcaption><span>os_tTask.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTaskSystemTickHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">	//...</span><br><span class="line">	//code</span><br><span class="line">#if (GOUPOS_ENABLE_TIMER == 1)</span><br><span class="line">	/*&lt;!定时器模块通知操作*/</span><br><span class="line">	TimerModuleTickNotify();</span><br><span class="line">#endif</span><br><span class="line">	//...</span><br><span class="line">	//code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-定时器管理"><a href="#2-定时器管理" class="headerlink" title="2. 定时器管理"></a>2. 定时器管理</h2><p>定时器的功能是从指定的时刻开始，经过指定时间后触发一个事件，例如定个时间提醒第二天能够按时起床。定时器有硬件定时器和软件定时器两种。<br>(1)硬件定时器是芯片本身提供的定时功能。一般是由外部晶振提供给芯片输入时钟，芯片向软件模块提供一组配置寄存器，接受控制输入，到达设定时间值后芯片中断控制器产生时钟中断。硬件定时器的精度一般很高，可以达到纳秒级别， 并且是中断触发方式。<br>(2)软件定时器是由操作系统提供的一类系统接口，它构建在硬件定时器基础之上，使系统能够提供不受数目限制的定时器服务。<br>GoupOS操作系统提供软件实现的定时器，以时钟节拍(OS Tick)的时间长度为单位，即定时数值必须是OS Tick的整数倍，例如一个OS Tick是10ms, 那么上层软件定时器只能是10ms、20ms、100ms等，而不能定时为15ms。GoupOS的定时器也提供了基于时钟节拍整数倍的定时能力。</p>
<h3 id="1-GoupOS定时器介绍"><a href="#1-GoupOS定时器介绍" class="headerlink" title="1. GoupOS定时器介绍"></a>1. GoupOS定时器介绍</h3><p>GoupOS定时器提供两类定时器机制：分别是一次性定时器任务和周期性定时器；一次性定时器在启动后只会触发一次定时器事件，然后定时器自动停止。周期触发定时器，这类定时器会周期性地触发定时器事件，直到用户手动停止，否则将永远执行下去。<br>另外，根据超时函数执行时所处的上下文环境，GoupOS的定时器可以分为<code>OS_STARTHARD_TIMER</code>模式与<code>OS_STARTSOFT_TIMER</code>模式，如下图所示。<br><img data-src="https://s2.loli.net/2022/05/09/4flR92DgIyZzT6k.png" alt="定时器.png"></p>
<h4 id="1-OS-STARTHARD-TIMER模式"><a href="#1-OS-STARTHARD-TIMER模式" class="headerlink" title="1. OS_STARTHARD_TIMER模式"></a>1. <code>OS_STARTHARD_TIMER</code>模式</h4><p><code>OS_STARTHARD_TIMER</code>模式的定时器超时函数在中断上下文环境中执行，可以在初始化／创建定时器时使用<code>TIMER_CONFIG_TYPE_HARD</code>参数来指定。<br>在中断上下文环境中执行时，对于定时器函数的要求与中断服务例程的要求相同：执行时间应该尽掀短，执行时不应导致当前上下文挂起、等待，例如在中断上下文中执行的超时函数不应该试图去申请动态内存、释放动态内存等。<br>GoupOS定时器，即定时器定时到达后，定时函数是在系统时钟中断的上下文环境中运行的。在中断上下文中的执行方式决定了定时器的超时函数不应该调用任何会让当前上下文挂起的系统函数；也不能够执行非常长的时间，否则会导致其他中断的响应时间加长或抢占了其他线程执行的时间。</p>
<h4 id="2-OS-STARTSOFT-TIMER模式"><a href="#2-OS-STARTSOFT-TIMER模式" class="headerlink" title="2. OS_STARTSOFT_TIMER模式"></a>2. <code>OS_STARTSOFT_TIMER</code>模式</h4><p><code>TIMER_CONFIG_TYPE_SOFT</code>模式可配置,通过宏定义<code>OS_STARTSOFT_TIMER</code>来决定是否启用该模式。该模式被启用后，系统会在初始化时创建一个<code>TimerTask</code>线程，然后<code>OS_STARTSOFT_TIMER</code>模式的定时器函数会在<code>TimerTask</code>线程的上下文环境中执行。可以在初始化／创建定时器时使用参数<code>TIMER_CONFIG_TYPE_SOFT</code>来设置<code>OS_STARTSOFT_TIMER</code>模式。</p>
<h3 id="2-定时器的工作机制"><a href="#2-定时器的工作机制" class="headerlink" title="2. 定时器的工作机制"></a>2. 定时器的工作机制</h3><p>下面以一个例子来说明GoupOS定时器的工作机制。在GoupOS定时器模块中维护着两个重要的全局变量：<br>(1)当前系统经过<code>OS tick</code>时间<code>tickCount</code>（当硬件定时器中断来临时，它将加1)。<br>(2)定时器链表<code>tTimerSoftList</code>。系统新创建并激活的定时器都会以超时时间排序的方式插入<code>tTimerSoftList</code>链表中。<br>如下图所示，系统当前<code>tickCount</code>值为20, 在当前系统中已经创建并启动了三个定时器，分别是定时时间为10个tick的timer1、20个tick的timer2和30个tick的timer3, 这三个定时器分别加上系统当前时间tickCount&#x3D;20, 按从小到大的顺序链接在<code>tTimerSoftList</code>链表中，形成如下图所示的定时器链表结构。<br><img data-src="https://s2.loli.net/2022/05/09/2WkPI9fl8xiKCjS.png" alt="定时器链表结构"></p>
<p>而tickCount随着硬件定时器的触发一直在增长（每一次硬件定时器中断来临，tickCount变量就会加1), 10个tick以后，tickCount从20增长到30, timerl的延时值会等于0，这时会触发timer1定时器相关联的函数，同理，40个tick 和50个tick过去后，与timer2和timer3定时器相关联的函数会被触发。<br>如果系统当前定时器状态在10个tick以后(tickCount&#x3D;30)有一个任务新创建了一个tick值为15的timer4定时器，由于timer4定时器delaytime&#x3D; tickCount +15&#x3D;45,因此它将被插入到timer3后，形成如下图所示的链表结构。<br><img data-src="https://s2.loli.net/2022/05/09/8mZo47sQiuTVkbI.png" alt="定时器链表结构"></p>
<h4 id="1-定时器控制块"><a href="#1-定时器控制块" class="headerlink" title="1. 定时器控制块"></a>1. 定时器控制块</h4><p>在GoupOS操作系统中，定时器控制块是操作系统用于管理定时器的一个数据结构，会存储定时器的一些信息，例如初始延时数、循环延时数，也包含定时器与定时器之间连接用的链表结构、延时到达回调函数等。<br>定时器控制块由tTimer结构体定义并形成定时器内核对象, linkNode成员则用于把一个激活的（已经启动的）定时器链接到<code>tTimerSoftList</code>和<code>tTimerHardList</code>链表中。</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief 定时器结构体</span><br><span class="line"> */</span><br><span class="line">typedef struct _tTimer</span><br><span class="line">&#123;</span><br><span class="line">    char  Timername[OS_TIMERNAME_LENGTH];   /*&lt;!定时器名称*/</span><br><span class="line">    uint16_t Timername_length;              /*&lt;!定时器名称长度*/</span><br><span class="line">    tNode linkNode;                         /*&lt;!链表节点*/</span><br><span class="line">    uint32_t startDelayTicks;               /*&lt;!初次(开始)启动延后的ticks数*/</span><br><span class="line">    uint32_t durationTicks;                 /*&lt;!周期定时时的周期ticks数(周期执行的时间)(持续时间滴答)*/</span><br><span class="line">    uint32_t delayTicks;                    /*&lt;!当前定时递减计数值*/</span><br><span class="line">    void (*timerFunc)(void *arg);           /*&lt;!定时回调函数*/</span><br><span class="line">    void * arg;                             /*&lt;!传递给回调函数的参数*/</span><br><span class="line">    uint32_t config;                        /*&lt;!定时器配置参数*/</span><br><span class="line">    tTimerState state;                      /*&lt;!定时器状态*/</span><br><span class="line">&#125;tTimer;</span><br></pre></td></tr></table></figure>

<h3 id="3-定时器的管理方式"><a href="#3-定时器的管理方式" class="headerlink" title="3. 定时器的管理方式"></a>3. 定时器的管理方式</h3><p>介绍了GoupOS定时器并对定时器的工作机制进行了概念上的讲解，本节深入介绍定时器的各个接口，帮助读者在代码层次上理解GoupOS定时器。<br>在系统启动时需要初始化定时器管理系统。可以通过下面的函数接口完成：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void OS_TimerTaskInit(void)</span><br><span class="line">void OS_TimerModule_Init(void)；</span><br></pre></td></tr></table></figure>
<p>定时器控制块中含有定时器相关的重要参数，它们在定时器各种状态间起到纽带的作用。定时器的相关操作如图5-4所示，包括：创建／初始化定时器、启动定时器、停止／控制定时器、删除／脱离定时器。一次性定时器在定时到达后会从定时器链表中被移除，而周期性定时器会一直在定时器链表，这与定时器参数设置相关。在每次的操作系统时钟中断发生时，都会更改已经延时到达的定时器状态参数。<br><img data-src="https://s2.loli.net/2022/05/09/y9urhMvpQED1Jiq.png" alt="定时器的相关操"></p>
<h4 id="1-创建和删除定时器"><a href="#1-创建和删除定时器" class="headerlink" title="1. 创建和删除定时器"></a>1. 创建和删除定时器</h4><p>创建定时器时，可利用tTimerInit接口来初始化该定时器，函数接口如下：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTimerInit(char *Timername, uint16_t Timername_len,tTimer * timer,uint32_t delayTicks,uint32_t durationTicks,void (*timerFunc)(void *arg),void *arg,uint32_t config)</span><br></pre></td></tr></table></figure>

<p>使用该函数接口时会初始化相应的定时器控制块、定时器名称、定时器到达函数等，其中的各参数和返回值说明见下表</p>
<table border="1">
    <caption>线程状态转换的基本函数</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>Timername</td>
        <td>
            定时器的名称
        </td>
    </tr>
    <tr>
        <td>Timername_len</td>
        <td>
            定时器名称长度，当名称长度超过OS_TIMERNAME_LENGTH多余的字段会被截断；
        </td>
    </tr>
    <tr>
        <td>timer</td>
        <td>
            定时器结构体
        </td>
    </tr>
    <tr>
        <td>delayTicks</td>
        <td>
            定时器初始启动时延时值
        </td>
    </tr>
    <tr>
        <td>durationTicks</td>
        <td>
            周期定时时的周期ticks数(周期执行的时间)(持续时间滴答)
        </td>
    </tr>
    <tr>
        <td>void (*timerFunc)(void *arg)</td>
        <td>
            定时器延时到达函数指针（当定时器到达时，系统会调用这个函数）
        </td>
    </tr>
    <tr>
        <td>arg</td>
        <td>
            定时器延时到达函数的入口参数（当定时器延时到达时，调用延时到达回调函数会把这个参数作为入口参数传递给延时到达函数）
        </td>
    </tr>
    <tr>
        <td>config</td>
        <td>
            通过该配置配置该定时器为软定时器还是硬件定时器配置参数: 
        <br>
            #define TIMER_CONFIG_TYPE_HARD      (1<<0) 在中断服务函数中处理
        <br>
            #define TIMER_CONFIG_TYPE_SOFT      (0<<0) 在任务中处理
        </td>
    </tr>
</table>

<p>当一个定时器不需要再使用时，可以使用下面的函数接口：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTimerDestroy(tTimer * timer); //定时器删除函数</span><br></pre></td></tr></table></figure>

<p>删除定时器时，但是定时器对象所占有的内存不会被释放，其中的各参数和返回值说明见下表</p>
<table border="1">
    <caption>tTimerDestroy()的输入参数</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>timer</td>
        <td>
            定时器结构体
        </td>
    </tr>
</table>

<h4 id="2-启动和停止定时器"><a href="#2-启动和停止定时器" class="headerlink" title="2. 启动和停止定时器"></a>2. 启动和停止定时器</h4><p>当定时器被创建或者初始化以后，并不会被立即启动，必须在调用启动定时器函数接口后才开始工作，启动定时器函数接口如下：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTimerStart(tTimer *timer)；</span><br></pre></td></tr></table></figure>

<p>调用定时器启动函数接口后，定时器的状态将更改为激活状态(tTimerStarted)，并按照配置硬件或者软件定时器插入不同队列链表中，其中的各参数和返回值说明见下表</p>
<table border="1">
    <caption> tTimerStart()的输入参数</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>timer</td>
        <td>
            定时器结构体
        </td>
    </tr>
</table>

<p>启动定时器以后，若想使它停止，可以使用下面的函数接口：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTimer.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTimerStop(tTimer *timer);  //定时器停止函数</span><br></pre></td></tr></table></figure>

<p>调用定时器停止函数接口后，定时器状态将更改为停止状态，并从软件<code>tTimerSoftList</code>链表或者硬件<code>tTimerHardList</code>链表中脱离出来，不参与定时器延时检查。其中的各参数和返回值说明见表</p>
<table border="1">
    <caption> tTimerStop()的输入参数</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>timer</td>
        <td>
            定时器结构体
        </td>
    </tr>
</table>

<h2 id="3-定时器应用示例"><a href="#3-定时器应用示例" class="headerlink" title="3. 定时器应用示例"></a>3. 定时器应用示例</h2><p>下面是一个创建定时器的例子，该例程会创建两个定时器，一个是单次定时， 一个是周期定时并让周期性定时器运行一段时间后停止，如代码清单如下所示</p>
<table border="1">
    <caption> 创建定时器例程</caption>
</table>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;GoupOSinclude.h&quot;</span><br><span class="line">#include &quot;app.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tTimer timer1;</span><br><span class="line">tTimer timer2;</span><br><span class="line"></span><br><span class="line">uint16_t timer1_num = 0;</span><br><span class="line">uint16_t timer2_num = 0;</span><br><span class="line">/*定时器1*/</span><br><span class="line">void timer1func(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">	   timer1_num++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*定时器2*/</span><br><span class="line">void timer2func(void *arg)</span><br><span class="line">&#123;</span><br><span class="line">／＊运行第10次，停止周期性定时器＊／</span><br><span class="line">	if(++timer2_num &gt;= 10)</span><br><span class="line">	&#123;</span><br><span class="line">		tTimerStop(&amp;timer2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*用户任务初始化程序*/</span><br><span class="line">void AppTaskInit(void)</span><br><span class="line">&#123;</span><br><span class="line">/*定时器初始化函数*/</span><br><span class="line">	tTimerInit(&quot;timer1&quot;,sizeof(&quot;timer1&quot;),&amp;timer1,10,0,timer1func,(void * )0,TIMER_CONFIG_TYPE_SOFT);</span><br><span class="line">	tTimerInit(&quot;timer2&quot;,sizeof(&quot;timer2&quot;),&amp;timer2,15,10,timer2func,(void * )0,TIMER_CONFIG_TYPE_SOFT);</span><br><span class="line">/*定时器启动函数*/</span><br><span class="line">	tTimerStart(&amp;timer1);</span><br><span class="line">	tTimerStart(&amp;timer2);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<table border="1">
    <caption> 运行结果：前面写的钩子函数，和任务1和任务的函数还是在正常继续运行</caption>
</table>

<p><img data-src="https://s2.loli.net/2022/05/09/khronWRmpuDsyMX.png" alt="定时器例程"></p>
<p>周期性定时器启动时先延时15个OS Tick启动运行1次，然后延时函数每10个OS Tick运行1次，共运行10次(10次后调用tTimerStop使定时器1停止运行）；单次定时器的超时函数在第10个OSTick时运行一次。</p>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS设计与实现</category>
      </categories>
      <tags>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于东北、华北、华东、华南、华中、西南、西北</title>
    <url>/2022/05/08/%E5%9C%B0%E7%90%86%E5%8C%BA%E5%9F%9F%E5%88%92%E5%88%86/%E5%85%B3%E4%BA%8E%E4%B8%9C%E5%8C%97%E3%80%81%E5%8D%8E%E5%8C%97%E3%80%81%E5%8D%8E%E4%B8%9C%E3%80%81%E5%8D%8E%E5%8D%97%E3%80%81%E5%8D%8E%E4%B8%AD%E3%80%81%E8%A5%BF%E5%8D%97%E3%80%81%E8%A5%BF%E5%8C%97/</url>
    <content><![CDATA[<ul>
<li>关于东北、华东、华北、华中、华南、西南、西北的地理分区</li>
</ul>
<span id="more"></span>

<ol>
<li><p>东北（黑龙江省、吉林省、辽宁省）。</p>
</li>
<li><p>华东（上海市、江苏省、浙江省、安徽省、福建省、江西省、山东省、台湾省）。</p>
</li>
<li><p>华北（北京市、天津市、山西省、河北省、内蒙古自治区）。</p>
</li>
<li><p>华中（河南省、湖北省、湖南省）。</p>
</li>
<li><p>华南（广东省、广西壮族自治区、海南省、香港特别行政区、澳门特别行政区）。</p>
</li>
<li><p>西南（四川省、贵州省、云南省、重庆市、西藏自治区）。</p>
</li>
<li><p>西北（陕西省、甘肃省、青海省、宁夏回族自治区、新疆维吾尔自治区）。</p>
</li>
</ol>
<ul>
<li>图片出处：维基百科，其中华中地区和华南地区合并在一起；</li>
</ul>
<img data-src="https://s2.loli.net/2022/05/08/vbg6csUOBFyI1jk.png"/>

]]></content>
      <categories>
        <category>中国地理</category>
        <category>大区</category>
        <category>分区</category>
      </categories>
      <tags>
        <tag>中国地理</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS嵌入式操作系统移植</title>
    <url>/2022/05/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E6%96%87%E7%AB%A0/GoupOS%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>GoupOS嵌入式操作系统移植版本： V1.1</p>
<span id="more"></span>

<ol>
<li><p>首先找到os文件夹，然后拷贝os文件夹到自己的工程目录下，文件目录下有这些文件<br><img data-src="https://s2.loli.net/2022/05/07/KJT4MgzOBPsp3ur.png" alt="文件目录.png"><br>可以阅读当前文件下的README.txt文件，查看每个文件目录的作用；</p>
</li>
<li><p>在MDK中，C语言需要包含的头文件有：</p>
<table border="1">
 <tr>
     <td>..\os\Device\inc</td>
 </tr>
 <tr>
     <td>..\os\GoupOSBasics\inc</td>
 </tr>
 <tr>
     <td>..\os\GoupOSkernel\Cortex-Mx\GoupOSexternfile</td>
 </tr>
 <tr>
     <td>..\os\GoupOSkernel\Cortex-Mx\inc</td>
 </tr>
 <tr>
     <td>..\os\GoupOSkernel\Cortex-Mx</td>
 </tr>
 <tr>
     <td>..\os\SystemComponents\inc</td>
 </tr>
 <tr>
     <td>..\os\SystemMemManage\inc</td>
 </tr>
</table></li>
</ol>
<p>在MDK中，汇编语言需要包含的头文件有：</p>
<table border="1">
    <tr>
        <td>..\os\GoupOSkernel\Cortex-Mx</td>
    </tr>
</table>

<ol start="3">
<li>在MDK中，包含这些目录下的源文件：<table border="1">
 <tr>
     <td>.. \os\Device\src</td>
 </tr>
 <tr>
     <td>..\os\GoupOSBasics\src</td>
 </tr>
 <tr>
     <td>..\os\GoupOSkernel\Cortex-Mx\src</td>
 </tr>
 <tr>
     <td>..\os\SystemComponents\src</td>
 </tr>
 <tr>
     <td>..\os\SystemMemManage\src</td>
 </tr>
</table></li>
</ol>
<p>暂时屏蔽这两个源文:os_stdlib.c、os_object.c;<br>说明：Cortex-Mx，根据不同内核选择不同的内核文件，这样就完成了GoupOS的移植，下面是系统参数的修改。</p>
<ol start="4">
<li><p>大部分文件夹下有README.txt文档，请阅读首先，请搜索总个工程中源文件，保证：SysTick_Handler函数只在tcpu.c文件中使用；tcpu.c文件存放位置在：..\os\GoupOSkernel\Cortex-Mx\src目录下；</p>
</li>
<li><p>修改GoupOS的系统配置文件中相关参数：GoupOSconfig.h;</p>
<table border="1">
 <caption>修改系统运行参数，配置滴答</caption>
 <tr>
     <td>#define	CPU_CLOCK_HZ</td>
     <td>(180000000)</td>
     <td>系统时钟</td>
 </tr>
 <tr>
     <td>#define OS_1S_TICKS</td>
     <td>(1000)</td>
     <td>系统每秒钟滴答次数(该值可以默认)</td>
 </tr>
 <tr>
     <td>#define OS_TIME_BASE</td>
     <td>(CPU_CLOCK_HZ/OS_1S_TICKS)</td>
     <td>系统时基</td>
 </tr>
 <tr>
     <td>#define OS_SYSTICK_MS</td>
     <td>(1)</td>
     <td>系统最小时间单位</td>
 </tr>
 <tr>
     <td>#define TICKS_PER_SEC</td>
     <td>(1000/OS_SYSTICK_MS)</td>
     <td>滴答次数</td>
 </tr>
</table></li>
</ol>
<p>系统优先级是可以支持配置的,考虑系统资源，优先级配置8-1024；修改：TINYOS_PRO_COUNT 宏的值；</p>
<p>芯片是否支持FPU可以通过配置：OS_ARM_FPU_ENABLE宏是否使能支持FPU功能，该宏支持两个选项 </p>
<table border="1">
    <tr>
        <td>#define OS_ARM_FPU_ENABLE           OS_ENABLE</td>
        <td>支持FPU功能，开启FPU</td>
    </tr>
    <tr>
        <td>#define OS_ARM_FPU_ENABLE           OS_DISABLE</td>
        <td>不支持FPU功能，关闭FPU</td>
    </tr>
</table>

<p>系统启动时候，输出调试信息，可以通过配置：OS_STARTUPINFO 宏，设置系统启动时候是否打印调试信息，启动调试信息包含系统说明，启动线程说明，设置为1时候，启动了调试信息，设置0关闭了调试信息。</p>
<table border="1">
    <caption>系统模块的裁剪</caption>
    <tr>
        <td>#define GOUPOS_ENABLE_SEM</td>
        <td>(1)</td>
        <td>控制是否裁剪信号量功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_MAILMSG</td>
        <td>(1)</td>
        <td>控制是否裁剪邮箱功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_MEMBLOCK</td>
        <td>(1)</td>
        <td>控制是否裁剪内存功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_EVENTFLAGGROUP</td>
        <td>(1)</td>
        <td>控制是否裁剪事件标志组功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_MUTEX</td>
        <td>(1)</td>
        <td>控制是否裁剪互斥锁功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_TIMER</td>
        <td>(1)</td>
        <td>控制是否裁剪定时器功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_CPUUSAGE_STAT</td>
        <td>(1)</td>
        <td>控制是否裁剪CPU使用率功能模块</td>
    </tr>
    <tr>
        <td>#define GOUPOS_ENABLE_HOOKS</td>
        <td>(1)</td>
        <td>控制是否裁剪钩子函数功能模块</td>
    </tr>
</table>

<p>关于系统模块裁剪，该部分功能正在完善，可能裁剪某些特殊模块会出现编译不过问题，正在完善，但是只要编译通过，能正常仿真运行，那么裁剪基本没有问题，</p>
<ol start="6">
<li><p>关于文件引用，由于系统需要使用滴答，所以系统会引用库文件去支持tcpu.c,GoupOSexternfile.h头文件中引用外部文件，例如GoupOSexternfile.h中包含 #include “stm32f4xx.h”</p>
</li>
<li><p>用户包含系统文件，只需要包含#include “GoupOSinclude.h”，就可以调用系统所有API函数接口。</p>
</li>
<li><p>需要添加一个app.h app.c文件该文件中主要添加一个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*用户任务初始化程序*/</span><br><span class="line">void AppTaskInit(void)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该文件主要包含在os_tTask.c文件中，如果需要修改文件名，可以更改，同时需要在os_tTask.c中，将包含的头文件也修改;但是任务初始化函数不能修改。如上图，</p>
</li>
<li><p>配置工程中，需要去除相关函数后再移植操作系统</p>
<table border="1">
 <tr>
     <td>void PendSV_Handler(void)</td>
 </tr>
 <tr>
     <td>void SysTick_Handler(void)</td>
 </tr>
</table>
</li>
<li><p>如果工程中需要打印函数，需要先初始化串口，然后配置<code>osdev_out(usart_putc);   //初始化打印函数底层</code><br>然后调用 ：<code>GoupOS_StartupRun();函数</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS系统移植</category>
      </categories>
      <tags>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS线程管理</title>
    <url>/2022/05/07/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E6%96%87%E7%AB%A0/GoupOS%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>GoupOS线程管理</p>
</blockquote>
<span id="more"></span>

<h2 id="1-需要线程管理的原因"><a href="#1-需要线程管理的原因" class="headerlink" title="1. 需要线程管理的原因"></a>1. 需要线程管理的原因</h2><p>在日常生活中，我们要解决个大问题，般会将它分解成多个简单的、容易解决的小问题，小问题逐个被解决，大问题也就随之解决了。在多线程操作系统中，同样需要开发人员把个复杂的应用分解成多个小的、可调度的、序列化的程序单元，当合理地划分任务并正确地执行时，这种设计就能够让系统满足实时系统的性能及时间的要求。例如让嵌入式系统执行这样的任务，即系统通过传感器采集数据，并通过显示屏将数据显示出来，在多线程实时系统中，可以将该任务分解成两个子任务，如下图所示，任务l不间断地读取传感器数据，并将数据写到共享内存中，任务2周期性地从共享内存中读取数据，并 将传感器数据输出到显示屏上。<br><img data-src="https://s2.loli.net/2022/05/07/rqz19bRSAUg4oFi.png" alt="传感器数据接收任务与显示任务的切换执行.png"><br>在GoupOS中，与上述子任务对应的程序实体就是线程。线程是实现任务的载体，是GoupOS中最基本的调度单位，它描述了个任务执行的运行环境，也描述了该任务所处的优先等级。重要的任务可设置相对较高的优先级，非重要的任务可以设置较低的优先级，不同的任务还可以设置相同的优先级，轮流运行。<br>当线程运行时，它会认为自己是以独占CPU的方式在运行，线程执行时的运行环境称为上下文。</p>
<h2 id="2-线程管理的功能特点"><a href="#2-线程管理的功能特点" class="headerlink" title="2. 线程管理的功能特点"></a>2. 线程管理的功能特点</h2><p>GoupOS线程管理的主要功能是对线程进行管理和调度。系统中共存在两类线程，分别是系统线程和用户线程，系统线程是由GoupOS内核创建的线程，用户线程是由应用程序创建的线程。这两类线程都会从内核对象容器中分配线程对象，当线程被删除时，线程对象也会被从对象容器中删除。每个线程都有重要的属性，如线程控制块、线程栈、入口函数等。<br>GoupOS的线程调度器是抢占式的，其主要工作就是从就绪线程列表中查找最高优先级线程，保证优先级最高的线程能够被运行，优先级最高的任务一旦就绪，总能得到CPU一的使用权。<br>当有高优先级线程满足条件后，低优先级线程运行权就被剥夺了，或者说让出了，高优先级的线程会立刻得到CPU的使用权。<br>如果是中断服务程序使一个高优先级的线程满足运行条件，则中断完成时，被中断的线程挂起，优先级高的线程开始运行。<br>当调度器调度线程切换时，先将当前线程上下文保存起来，当再切回到这个线程时，线程调度器将恢复该线程的上下文信息。</p>
<h2 id="3-线程工作机制"><a href="#3-线程工作机制" class="headerlink" title="3. 线程工作机制"></a>3. 线程工作机制</h2><p>在GoupOS中，线程控制块由结构体struct _tTask表示。线程控制块是操作系统用于管理线程的数据结构，它会存放线程的一些信息，例如优先级、线程名称、线程状态等，包含线程与线程之间连接用的链表结构、线程等待事件集合等，详细定义如下：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTask.h</span></figcaption><table><tr><td class="code"><pre><span class="line">/*任务结构体*/</span><br><span class="line">typedef struct _tTask</span><br><span class="line">&#123;</span><br><span class="line">	/*&lt;!指向堆栈指针*/</span><br><span class="line">	tTaskStack *stack;						</span><br><span class="line">	char taskname[OS_TASKNAME_LENGTH];		/*&lt;!任务的名字*/	</span><br><span class="line">	uint8_t taskname_length;				/*&lt;!任务名字长度*/</span><br><span class="line">/*&lt;!任务队列，当前保留，暂时没使用，使用方法是将所有任务链接在一起*/</span><br><span class="line">	tNode tasknode;							</span><br><span class="line">/*&lt;!任务ID号，为每个任务分配一个ID号，当前保留，暂时没有使用*/</span><br><span class="line">	uint32_t taskID;						</span><br><span class="line">/*&lt;!优先级队列链表节点,放在就绪表中*/</span><br><span class="line">	tNode linkNode;							</span><br><span class="line">	uint32_t TaskRunTimeslice;				/*&lt;!任务运行的时间片*/</span><br><span class="line">/*&lt;!任务的时间片，保存者当前任务运行多长的时间*/</span><br><span class="line">	uint32_t TaskTimeslice;					</span><br><span class="line">/*&lt;!添加挂起计数器 被挂起的次数(暂停计数器，被暂停运行的次数)*/</span><br><span class="line">	uint32_t suspendCount;					</span><br><span class="line">	uint32_t 	delayTicks;					/*&lt;!任务延时计时器*/	</span><br><span class="line">	tNode delayNode;						/*&lt;!添加延时节点*/</span><br><span class="line">	uint32_t 	prio;						/*&lt;!任务的优先级*/	</span><br><span class="line">/*&lt;!任务状态字段(指示是否处于延时状态)*/</span><br><span class="line">	uint32_t state;							</span><br><span class="line">	uint32_t *stackBase;					/*&lt;!栈的起始地址*/</span><br><span class="line">	uint32_t stacksize;						/*&lt;!任务栈总大小*/</span><br><span class="line">/*&lt;!任务被删除时调用的清理函数*/</span><br><span class="line">	void (*clean)(void * param); 			</span><br><span class="line">	void *cleanParam;            			/*&lt;!传递给清理函数的参数*/</span><br><span class="line">/*&lt;!请求删除标志，非0表示请求删除*/</span><br><span class="line">	uint8_t requestDeleteFlag;   			</span><br><span class="line">	/*&lt;!添加等待的事件控制块类型数据*/</span><br><span class="line">	/*&lt;!因为是指针类型，只要告诉编译器有这么一个类型就可以了，他的大小是指针变量的大小就可以了，</span><br><span class="line">	 *  编译器就知道怎么编译了，指针分配的空间是固定的，4个字节</span><br><span class="line">	 */</span><br><span class="line">	tEvent *waitEvent;</span><br><span class="line">/*&lt;!等待事件控制块，存放消息的地方（邮箱中会使用到）*/</span><br><span class="line">	void *EventMsg;							</span><br><span class="line">	uint32_t waitEventResult;				/*&lt;!等待事件的结果*/</span><br><span class="line">	/*&lt;!保存请求的类型:  置位清零（置位中清零有：任意标志位匹配 、所有标志位匹配）*/</span><br><span class="line">	uint32_t waitFlagsType;				</span><br><span class="line">/*&lt;!请求的事件标志：等待那些标志出现任务就运行*/</span><br><span class="line">	uint32_t eventFlags;					</span><br><span class="line">	/**线程故障信息，实时性要求不高时，可以开启*/</span><br><span class="line">#if(THREAD_FAULT == 1)</span><br><span class="line">	Threadfailure Threadfault;</span><br><span class="line">#endif</span><br><span class="line">	</span><br><span class="line">&#125;tTask;</span><br></pre></td></tr></table></figure>

<p>其中uint32_t 	prio是线程创建时指定的线程优先级，它在线程运行过程中是不会改变的。</p>
<h3 id="1-线程的属性"><a href="#1-线程的属性" class="headerlink" title="1. 线程的属性"></a>1. 线程的属性</h3><h4 id="1-线程栈"><a href="#1-线程栈" class="headerlink" title="1. 线程栈"></a>1. 线程栈</h4><p>GoupOS线程具有独立的栈，当进行线程切换时，会将当前线程的上下文保存在栈中，当线程要恢复运行时，再从栈中读取上下文信息进行恢复。<br>线程栈还用来存放函数中的局部变最：函数中的局部变量从线程栈空间中申请；函数中局部变量初始时从寄存器中分配(ARM架构)，当该函数再调用另一个函数时，这些局部变量将被放入栈中。<br>第一次运行线程时，可以以手工的方式构造上下文来设置一些初始环境：入口函数(PC寄存器）、入口参数(RO寄存器）、返回位置(LR寄存器）、当前机器运行状态(CPSR寄存器）。<br>线程栈的增长方向是与芯片构架密切相关的，目前版本均只支持栈由高地址向低地址增对千ARM Cortex M架构，线程栈的构造如右侧图所示。<br>线程栈大小可以这样设定：对于资源相对较大的MCU,可以设计较大的线程栈；也可以在初始时设置较大的栈。例如指定大小为1KB或2KB,可以根据系统提供的函数获取栈大概的使用率。<br><a><img data-src="https://s2.loli.net/2022/05/07/FtHJYEGkWmQdlbe.png" alt="线程栈的构造.png"></a></p>
<h4 id="2-线程状态"><a href="#2-线程状态" class="headerlink" title="2. 线程状态"></a>2. 线程状态</h4><p>在线程运行过程中，同时间内只允许一个线程在处理器中运行。从运行的过程上划分，线程有多种不同的运行状态，如初始状态、挂起状态、就绪状态等。在GoupOS中，线程包含4种状态，操作系统会自动根据线程运行的情况来动态调整其状态。GoupOS中线程的4种状态如下表所示。<br><img data-src="https://s2.loli.net/2022/05/07/5QsbiJzohYL2UKX.png" alt="线程的4中状态.png"></p>
<h4 id="3-线程优先级"><a href="#3-线程优先级" class="headerlink" title="3. 线程优先级"></a>3. 线程优先级</h4><p>GoupOS线程的优先级表示线程被调度的优先程度。每个线程都具有优先级， 线程越重要，被赋予的优先级就越高，该线程被调度的可能性就越大。<br>GoupOS最大支持32个线程优先级(0~32)，数值越小的优先级越高，0为最高优先级。对于ARM Cortex-M系列，普遍采用32个优先级。最低优先级默认分配给空。最低优先级默认分配给空闲线程使用，用户一般不使用。在系统中， 如果有比当前线程优先级更高的线程就绪时，当前线程将立刻被换出，高优先级线程抢占处理器运行。</p>
<h4 id="4-时间片"><a href="#4-时间片" class="headerlink" title="4. 时间片"></a>4. 时间片</h4><p>每个线程都有时间片参数，但时间片仅对优先级相同的就绪状态线程有效。 当系统对优先级相同的就绪状态线程采用时间片轮转的调度方式进行调度时， 时间片起到约束线程单次运行时长的作用， 其单位是一个系统节拍(OS Tick)。 假设有2个优先级相同的就绪状态线程A与B, A线程的时间片设置为10, B线程的时间片设置为5, 那么当系统中不存在比A优先级高的就绪状态线程时，系统会在A、B线程间来回切换执行，并且每次对A线程执行10个节拍的时长， 对B线程执行5个节拍的时长，如下图所示。<br><img data-src="https://s2.loli.net/2022/05/07/87AzsDPXCj1v6FK.png" alt="相同优先级时间片轮转.png"></p>
<h4 id="5-线程入口函数"><a href="#5-线程入口函数" class="headerlink" title="5. 线程入口函数"></a>5. 线程入口函数</h4><p>线程控制块中的task1Entry是线程的入口函数， 它是线程实现预期功能的函数。线程的入口函数有用户设计实现，一般有一下两种代码模式。<br>(1)无限循环模式：在实时系统中， 线程通常是被动式的。 这是由实时系统的特性所决定的， 实时系统通常总是等待外界事件的发生， 而后进行相应的服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void task1Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;</span><br><span class="line">		/*&lt;! User code */	</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>线程看似没有什么限制程序执行的因素，似乎所有的操作都可以执行。但是作为一个优先级明确的实时系统，如果一个线程中的程序陷入了死循环，那么比它优先级低的线程都将不能得到执行。所以在实时操作系统中必须注意的一点：线程中不能陷入死循环操作，必须要有让出CPU使用权的动作，如在循环中调用延时函数或者主动挂起。用户设计这种无限循环线程的目的，就是为了让该线程一直被系统循环调度运行，永不删除。<br>(2)顺序执行或有限次循环模式：简单的顺序语旬、do while()或for()循环等。</p>
<h4 id="6-线程错误码"><a href="#6-线程错误码" class="headerlink" title="6. 线程错误码"></a>6. 线程错误码</h4><p>一个线程就是一个执行场景，错误码是与执行环境密切相关的，所以为每个线程配备了一个变量，用于保存错误码。线程的错误码有以下几种：</p>
<figure class="highlight plaintext"><figcaption><span>os_tEventConBlock_h__</span></figcaption><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief (等待事件的)错误码</span><br><span class="line"> */</span><br><span class="line">typedef enum _tError</span><br><span class="line">&#123;</span><br><span class="line">	tErrorNoError				= 0,			/*&lt;!无错误*/</span><br><span class="line">	tErrorTimeout				= 1,			/*&lt;!任务超时*/</span><br><span class="line">	tErrorResourceUnavaliable 	= 2,          	/*&lt;!错误，资源不可用*/</span><br><span class="line">	tErrorDel 				 	= 3,			/*&lt;!信号量被删除 */</span><br><span class="line">	tErrorResourceFull			= 4,			/*&lt;!错误，资源不可用*/</span><br><span class="line">	tErrorOwner					= 5,			/*&lt;!拥有者错误*/</span><br><span class="line">&#125; tError;</span><br></pre></td></tr></table></figure>

<h3 id="2-线程状态切换"><a href="#2-线程状态切换" class="headerlink" title="2. 线程状态切换"></a>2. 线程状态切换</h3><p>GoupOS提供一系列的操作系统调用接口，使得线程的状态在这几种状态之间来回切换。几种状态之间的转换关系如下图所示。<br><img data-src="https://s2.loli.net/2022/05/07/QmjcC3a9yXdZM5K.png" alt="程状态转换图.png"></p>
<table border="1">
    <caption>线程状态转换的基本函数</caption>
    <tr>
        <td>任务创建函数</td>
        <td>tTaskInit()；</td>
    </tr>
    <tr>
        <td>任务延时函数</td>
        <td>tTaskDelay ()；</td>
    </tr>
    <tr>
        <td>任务挂起函数</td>
        <td>tTaskSuspend();</td>
    </tr>
    <tr>
        <td>任务唤醒函数</td>
        <td>tTaskwakeUp();</td>
    </tr>
    <tr>
        <td>任务等待事件函数</td>
        <td>tEventwait();</td>
    </tr>
    <tr>
        <td>任务获取事件函数</td>
        <td>tEventWakeUp();
            <br>
            tEventWakeUpTask();
        </td>
    </tr>
    <tr>
        <td>任务删除函数</td>
        <td>
            tTaskForceDelete();
            <br>
            tTaskRequestDelete();
            <br>
            tTaskIsRequestedDeleted();
            <br>
            tTaskDeleteSelf();
        </td>
    </tr>
</table>

<p>线程通过调用函数tTaskInit()进入初始状态；初始完成后进入就绪状态；就绪状态的线程被调度器调度后进入运行状态；当处于运行状态的线程调用tTaskDelay()、tSemWait()、tMutexChokeObtainlock()等函数或者获取不到资源时，将进入挂起状态；处于挂起状态 的线程，如果等待超时依然未能获得资源或由千其他线程释放了资源，它将返回到就绪状态。挂起状态的线程．，如果调用tSemDestroy()、tMutexTaskDelete()函数，将更改为关闭状态。<br>注意：GoupOS实际上线程并不存在运行状态，就绪状态和运行状态是等同的。</p>
<h3 id="3-系统线程"><a href="#3-系统线程" class="headerlink" title="3. 系统线程"></a>3. 系统线程</h3><p>前文中已提到，系统线程是指由系统创建的线程，用户线程是由用户程序调用线程管理接口创建的线程，在GoupOS内核中的系统线程有空闪线程和主线程。</p>
<h4 id="1-空闲线程"><a href="#1-空闲线程" class="headerlink" title="1. 空闲线程"></a>1. 空闲线程</h4><p>空闲线程是系统创建的最低优先级的线程，线程状态永远为就绪状态。当系统中无其就绪线程存在时，调度器将调度到空闲线程，它通常是一个死循环，且永远不能被挂起。另外，空闲线程在GoupOS中也有它的特殊用途。<br>空闲线程也提供了接口来运行用户设置的钩子函数在空闲线程运行时会调用该钩子函数，适合钩入功耗管理、看门狗、喂狗等工作。</p>
<h2 id="4-线程的管理方式"><a href="#4-线程的管理方式" class="headerlink" title="4. 线程的管理方式"></a>4. 线程的管理方式</h2><p>程状态转换图描述了线程的相关操作，包括创建／初始化线程、启动线程、运行线程、删除线程。使用<code>tTaskInit()</code>初始化一个静态线程，静态线程由用户分配栈空间。</p>
<h3 id="1-创建和删除线程"><a href="#1-创建和删除线程" class="headerlink" title="1. 创建和删除线程"></a>1. 创建和删除线程</h3><p>线程的初始化可以使用下面的函数接口完成， 它用于初始化线程对象，线程的线程句柄（或者说线程控制块指针）、线程栈由用户提供。线程控制块、线程运行栈一般都设置为全局变量， 在编译时就被确定和被分配处理， 内核不负责分配内存空间。需要注意的是,用户提供的栈首地址需进行系统对齐（例如ARM上需要进行4字节对齐）。线程创建接口的参数和返回值如下表所示。</p>
<figure class="highlight plaintext"><figcaption><span>os_tTask_h__</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTaskInit(	char *taskname,  uint16_t taskname_legnth,tTask* task,  void (*entry)(void *),void *param,uint32_t prio,tTaskStack *stack,uint32_t stacksize,uint32_t tTaskRTime);</span><br></pre></td></tr></table></figure>

<table border="1">
    <caption>任务初始化tTaskInit()的输入参数列表s</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>taskname</td>
        <td>
            线程的名称；线程名称的最大长度由GoupOSconfig.h中的宏OS_TASKNAME_LENGTH指定，多余部分会被自动截掉
        </td>
    </tr>
    <tr>
        <td>taskname_legnth</td>
        <td>
            任务名称长度，为了保证线程名称安全，当线程名称中有特殊字符时候，通过指定名称长度，保证特殊字符也再保存，超过名字宏OS_TASKNAME_LENGTH指定长度后，多余部分会被自动截断
        </td>
    </tr>
    <tr>
        <td>task</td>
        <td>
            线程对象，每个线程都有一个自己的线程对象管理线程数据(线程旬柄。线程旬柄由用户提供, 指向对应的线程控制块内存地址)
        </td>
    </tr>
    <tr>
        <td>entry</td>
        <td>线程入口函数</td>
    </tr>
    <tr>
        <td>param</td>
        <td>线程入口函数参数</td>
    </tr>
    <tr>
        <td>prio</td>
        <td>
            线程的优先级。优先级范围取决于系统配置情况(GoupOSconfig.h中的TINYOS_PRO_COUNT宏定义），目前支持1024个优先级，可以修改。数值越小优先级越高，0代表最高优先级
        </td>
    </tr>
    <tr>
        <td>stack</td>
        <td>
            线程栈起始地址，该地址为栈底地址；为数组的首地址
        </td>
    </tr>
    <tr>
        <td>stacksize</td>
        <td>
            线程栈大小，单位是系统位宽除以8（单位是字，32位系统中1个字等于4字节）；例如：32位/8则单位为4个字节为一个单位。
        </td>
    </tr>
    <tr>
        <td>tTaskRTime</td>
        <td>
            线程的时间片大小，时间片的单位时操作系统的时钟节拍。当系统中存在相同优先级的线程时，并且没有更高优先级任务，这个参数指定的线程一次调度能够运行的最大时间长度。这个时间片运行结束时，调度器自动选择下一个就绪状态的同优先级线程运行。
        </td>
    </tr>  
</table>

<p>线程通过该函数后，就会直接创建好，并且进入就绪态等待CPU的调用。</p>
<h3 id="2-获取线程信息"><a href="#2-获取线程信息" class="headerlink" title="2. 获取线程信息"></a>2. 获取线程信息</h3><p>在程序运行过程中一段相同的代码可能会被多个线程执行，在执行的时候可以通过下面的函数接口获得当前执行的线程句柄（线程任务）如下表</p>
<figure class="highlight plaintext"><figcaption><span>os_tTask_h__</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTaskGetInfo(tTask* task,tTaskInfo * taskinfo);</span><br><span class="line">void tTaskGetCurrentInfo(tTaskInfo * taskinfo);</span><br></pre></td></tr></table></figure>

<table border="1">
    <caption>任务初始化tTaskInit()的输入参数列表s</caption>
    <tr>
        <th>返回数据</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>tTaskInfo * taskinfo</td>
        <td>
            线程信息结构体
        </td>
    </tr>
</table>

<h3 id="3-线程睡眠"><a href="#3-线程睡眠" class="headerlink" title="3. 线程睡眠"></a>3. 线程睡眠</h3><p>在实际应用中，我们有时需要让当前运行的线程延迟一段时间，即在指定的时间到达后重新运行，这就叫做“线程睡眠”,线程睡眠可以使用以下函数接口</p>
<figure class="highlight plaintext"><figcaption><span>os_tTime.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void  tTaskDelay (uint32_t delay);</span><br></pre></td></tr></table></figure>
<p>调用它们可以使当前线程挂起一段指定的时间，当这个时间过后，线程会被唤醒并再次进入就绪状态。这个函数接受一个参数，该参数指定线程的休眠时间。 线程睡眠接口的参数如下表</p>
<table border="1">
    <caption>任务初始化tTaskInit()的输入参数列表</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>delay</td>
        <td>
            线程睡眠的时间，传入的参数睡眠(或延时)时间等于:delay*系统时钟节拍。具体时间，需要知道设置的时钟节拍最短时间是多少，然后乘上延时数。
        </td>
    </tr>
</table>

<h3 id="4-挂起和恢复线程"><a href="#4-挂起和恢复线程" class="headerlink" title="4. 挂起和恢复线程"></a>4. 挂起和恢复线程</h3><p>当线程调用<code>tTaskDelay()</code>时，线程将主动挂起；当调用<code>tMutexChokeObtainlock()、tSemWait()</code>等函数时，资源不可使用也将导致线程挂起。处于挂起状态的线程？如果其等待的资源超时（超过其设定的等待时间），那么该线程将不再等待这些资源，而是返回到就绪状态；而是返回到就绪状态，或者当其他线程释放掉该线程所等待的资源时，该线程也会返回到就绪状态。<br>线程挂起使用下面的函数接口：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTask.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTaskSuspend(tTask * task);</span><br><span class="line">void CurrentTaskSuspend(void);</span><br></pre></td></tr></table></figure>

<p>线程挂起接口的参数和返回值见下表</p>
<table border="1">
    <caption> tTaskSuspend()/CurrentTaskSuspend()的输入参数</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>task</td>
        <td>
            线程任务（线程句柄）
        </td>
    </tr>
</table>

<p>注意：通常不应该使用这个函数来挂起线程本身，如果确实需要采用<code>tTaskSuspend()、CurrentTaskSuspend()</code>函数挂起当前任务，需要再调用tTaskwakeUp()函数唤醒任务。用户只需要了解该接口的作用，不推荐使用该接口。<br>恢复线程就是让挂起的线程重新进入就绪状态，并将线程放入系统的就绪队列中；如果被恢复线程在所有就绪状态线程中位于最高优先级链表的第一位，那么系统将进行线程上下文的切换。线程恢复使用下面的函数接口：</p>
<figure class="highlight plaintext"><figcaption><span>os_tTask.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void tTaskwakeUp(tTask *task)</span><br></pre></td></tr></table></figure>

<p>线程恢复接口的参数和返回值见下表</p>
<table border="1">
    <caption>tTaskwakeUp()的输入参数和返回值</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td>task</td>
        <td>
            线程任务（线程句柄）
        </td>
    </tr>
</table>

<h3 id="5-设置和删除空闲钩子"><a href="#5-设置和删除空闲钩子" class="headerlink" title="5. 设置和删除空闲钩子"></a>5. 设置和删除空闲钩子</h3><p>空闲钩子函数是空闲线程的钩子函数，如果设置了空闲钩子函数，就可以在系统执行空闲线程时自动执行空闲钩子函数来做一些其他事情，比如系统指示灯。设置空闲任务钩子的接口：</p>
<figure class="highlight plaintext"><figcaption><span>os_Hooks.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void Hooksidle(void)</span><br></pre></td></tr></table></figure>

<p>向钩子函数内部添加函数功能。</p>
<h3 id="6-设置调度锁钩子"><a href="#6-设置调度锁钩子" class="headerlink" title="6. 设置调度锁钩子"></a>6. 设置调度锁钩子</h3><p>在整个系统运行时，系统都处于线程运行、中断触发－响应中断、切换到其他线程，甚至是线程间的切换过程中，或者说系统的上下文切换是系统中最普遍的事件。有时用户可能会想知道在某个时刻发生了什么样的线程切换，可以通过调用下面的函数接口设置一个相应的钩子函数。在系统线程切换时，这个钩子函数将被调用：</p>
<figure class="highlight plaintext"><figcaption><span>os_Hooks.h</span></figcaption><table><tr><td class="code"><pre><span class="line">void HooksTaskSwitch(tTask * from,tTask * to);</span><br></pre></td></tr></table></figure>

<p>设置调度器钩子函数的输入参数如下表所示。(该部分功能正在完善，此处暂时不要使用)</p>
<table border="1">
    <caption>HooksTaskSwitch()的输入参数和返回值</caption>
    <tr>
        <th>参数</th>
        <th>描述</th>
    </tr>
    <tr>
        <td> </td>
        <td>
        </td>
    </tr>
    <tr>
        <td> </td>
        <td>
        </td>
    </tr>
    <tr>
        <th>返回值</th>
        <th>描述</th>
    </tr>
    <tr>
        <td> </td>
        <td>
        </td>
    </tr>
</table>

<h2 id="5-线程应用示例"><a href="#5-线程应用示例" class="headerlink" title="5. 线程应用示例"></a>5. 线程应用示例</h2><p>下面给出在Keil模拟器环境下的应用示例，所有应用示例均在Keil模拟器环境下运行。</p>
<h3 id="1-创建线程示例"><a href="#1-创建线程示例" class="headerlink" title="1. 创建线程示例"></a>1. 创建线程示例</h3><p>下面的例子创建两个线程，代码示例：</p>
<table border="1">
    <caption>线程创建运行示例</caption>
</table>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;GoupOSinclude.h&quot;   //系统头文件</span><br><span class="line"></span><br><span class="line">tTaskStack task1Env[1024];   /*线程1的栈*/</span><br><span class="line">tTaskStack task2Env[1024];   /*线程2的栈*/</span><br><span class="line"></span><br><span class="line">tTask tTask1; /*线程1句柄*/</span><br><span class="line">tTask tTask2; /*线程2句柄*/</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">int a = 0;</span><br><span class="line"></span><br><span class="line">/*&lt;!线程1*/</span><br><span class="line">void task1Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	 tSemInit(&quot;test&quot;,sizeof(&quot;test&quot;),&amp;sem,0,0);</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;	</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">/*&lt;!线程2*/</span><br><span class="line">void task2Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*用户任务初始化程序*/</span><br><span class="line">void AppTaskInit(void)</span><br><span class="line">&#123;</span><br><span class="line">	tTaskInit(&quot;task1&quot;,sizeof(&quot;task1&quot;),&amp;tTask1,task1Entry,(void *)0,0,task1Env,1024,10);</span><br><span class="line">	tTaskInit(&quot;task2&quot;,sizeof(&quot;task2&quot;),&amp;tTask2,task2Entry,(void *)0,9,task2Env,1024,4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">	Goup_os_Init();</span><br><span class="line">	/*&lt;!初始化APP相关配置*/</span><br><span class="line">	AppTaskInit();</span><br><span class="line">	/*&lt;!启动系统*/</span><br><span class="line">	 StartSystem();</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">//	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s2.loli.net/2022/05/07/RSVq3NLfI9dB6iT.png" alt="程序运行效果.png"></p>
<h3 id="2-线程时间片轮转调度示例"><a href="#2-线程时间片轮转调度示例" class="headerlink" title="2. 线程时间片轮转调度示例"></a>2. 线程时间片轮转调度示例</h3><p>下面的例子创建两个线程，示例如下，i和a按时间片的增加</p>
<table border="1">
    <caption>线程创建运行示例</caption>
</table>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;GoupOSinclude.h&quot;   //系统头文件</span><br><span class="line"></span><br><span class="line">tTaskStack task1Env[1024];   /*线程1的栈*/</span><br><span class="line">tTaskStack task2Env[1024];   /*线程2的栈*/</span><br><span class="line"></span><br><span class="line">tTask tTask1; /*线程1句柄*/</span><br><span class="line">tTask tTask2; /*线程2句柄*/</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">int a = 0;</span><br><span class="line"></span><br><span class="line">/*&lt;!线程1*/</span><br><span class="line">void task1Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	 tSemInit(&quot;test&quot;,sizeof(&quot;test&quot;),&amp;sem,0,0);</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;	</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">/*&lt;!线程2*/</span><br><span class="line">void task2Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*用户任务初始化程序*/</span><br><span class="line">void AppTaskInit(void)</span><br><span class="line">&#123;</span><br><span class="line">	tTaskInit(&quot;task1&quot;,sizeof(&quot;task1&quot;),&amp;tTask1,task1Entry,(void *)0,0,task1Env,1024,10);</span><br><span class="line">	tTaskInit(&quot;task2&quot;,sizeof(&quot;task2&quot;),&amp;tTask2,task2Entry,(void *)0,9,task2Env,1024,4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">	Goup_os_Init();</span><br><span class="line">	/*&lt;!初始化APP相关配置*/</span><br><span class="line">	AppTaskInit();</span><br><span class="line">	/*&lt;!启动系统*/</span><br><span class="line">	 StartSystem();</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">//	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s2.loli.net/2022/05/07/RSVq3NLfI9dB6iT.png" alt="程序运行效果.png"></p>
<h3 id="3-线程调度器钩子示例"><a href="#3-线程调度器钩子示例" class="headerlink" title="3. 线程调度器钩子示例"></a>3. 线程调度器钩子示例</h3><p>在线程进行调度切换时，会执行调度，我们可以通过设置一个调度器钩子，在线程切换时做一些额外的事情，下面的例子是在调度器钩子函数中变量的增加，代码如下所示。</p>
<table border="1">
    <caption>调度器钩子函数使用示例</caption>
</table>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;GoupOSinclude.h&quot;   //系统头文件</span><br><span class="line"></span><br><span class="line">tTaskStack task1Env[1024];   /*线程1的栈*/</span><br><span class="line">tTaskStack task2Env[1024];   /*线程2的栈*/</span><br><span class="line"></span><br><span class="line">tTask tTask1; /*线程1句柄*/</span><br><span class="line">tTask tTask2; /*线程2句柄*/</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">int a = 0;</span><br><span class="line"></span><br><span class="line">/*&lt;!线程1*/</span><br><span class="line">void task1Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	 tSemInit(&quot;test&quot;,sizeof(&quot;test&quot;),&amp;sem,0,0);</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;	</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		i ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">/*&lt;!线程2*/</span><br><span class="line">void task2Entry(void *param)</span><br><span class="line">&#123;</span><br><span class="line">	for(;;)</span><br><span class="line">	&#123;</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">		a ++;</span><br><span class="line">		tTaskDelay(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 任务切换的钩子函数</span><br><span class="line"> * 函数只是定义在这里，具体实现需要用户实现</span><br><span class="line"> * @param from 任务结构体</span><br><span class="line"> * @param to </span><br><span class="line"> */</span><br><span class="line">void HooksTaskSwitch(tTask * from,tTask * to)</span><br><span class="line">&#123;</span><br><span class="line">    extern uint32_t hooksSwitch_count;</span><br><span class="line">    hooksSwitch_count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*用户任务初始化程序*/</span><br><span class="line">void AppTaskInit(void)</span><br><span class="line">&#123;</span><br><span class="line">	tTaskInit(&quot;task1&quot;,sizeof(&quot;task1&quot;),&amp;tTask1,task1Entry,(void *)0,0,task1Env,1024,10);</span><br><span class="line">	tTaskInit(&quot;task2&quot;,sizeof(&quot;task2&quot;),&amp;tTask2,task2Entry,(void *)0,9,task2Env,1024,4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">	Goup_os_Init();</span><br><span class="line">	/*&lt;!初始化APP相关配置*/</span><br><span class="line">	AppTaskInit();</span><br><span class="line">	/*&lt;!启动系统*/</span><br><span class="line">	 StartSystem();</span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line">//	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s2.loli.net/2022/05/07/t42OabQ1oUshM7T.png" alt="调度器钩子函数使用示例.png"></p>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS设计与实现</category>
      </categories>
      <tags>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS内核基础</title>
    <url>/2022/05/06/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E6%96%87%E7%AB%A0/GoupOS%E5%86%85%E6%A0%B8%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<blockquote>
<p>GoupOS内核基础</p>
</blockquote>
<span id="more"></span>

<h2 id="1-内核简介"><a href="#1-内核简介" class="headerlink" title="1. 内核简介"></a>1. 内核简介</h2><p>内核是操作系统最基础也是最重要的部分。下图为GoupOS内核架构图，内核处于硬件层之上，内核部分包括内核库、实时内核实现。<br><img data-src="https://s2.loli.net/2022/05/06/MRfU9HDBcPlbYvS.png" alt="GoupOS内核架构图.png"><br>内核库是为了保证内核能够独立运行的一套小型的类似C库（c库：也叫C运行库(C Runtime Library)，它提供了类似strcpy、memcpy等函数，有些也会包括printf、scanf函数的实现。GoupOS内核用到的一小部分C库函数实现。）的函数实现子集。这部分根据编译器的不同，自带C库的情况也会有些不同，当使用GNU、GCC编译器时，会携带更多的标准C库实现。<br>实时内核的实现包括：对象管理、线程管理及调度器、线程间通信、时钟管理及内存管理等。</p>
<h3 id="1-线程调度"><a href="#1-线程调度" class="headerlink" title="1. 线程调度"></a>1. 线程调度</h3><p>线程是GoupOS操作系统中最小的调度单位，线程调度算法是基于优先级的全抢占式多线程调度算法，即在系统中除了中断处理函数、调度器上锁部分的代码和禁止中断的代码不可抢占之外，系统的其他部分都是可以抢占的，包括线程调度器自身。支待32个线程优先级，0优先级代表最高优先级，最低优先级留给空闲线程使用；同时它也支持创建多个具有相同优先级的线程，相同优先级的线程间采用时间片的轮转调度算法进行调度，使每个线程运行相同时间；另外调度器在寻找那些处于就绪状态的具有最高优先级的线程时，所经历的时间是恒定的，系统也不限制线程数量的多少，线程数目只和硬件平台的具体内存相关。</p>
<h3 id="2-时钟管理"><a href="#2-时钟管理" class="headerlink" title="2. 时钟管理"></a>2. 时钟管理</h3><p>GoupOS的时钟管理以时钟节拍为基础， 时钟节拍是操作系统中最小的时钟单位。GoupOS的定时器提供两类定时器机制：第一类是单次触发定时器， 这类定时器在启动后只会触发一次定时器事件， 然后定时器自动停止。 第二类是周期触发定时器，这类定时器会 周期性地触发定时器事件， 直到用户手动停止定时器， 否则将永远待续执行下去。<br>另外， 根据超时函数执行时所处的上下文环境，GoupOS的定时器 可以设置为HARD_TIMER模式或者SOFT_TIMER模式。<br>通常使用定时器定时回调函数（即超时函数）， 完成定时服务。 用户根据自己对定时处理的实时性要求选择合适类型的定时器。</p>
<h3 id="3-线程间同步"><a href="#3-线程间同步" class="headerlink" title="3. 线程间同步"></a>3. 线程间同步</h3><p>GoupOS采用信号量、互斥量与事件集实现线程间同步。 线程通过对信号量、互斥量的获取与释放进行同步；互斥量采用优先级继承的方式解决了实时系统常见的优先级翻转问题。 线程同步机制支持线程按优先级等待或按先进先出方式获取信号量或互斥量。 线程 通过对事件的发送与接收进行同步；事件集支待多事件的 ”或触发” 和 ”与触发”，适合线 程等待多个事件的情况。</p>
<h3 id="4-线程间通信"><a href="#4-线程间通信" class="headerlink" title="4. 线程间通信"></a>4. 线程间通信</h3><p>GoupOS目前只支持支持邮箱通信机制。 邮箱中一封邮件能够接收非固定长度的消息。并把邮件缓存在自己的内存空间中。邮箱的发送动作可安全用于中断服务例程中。 通信机制支持线程按优先级等待或按先进先出方式获取。</p>
<h3 id="5-内存管理"><a href="#5-内存管理" class="headerlink" title="5. 内存管理"></a>5. 内存管理</h3><p>GoupOS目前只支持静态内存池管理。当静态内存池具有可用内存时，系统对内存块分配的时间将是恒定的；当静态内存池为空时，系统将申请内存块的线程挂起或阻塞掉（即线程等待一段时间后仍未获得内存块就放弃申请并返回，或者立刻返回。等待的时间取决千申请内存块时设置的等待时间参数），当其他线程释放内存块到内存池时，如果有挂起的待分配内存块的线程存在的话，则系统会将这个线程唤醒。</p>
<h2 id="2-GoupOS启动流程"><a href="#2-GoupOS启动流程" class="headerlink" title="2. GoupOS启动流程"></a>2. GoupOS启动流程</h2><p>要了解一份代码大多从启动部分开始，这里也采用这种方式，先寻找启动的源头。以MDK-ARM为例，MDK-ARM的用户程序入口为main()函数，位于main.c文件中。系统启动后先从汇编代码startup_stm32f429_439xx.s开始运行，然后跳转到C代码，进行GoupOS系统功能初始化，最后进入用户程序入口main()。启动流程如下图所示。<br><img data-src="https://s2.loli.net/2022/05/07/Ch7HaRjqP1B2vJD.png" alt="GoupOS启动流程图1.png"><img data-src="https://s2.loli.net/2022/05/07/2dsfj4HMbQYIXrK.png" alt="GoupOS启动流程图2.png"><br>    这部分启动代码大致可以分为4个部分：<br>    (1)	初始化与系统相关的硬件；<br>    (2)	初始化系统内核对象，例如定时器、调度器、信号；<br>    (3)	创建main线程，在main线程中对各类模块依次进行初始化；<br>    (4)	初始化定时器线程、空闲线程，并启动调度器。</p>
<h2 id="3-GoupOS程序内存分布"><a href="#3-GoupOS程序内存分布" class="headerlink" title="3. GoupOS程序内存分布"></a>3. GoupOS程序内存分布</h2><p>一般MCU包含的存储空间有片内Flash与片内RAM,RAM相当于内存，Flash相当于硬盘。编译器会将一个程序分类为好几个部分，分别存储在MCU不同的存储区。<br>Keil工程在编译完之后，会有相应的程序所占用的空间提示信息，如下图<br><img data-src="https://s2.loli.net/2022/05/07/Ygo3H8ZQcTjJFmR.png" alt="GoupOS编译信息.png"><br>图中提到Program Size包含以下几部分：<br>(1)	 Code:代码段，存放程序的代码部分。<br>(2)	 RO-data:只读数据段，存放程序中定义的常量。<br>(3)	 RW-data:读写数据段，存放初始化为非0值的全局变最。<br>(4)	 ZI-data: 0数据段，存放未初始化的全局变最及初始化为0的变最。<br>程序编译完成后会生成一个．map文件，该文件说明了各个函数占用的尺寸和地址，在该文件的最后几行也说明了上面几个字段的关系：<br>Total RO  Size (Code + RO Data)                13840 (  13.52kB)<br>Total RW  Size (RW Data + ZI Data)             28272 (  27.61kB)<br>Total ROM Size (Code + RO Data + RW Data)      13964 (  13.64kB)<br>(1)	 RO Size包含了Code及RO-data,表示程序占用Flash空间的大小；<br>(2)	 RW Size包含了RW-data及ZI-data,表示运行时占用的RAM的大小；<br>(3)	 ROM Size包含了Code、ROData以及RWData,表示烧写程序所占用的Flash空间的大小。<br>程序运行之前，需要有文件实体被烧录到STM32的Flash中，一般是bin或者hex文件，该被烧录文件称为可执行映像文件。</p>
<h2 id="4-GoupOS内核对象管理架构"><a href="#4-GoupOS内核对象管理架构" class="headerlink" title="4. GoupOS内核对象管理架构"></a>4. GoupOS内核对象管理架构</h2><p>GoupOS采用内核对象管理系统来访问&#x2F;管理所有内核对象， 内核对象包含内核中绝大部分设施， 这些内核对象可以是静态分配的静态对象。<br>通过这种内核对象的设计方式，GoupOS做到了不依赖于具体的内存分配方式， 系统的灵活性得到了极大的提高。<br>GoupOS内核对象包括线程、信号景、互斥量、事件、邮箱、消息队列和定时器等。对象容器中包含每类内核对象的信息，包括对象类型、大小等。对象一个链表，所有的内核对象都被链接到该链表上，GoupOS的容器给每类内核对象分配了，目前该部分功能预留，未完成后续开发完成该功能。</p>
<h2 id="5-GoupOS内核配置示例"><a href="#5-GoupOS内核配置示例" class="headerlink" title="5. GoupOS内核配置示例"></a>5. GoupOS内核配置示例</h2><p>GoupOS的一个重要特性是高度可裁剪性，支待对内核进行精细调整，对组件进行灵活拆卸。其配置主要通过修改工程目录下的GoupOSconfig.h文件来进行，用户可以通过打开／关闭该文件中的宏定义来对代码进行条件编译，最终达到系统配置和裁剪的目的，如下所示。</p>
<ol>
<li>GoupOS内核部分。<figure class="highlight plaintext"><figcaption><span>GoupOSconfig.h</span></figcaption><table><tr><td class="code"><pre><span class="line">/*系统自述*/</span><br><span class="line">#define    OS_SPLITLINE             &quot;----------------------------------------------------------------------------------\n&quot;</span><br><span class="line">#define    OS_NAME                  &quot;本套嵌入式系统名称: GoupOS 、Goup_OS 、Goupos\n&quot;</span><br><span class="line">#define    OS_AUTHOR_MAIL           &quot;author：XGM    mailbox：xgmcreate@foxmail.com\n&quot;</span><br><span class="line">#define    OS_VERSION               &quot;version：V1.111(版本号说明主版本号、子版本号、修正版本号、开发版本号)\n&quot;</span><br><span class="line">#define    OS_INFO                  &quot;本嵌入式系统正在规模测试中，如果使用遇到任何问题，请发邮件到作者邮箱中，作者会及时解决\n&quot;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 定义预备，防止移植代码缺失该部分定义</span><br><span class="line"> *        关键字的宏定义，</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">#define     __IO    volatile                /*!&lt; Defines &#x27;read / write&#x27; permissions              */</span><br><span class="line">#define     weak    __attribute__((weak))   /*&lt;!弱定义宏*/</span><br><span class="line">/**</span><br><span class="line"> * @brief 系统的启动流程，以及任务信息</span><br><span class="line"> * </span><br><span class="line"> */</span><br><span class="line">#define OS_STARTUPINFO  1</span><br><span class="line">/**</span><br><span class="line"> * @brief OS的使能与关闭</span><br><span class="line"> */</span><br><span class="line">#define OS_ENABLE                   (1)</span><br><span class="line">#define OS_DISABLE                  (0)</span><br><span class="line"></span><br><span class="line">/* System time base. to configure */</span><br><span class="line">/*&lt;!系统时钟*/</span><br><span class="line">#define	CPU_CLOCK_HZ				(180000000)					</span><br><span class="line">/*&lt;!系统每秒钟滴答次数*/</span><br><span class="line">#define OS_1S_TICKS                 (1000)                      </span><br><span class="line">/*&lt;!系统时基*/</span><br><span class="line">#define OS_TIME_BASE				(CPU_CLOCK_HZ/OS_1S_TICKS)</span><br><span class="line">/*&lt;!系统最小时间单位*/</span><br><span class="line">#define OS_SYSTICK_MS				(1)							</span><br><span class="line">/*&lt;!滴答次数*/</span><br><span class="line">#define TICKS_PER_SEC				(1000/OS_SYSTICK_MS)		</span><br><span class="line"></span><br><span class="line">/* 系统内部配置区域 */</span><br><span class="line">//目前支持最大的优先级数量		位图目前也只支持32</span><br><span class="line">#define	TINYOS_PRO_COUNT			(32)        /*&lt;!优先级*/</span><br><span class="line">/*&lt;!关于优先级的宏定义，建议不要修改*/</span><br><span class="line">#define OS_PRI						(0)        </span><br><span class="line">/*&lt;!0：不压缩系统 1：压缩系统（暂时不可使用）时间换空间*/</span><br><span class="line">#define SMALL_OS					(0)			</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 判断芯片是否有FPU功能，如果有FPU功能：启动或者关闭FPU功能        </span><br><span class="line"> *        OS_ARM_FPU_ENABLE:    OS_ENABLE 启动FPU功能</span><br><span class="line"> *                              	 OS_DISABLE关闭FPU功能</span><br><span class="line"> * 启动FPU功能时，keil同时设置 Floating Point Hardware :Single Precision</span><br><span class="line"> */</span><br><span class="line">#define OS_ARM_FPU_ENABLE           OS_ENABLE</span><br><span class="line"></span><br><span class="line">/*&lt;!Thread FAULT off or on*/</span><br><span class="line">#define THREAD_FAULT				(0)</span><br><span class="line">/*&lt;!delay mode select 0:独立保存延时时间，1：递增的延时队列（更快）*/</span><br><span class="line">#define DELAY_MODE					(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*1:OS build add Security code;	0:OS build do not add Security code*/</span><br><span class="line">#define OS_ADD_SECURITY_CODE		(1)</span><br><span class="line">/**</span><br><span class="line"> * @brief 要求实时性高，那么只会启动部分安全代码；实时性要求不高，可以启动全部安全代码，也可以不全部启动</span><br><span class="line"> * 1：启动高实时性，部分安全代码关闭， </span><br><span class="line"> * 0：关闭高实时性但是添加全部安全代码，导致代码增大</span><br><span class="line"> */</span><br><span class="line">#define OS_HIGH_REAL_TIME           (1)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 所有组件名称长度,默认情况下使用“OS_ALLNAME_LENGTH”宏，如果长度不够可自行定义</span><br><span class="line"> * 该部分宏定义，不能删除，否则可能系统出错</span><br><span class="line"> */</span><br><span class="line">#define OS_ALLNAME_LENGTH       (32)                         /*&lt;!待修改*/</span><br><span class="line"></span><br><span class="line">#define OS_SEMNAME_LENGTH       OS_ALLNAME_LENGTH           /*&lt;!信号量名称长度*/</span><br><span class="line">#define OS_TASKNAME_LENGTH      OS_ALLNAME_LENGTH           /*&lt;!任务名称长度*/</span><br><span class="line">#define OS_MAILNAME_LENGTH      OS_ALLNAME_LENGTH           /*&lt;!邮箱任务名称长度*/</span><br><span class="line">#define OS_FLAGGROUP_LENGTH     OS_ALLNAME_LENGTH           /*&lt;!邮箱任务名称长度*/</span><br><span class="line">#define OS_MUTEX_LENGTH         OS_ALLNAME_LENGTH           /*&lt;!互斥信号量名长度*/</span><br><span class="line">#define OS_TIMERNAME_LENGTH     OS_ALLNAME_LENGTH           /*&lt;!定时器名长度*/</span><br><span class="line">/**</span><br><span class="line">系统的空闲任务配置</span><br><span class="line">*/</span><br><span class="line">#define	OS_IDLETASK_STACK_SIZE		(1024)</span><br><span class="line">/**</span><br><span class="line"> * @brief 定时器任务的线程栈</span><br><span class="line"> *        启动中断定时器</span><br><span class="line"> *        启动软件定时器</span><br><span class="line"> *        定时器任务优先级不能与空闲线程任务优先级相同,不然空闲定时器与空闲任务是在最低优先级运行而且是按照时间片运行</span><br><span class="line"> */</span><br><span class="line">#define OS_TIMERMODULE_INIT         (1)</span><br><span class="line">#define OS_STARTHARD_TIMER          (1)</span><br><span class="line">#define OS_STARTSOFT_TIMER          (1)</span><br><span class="line">#define OS_TIMERTASK_STACK_SIZE		(1024)</span><br><span class="line">#define OS_TIMERTASK_PRIO           (1)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 内核模块裁剪</span><br><span class="line"> * 1：打开相应的功能模块</span><br><span class="line"> * 0：关闭相应的功能模块</span><br><span class="line"> */</span><br><span class="line">/*&lt;!控制是否裁剪信号量功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_SEM               (1)             </span><br><span class="line">/*&lt;!控制是否裁剪邮箱功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_MAILMSG           (1)            </span><br><span class="line">/*&lt;!控制是否裁剪内存功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_MEMBLOCK          (1)             </span><br><span class="line">/*&lt;!控制是否裁剪事件标志组功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_EVENTFLAGGROUP    (1)             </span><br><span class="line">/*&lt;!控制是否裁剪互斥锁功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_MUTEX             (1)            </span><br><span class="line">/*&lt;!控制是否裁剪定时器功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_TIMER             (1)             </span><br><span class="line">  /*&lt;!控制是否裁剪CPU使用率功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_CPUUSAGE_STAT     (1)           </span><br><span class="line">/*&lt;!控制是否裁剪钩子函数功能模块*/</span><br><span class="line">#define GOUPOS_ENABLE_HOOKS             (1)</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="6-GoupOS常用宏定义说明"><a href="#6-GoupOS常用宏定义说明" class="headerlink" title="6. GoupOS常用宏定义说明"></a>6. GoupOS常用宏定义说明</h2><p>GoupOS实时操作系统暂时无该部分宏定义，后续可能扩展，保留当前章节。</p>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS设计与实现</category>
      </categories>
      <tags>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS嵌入式实时系统文件以及说明</title>
    <url>/2022/05/06/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E6%96%87%E7%AB%A0/GoupOS%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E4%BB%A5%E5%8F%8A%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<blockquote>
<p>GoupOS嵌入式实时系统文件以及说明</p>
</blockquote>
<span id="more"></span>

<h2 id="1-GoupOS操作系统软件框架"><a href="#1-GoupOS操作系统软件框架" class="headerlink" title="1. GoupOS操作系统软件框架"></a>1. GoupOS操作系统软件框架</h2><p><img data-src="https://s2.loli.net/2022/05/06/4mnPZYu8ciEBXrC.png" alt="GoupOS V1.111版本软件框架.png"></p>
<h2 id="2-嵌入式实时操作系统GoupOS文件夹说明文档"><a href="#2-嵌入式实时操作系统GoupOS文件夹说明文档" class="headerlink" title="2. 嵌入式实时操作系统GoupOS文件夹说明文档"></a>2. 嵌入式实时操作系统GoupOS文件夹说明文档</h2><p><img data-src="https://s2.loli.net/2022/05/06/7zqBgpnaSXIC581.png" alt="GoupOS操作系统文件目录说明.png"></p>
<h2 id="3-嵌入式实时操作系统GoupOS硬件平台"><a href="#3-嵌入式实时操作系统GoupOS硬件平台" class="headerlink" title="3. 嵌入式实时操作系统GoupOS硬件平台"></a>3. 嵌入式实时操作系统GoupOS硬件平台</h2><ol>
<li>目前GoupOS只搭载在Cortex-M3、M4、M7内核的STM32系列上运行，其他平台芯片暂时没平台，未搭载测试，后续将搭载在不同平台测试。</li>
<li>GoupOS嵌入式实时操作系统支持Cortex内核开启FPU功能。移植到其他芯片需要注意硬件平台是否支持FPU功能，不支持需要软件关闭关闭该功能，该配置在GoupOSconfig.h文件中进行配置。</li>
</ol>
<h2 id="4-嵌入式实时操作系统GoupOS软件平台"><a href="#4-嵌入式实时操作系统GoupOS软件平台" class="headerlink" title="4. 嵌入式实时操作系统GoupOS软件平台"></a>4. 嵌入式实时操作系统GoupOS软件平台</h2><p>目前该操作系统编译运行的平台为keil软件平台，编译软件版本号V5.36.0.0;软件安装略，希望大家支持正版。学生或兴趣爱好者，网络提供其他方法参考。</p>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS设计与实现</category>
      </categories>
      <tags>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于next博客主题设置和加速</title>
    <url>/2022/05/05/%E5%85%B3%E4%BA%8Enext%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/%E5%85%B3%E4%BA%8Enext%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E5%92%8C%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<blockquote>
<p>这里就不写博客的介绍了，关于next主题修改可以参考以下这些博客，可能版本不相同，但是配置大致相似。</p>
</blockquote>
<span id="more"></span>
<h2 id="1-关闭指定文章的打赏功能"><a href="#1-关闭指定文章的打赏功能" class="headerlink" title="1. 关闭指定文章的打赏功能"></a>1. 关闭指定文章的打赏功能</h2><figure class="highlight plaintext"><figcaption><span>关闭指定文章的打赏功能</span></figcaption><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">只需在文章头部添加下面代码既可以关闭本文章的打赏功能</span><br><span class="line">reward_settings: </span><br><span class="line">  enable: false # true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="1-NexT主题进阶配置"><a href="#1-NexT主题进阶配置" class="headerlink" title="1. NexT主题进阶配置"></a>1. <a href="https://wylu.me/posts/e0424f3f/">NexT主题进阶配置</a></h2><h2 id="2-提升Hexo-NexT主题加载速度"><a href="#2-提升Hexo-NexT主题加载速度" class="headerlink" title="2. 提升Hexo NexT主题加载速度"></a>2. <a href="https://finisky.github.io/responsivehexonext/">提升Hexo NexT主题加载速度</a></h2><h2 id="3-Hexo-博客-静态网站目录文件介绍"><a href="#3-Hexo-博客-静态网站目录文件介绍" class="headerlink" title="3. Hexo 博客 静态网站目录文件介绍"></a>3. <a href="https://www.cnblogs.com/baiqiantao/p/10538926.html">Hexo 博客 静态网站目录文件介绍</a></h2><h2 id="4-hexo-个人博客基于-NexT-主题"><a href="#4-hexo-个人博客基于-NexT-主题" class="headerlink" title="4. hexo 个人博客基于 NexT 主题"></a>4. <a href="https://choubin.site/2019/12/30/CustomBlogTheme/">hexo 个人博客基于 NexT 主题</a></h2>]]></content>
      <categories>
        <category>next主题设置与加速</category>
      </categories>
      <tags>
        <tag>next主题设置</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建自己的pdf在线预览工具(pdf.js)</title>
    <url>/2022/05/04/pdf%E8%AE%BE%E7%BD%AE/%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84pdf%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>说明:关于该功能，测试发现部分浏览器不支持显示，如果遇到浏览器不显示，请直接换一个浏览器；浏览器Microsoft Edge可以支持显示（请文明上网）</p>
</blockquote>
<span id="more"></span>

<h2 id="1-使用gitee和pdf-js搭建pdf在线浏览工具"><a href="#1-使用gitee和pdf-js搭建pdf在线浏览工具" class="headerlink" title="1. 使用gitee和pdf.js搭建pdf在线浏览工具"></a>1. 使用gitee和pdf.js搭建pdf在线浏览工具</h2><p>码云Pages(gitee pages)是一个免费的静态网页托管服务, 除此之外你还可以使用gitee pages托管博客、项目官网等. 之后我们将使用gitee pages来托管pdf.js. (使用Github Pages也可以达到同样的效果, 但是Github的访问速度慢，可以给github加一个前缀 <code>cdn.github.com</code>)</p>
<p>pdf.js是一款使用HTML5 Canvas安全地渲染pdf文件以及遵从网页标准的网页浏览器渲染pdf文件的javascript库.该插件不需要任何本地支持，对浏览器的兼容性也比较好.</p>
<blockquote>
<p>不管使用何种方法实现，都需要先注册账号，<a href="https://gitee.com/">gitee</a>或者<a href="https://github.com/">github</a>账号</p>
</blockquote>
<blockquote>
<p>两种方法，既有缺点也优点：<br>    1.gitee优点在于可以将仓库设置为私人仓库状态，别人无法看到你仓库中有那些文件，私密性强，github相反，必须将仓库设置公开状态。<br>      2.gitee本地上传到仓库的文件，不能自动的部署，需要手动进入<code>gitee pages</code>去更新，而github相反，是自动部署完成，不需要人为去点击。<br>      3.<code>gitee pages</code>该功能需要实名认证，需要一个工作日审核，两种方法优缺点，任君选择。</p>
</blockquote>
<p>在gitee或github创建名为Npdf的仓库, 创建好仓库好后，请在本地连接到远程仓库：如果觉得<code>Git</code>软件使用困难，可以使用图形软件<a href="https://desktop.github.com/">GitHubDesktop</a>管理项目，所有git的使用方法请自行百度。</p>
<h2 id="2-下载pdf-js源码到解压到本地仓库中"><a href="#2-下载pdf-js源码到解压到本地仓库中" class="headerlink" title="2. 下载pdf.js源码到解压到本地仓库中"></a>2. 下载pdf.js源码到解压到本地仓库中</h2><p><a href="https://mozilla.github.io/pdf.js/getting_started/#download">pdf.js源码地址</a>此处我建议新手小白直接下载 <code>Prebuilt</code>版本，个人参考经验；如果是大佬，请自行选择，个人建议自行参考。</p>
<p><img data-src="https://s2.loli.net/2022/05/04/m6KDd48Naeck7TW.png" alt="图示"></p>
<p>将你自己要展示的pdf文件放入web文件夹下<br><img data-src="https://s2.loli.net/2022/05/04/favCULNIc4sGnKX.png" alt="图示"></p>
<p>将文件上传到<code>gitee</code>或<code>github</code>的Npdf仓库</p>
<h2 id="3-点击gitee的Npdf仓库中选择Service下的Gitee-Pages-进入选择创建Pages；如果使用github无此操作。"><a href="#3-点击gitee的Npdf仓库中选择Service下的Gitee-Pages-进入选择创建Pages；如果使用github无此操作。" class="headerlink" title="3. 点击gitee的Npdf仓库中选择Service下的Gitee Pages.进入选择创建Pages；如果使用github无此操作。"></a>3. 点击gitee的Npdf仓库中选择Service下的Gitee Pages.进入选择创建Pages；如果使用github无此操作。</h2><p><img data-src="https://s2.loli.net/2022/05/04/hWsUgVO3qrRaHXl.png" alt="图示"></p>
<h2 id="4-最终可以生成如下内容-部署成功"><a href="#4-最终可以生成如下内容-部署成功" class="headerlink" title="4. 最终可以生成如下内容(部署成功)"></a>4. 最终可以生成如下内容(部署成功)</h2><p><img data-src="https://s2.loli.net/2022/05/04/hWsUgVO3qrRaHXl.png" alt="图示"></p>
<h2 id="5-你可以使用如下链接-打开之前放入web文件夹下的pdf文件"><a href="#5-你可以使用如下链接-打开之前放入web文件夹下的pdf文件" class="headerlink" title="5. 你可以使用如下链接, 打开之前放入web文件夹下的pdf文件"></a>5. 你可以使用如下链接, 打开之前放入web文件夹下的pdf文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://xgm-embedded-os.gitee.io/npdf/web/viewer.html?file=compressed.tracemonkey-pldi-09.pdf</span><br><span class="line">https://xgm-embedded-os.gitee.io/npdf 你的Npdf仓库Gitee Pages主页</span><br><span class="line">web/viewer.html</span><br><span class="line">?file= 后接pdf的名称</span><br></pre></td></tr></table></figure>
<p><img data-src="https://s2.loli.net/2022/05/05/cdeLvmDUfbpnk2F.png" alt="效果展示"></p>
<h2 id="6-更新PDF文件或添加新的PDF文件"><a href="#6-更新PDF文件或添加新的PDF文件" class="headerlink" title="6. 更新PDF文件或添加新的PDF文件"></a>6. 更新PDF文件或添加新的PDF文件</h2><p>之后每一次更新文件时，仅仅每次将web中的PDF文件替换，然后执行上传到git仓库；<br>添加新的PDF,只需要将新的pdf复制到web中，然后执行上传到git仓库；<br>回到gitee你创建的仓库中，点击服务-giteepages-更新部署即可即第三步操作(github没有此操作)。</p>
<h2 id="7-参考连接"><a href="#7-参考连接" class="headerlink" title="7. 参考连接"></a>7. 参考连接</h2><p>参考一：<a href="https://www.csdn.net/tags/MtTaEg5sOTc0MTQ3LWJsb2cO0O0O.html">https://www.csdn.net/tags/MtTaEg5sOTc0MTQ3LWJsb2cO0O0O.html</a><br>参考二：<a href="https://zhuanlan.zhihu.com/p/338258872">https://zhuanlan.zhihu.com/p/338258872</a><br>参考三：<a href="https://www.cnblogs.com/sunshinezjb/p/9248144.html">https://www.cnblogs.com/sunshinezjb/p/9248144.html</a></p>
]]></content>
      <categories>
        <category>搭建在线浏览PDF</category>
      </categories>
      <tags>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>关于hexo主题Markdown中显示PDF</title>
    <url>/2022/05/03/pdf%E8%AE%BE%E7%BD%AE/%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98Markdown%E4%B8%AD%E6%98%BE%E7%A4%BAPDF/</url>
    <content><![CDATA[<blockquote>
<p>本章主要是关于hexo中next主题，同时使用了pdf模块和文章加密模块不能同时显示出来的问题，进行解决，至于文章怎么加密，请自行百度解决；</p>
</blockquote>
<span id="more"></span>

<p>此处主要解决不能显示pdf的方法：</p>
<h2 id="方法一：-复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址"><a href="#方法一：-复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址" class="headerlink" title="方法一： 复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址"></a>方法一： 复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;object data=&quot;/PDF/stm32h745zi.pdf&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;800px&quot;&gt;</span><br><span class="line">    &lt;embed src=&quot;/PDF/stm32h745zi.pdf&quot;&gt;</span><br><span class="line">        &lt;p&gt;This browser does not support PDFs. Please download the PDF to view it: &lt;a href=&quot;/PDF/stm32h745zi.pdf&quot;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">    &lt;/embed&gt;</span><br><span class="line">&lt;/object&gt;</span><br></pre></td></tr></table></figure>

<h2 id="方法二：-复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址"><a href="#方法二：-复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址" class="headerlink" title="方法二： 复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址"></a>方法二： 复制下面代码，将代码中pdf地址换成你的地址即可，可以网页链接也可以本地地址</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe id=&quot;myFrame&quot; src=&quot;/PDF/stm32h745zi.pdf&quot; width=&quot;100%&quot; height=&quot;500&quot;&gt;</span><br><span class="line">	&lt;p&gt;This browser does not support PDFs. Please download the PDF to view it: &lt;a href=&quot;/PDF/stm32h745zi.pdf&quot;&gt;Download PDF&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure>

<p>这里显示的高度和宽度可以自己手动指定，也可以根据页面调节，上面代码中显示的宽度是根据页面自动调节的，如果不需要可以通过修改 <code>width=&quot;100%&quot;</code>的值来指定宽度</p>
<h2 id="方法一效果图："><a href="#方法一效果图：" class="headerlink" title="方法一效果图："></a>方法一效果图：</h2><object data="/PDF/stm32h745zi.pdf" type="application/pdf" width="100%" height="500px">
    <embed src="/PDF/stm32h745zi.pdf">
        <p>This browser does not support PDFs. Please download the PDF to view it: <a href="/PDF/stm32h745zi.pdf">Download PDF</a>.</p>
    </embed>
</object>

<h2 id="方法二效果图："><a href="#方法二效果图：" class="headerlink" title="方法二效果图："></a>方法二效果图：</h2><iframe id="myFrame" src="/PDF/stm32h745zi.pdf" width="100%" height="500">
    <p>This browser does not support PDFs. Please download the PDF to view it: <a href="/PDF/stm32h745zi.pdf">Download PDF</a>.</p>
</iframe>
]]></content>
      <categories>
        <category>关于hexo主题Markdown显示pdf文件</category>
      </categories>
      <tags>
        <tag>PDF</tag>
      </tags>
  </entry>
  <entry>
    <title>管理服务器</title>
    <url>/2022/04/30/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E7%AE%A1%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="229d9862cac849f752ed9b8f963297ea1f884f21cfc29be761a8d67229ff85ad">6347daf711dfb81fc22167a188af0e33d3bcb6e9abef9937802803ce13d2a936a0523c8410dd3ce110a8ac0baf92c1a2de0e1d343840bb62f34fa6b744844f7436514b3aa42fc88c0c192b2c528b956e7cc2c6790f9d755dcb7d1f01143025ad0d0c7b90b1503f067dc531efa58dc4062d632dea46b8f4c1ad4eb2a810138ee6364250b70e24c6d83abf46bb7abd6cfefe40f5846bf5347bced92b959ca4ae4e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>个人服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>同一台电脑上多个github或gitee账户</title>
    <url>/2022/04/27/gitee&amp;&amp;github/%E5%90%8C%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E5%A4%9A%E4%B8%AAgithub%E6%88%96gitee%E8%B4%A6%E6%88%B7/</url>
    <content><![CDATA[<blockquote>
<p>同一台电脑有两个github账号或者两个gitee账号，配置如下都相同</p>
</blockquote>
<span id="more"></span>
<ol>
<li>请参考：<a href="https://help.gitee.com/repository/ssh-key/configure-multiple-ssh-keys">gitee文档</a>    配置文件如下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># gitee xxxxxx@qq.com </span><br><span class="line">Host gitee.com</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/giteeqq_id_rsa</span><br><span class="line"></span><br><span class="line"># gitee xxxxxxx@189.cn</span><br><span class="line">Host xxxx.gitee.com		#此处xxxx需要修改为你的gitee名称</span><br><span class="line">HostName gitee.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/gitee189_id_rsa</span><br><span class="line"></span><br><span class="line"># github aaaaa@189.cn</span><br><span class="line">Host aaaaa.github.com	#此处aaaaa需要修改为你的github名称</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/github189_id_rsa</span><br><span class="line"></span><br><span class="line"># github   xxxx@qq.com</span><br><span class="line">#Host xxxx.github.com	#此处xxxx需要修改为你的github名称</span><br><span class="line">#HostName github.com</span><br><span class="line">#PreferredAuthentications publickey</span><br><span class="line">#IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li>
<li>文件中有多个<code>xxx</code>或<code>aaaaa</code>都是需要修改处，如果需要验证添加SSH是否成功，测试代码如下，对应上面配置文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@xxxx.gitee.com</span><br><span class="line">ssh -T git@aaaaa.github.com</span><br><span class="line">ssh -T git@xxxx.github.com</span><br></pre></td></tr></table></figure>
依此类推有多少个gitee或github就配置多少个，特别注意 xxxx_id_rsa 不能配置为相同文件名。</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>多Github或Gitee账号同时存在</tag>
      </tags>
  </entry>
  <entry>
    <title>双核NUCLEO-H745ZI-Q开发(1)</title>
    <url>/2022/04/24/STM32/%E5%8F%8C%E6%A0%B8NUCLEO-H745ZI-Q%E5%BC%80%E5%8F%91-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="哦，这些解密后的内容无法验证，不过你还是可以看看的。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c7e9d95733ac09f1e343974f6f62ef4bd7d21e0c31693bb9433b3c89c927c201"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-flip">
      <input class="hbe hbe-input-field hbe-input-field-flip" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-flip" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-flip" data-content="请在此处输入密码">请在此处输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ST</category>
        <category>32H745ZIT6</category>
      </categories>
      <tags>
        <tag>STM32H745ZIT6</tag>
        <tag>双核</tag>
      </tags>
  </entry>
  <entry>
    <title>GoupOS嵌入式实时操作系统介绍</title>
    <url>/2022/04/24/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/GoupOS%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><span id="more"></span>

<blockquote>
<p><a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/9756763?fr=aladdin">嵌入式实时操作系统介绍</a></p>
</blockquote>
<ul>
<li>GoupOS嵌入式实时操作系统:目前只支持ARM架构下Cortex-M3、M4、M7内核的处理器，双核处于开发中；有关GoupOS嵌入式实时操作系统移植，在每个文件夹下readme.txt文件,根据选项便可以移植。</li>
<li>使用GoupOS嵌入式实时操作系统中，如遇系统报错或者系统导致程序错误可以通过邮箱联系作者：<a href="mailto:&#x78;&#103;&#x6d;&#99;&#114;&#x65;&#97;&#x74;&#101;&#x40;&#102;&#x6f;&#x78;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#x78;&#103;&#x6d;&#99;&#114;&#x65;&#97;&#x74;&#101;&#x40;&#102;&#x6f;&#x78;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a>；将第一时间修复操作系统；</li>
<li><a href="https://gitee.com/xgm-embedded-os/GoupOS">GoupOS嵌入式实时操作系统项目地址导航</a></li>
<li><a href="https://gitee.com/xgm-embedded-os/GoupOS/tree/master/Go_up/os/%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">GoupOS嵌入式实时操作系统说明文档导航</a> 文档目前还有部分未写完成，还在继续完善中。</li>
</ul>
<p><img data-src="https://s2.loli.net/2022/05/05/komPdfKl2SEIUyN.png" alt="goupos操作系统软著权证书4.png"></p>
]]></content>
      <categories>
        <category>GoupOS</category>
        <category>GoupOS嵌入式实时操作系统</category>
      </categories>
      <tags>
        <tag>嵌入式实时操作系统</tag>
        <tag>GoupOS嵌入式实时操作系统</tag>
        <tag>RTOS</tag>
      </tags>
  </entry>
  <entry>
    <title>关于git命令</title>
    <url>/2022/04/24/gitee&amp;&amp;github/%E5%85%B3%E4%BA%8Egit%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[ <!-- <center> <font face="宋体"  size="6">关于git命令 </font></center> -->

<h1 id="查看本地是否已有SSH"><a href="#查看本地是否已有SSH" class="headerlink" title="查看本地是否已有SSH"></a>查看本地是否已有SSH</h1><span id="more"></span>

<ol>
<li><p>在本地打开 git bash 命令行窗口，输入以下命令<br><code>cd ~/.ssh</code></p>
</li>
<li><p>如果没有，显示<br><code>bash: cd: /c/Users/Administrator/.ssh: No such file or directory</code></p>
</li>
<li><p>否则表示本地以创建 SSH key 了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ls</span><br><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="创建-SSH-key"><a href="#创建-SSH-key" class="headerlink" title="创建 SSH key"></a>创建 SSH key</h1><!-- more -->

<ol>
<li>最后一个参数替换为自己的 <a href="gitee.com">Gitee</a> || <a href="github.com">Github</a> 注册邮箱<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure></li>
<li>接下来会提示输入生成的key存放的路径，不设置直接回车的话会默认创建在C:&#x2F;Users&#x2F;你的用户账号&#x2F;.ssh文件夹下<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter file in which to save the key (/c/Users/Him/.ssh/id_rsa):</span><br><span class="line">Created directory &#x27;/c/Users/userpath/.ssh&#x27;.</span><br></pre></td></tr></table></figure></li>
<li>再接下来会提示你输入密码，这个密码是用来每次提交的时候输入确认，可以不设置，直接回车两次<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></li>
<li>最后成功后会看到类似如下的输出，表示成功生成SSH key了，可以到C:&#x2F;Users&#x2F;你的用户账号&#x2F;.ssh文件夹下查看<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/Him/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/Him/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:RwvBINgH8CEt2KniltmykeyDsOseUYcwMzehFeyT86s xxxxxx@qq.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">| o+%OO+o.        |</span><br><span class="line">|..=+%*+ ..       |</span><br><span class="line">| ..+o+o.. .      |</span><br><span class="line">|o.  o=.  o .     |</span><br><span class="line">|o oolalala S o      |</span><br><span class="line">| +.+.. . .       |</span><br><span class="line">|. .o    .        |</span><br><span class="line">|  . .  .         |</span><br><span class="line">|   . E.          |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="SSH验证"><a href="#SSH验证" class="headerlink" title="SSH验证"></a>SSH验证</h1><!-- more -->

<ol>
<li><p>验证本地生成的ssh，github或者gitee端密钥是否添加成功，输入如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com </span><br></pre></td></tr></table></figure></li>
<li><p>如果添加成功就会显示如下语句</p>
<blockquote>
<p>Hi Username! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Hi Username! You’ve successfully authenticated, but GITEE.COM does not provide shell access.</p>
</blockquote>
</li>
<li><p>Username:是你的在git端的名称</p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇文章</title>
    <url>/2022/04/23/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="第一级标题"><a href="#第一级标题" class="headerlink" title="第一级标题"></a>第一级标题</h1><h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="这个是三级标题"><a href="#这个是三级标题" class="headerlink" title="这个是三级标题"></a>这个是三级标题</h3> <span id="more"></span>

<ul>
<li>列表1</li>
<li>列表2<br>  a 子列表1<br>  b 子列表2</li>
<li>列表3<br><a href="https://gitee.com/">gitee</a><br><img data-src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jj20.com%2Fup%2Fallimg%2F1114%2F113020142315%2F201130142315-1-1200.jpg&refer=http%3A%2F%2Fimg.jj20.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1653257802&t=c93e7ceaa0b5c91564e5be1bbdc969b1" alt="图片测试"></li>
</ul>
<p><em><strong>字体加粗变斜</strong></em></p>
<p><code>&lt;html&gt;&lt;/html&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">		&lt;title&gt;标题&lt;/title&gt;</span><br><span class="line">	&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>引用</p>
</blockquote>
<hr>
<hr>
]]></content>
      <categories>
        <category>测试分类</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/04/22/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
